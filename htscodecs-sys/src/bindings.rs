/* automatically generated by rust-bindgen 0.69.4 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const FQZ_FREVERSE: u32 = 16;
pub const FQZ_FREAD2: u32 = 128;
pub const FQZ_VERS: u32 = 5;
pub const FQZ_MAX_STRAT: u32 = 3;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t
{
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t()
{
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t
{
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t()
{
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fqz_slice
{
    pub num_records: ::std::os::raw::c_int,
    pub len: *mut u32,
    pub flags: *mut u32,
}
#[test]
fn bindgen_test_layout_fqz_slice()
{
    const UNINIT: ::std::mem::MaybeUninit<fqz_slice> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fqz_slice>(),
        24usize,
        concat!("Size of: ", stringify!(fqz_slice))
    );
    assert_eq!(
        ::std::mem::align_of::<fqz_slice>(),
        8usize,
        concat!("Alignment of ", stringify!(fqz_slice))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_records) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_slice),
            "::",
            stringify!(num_records)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_slice),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_slice),
            "::",
            stringify!(flags)
        )
    );
}
pub const GFLAG_MULTI_PARAM: ::std::os::raw::c_int = 1;
pub const GFLAG_HAVE_STAB: ::std::os::raw::c_int = 2;
pub const GFLAG_DO_REV: ::std::os::raw::c_int = 4;
pub const PFLAG_DO_DEDUP: ::std::os::raw::c_int = 2;
pub const PFLAG_DO_LEN: ::std::os::raw::c_int = 4;
pub const PFLAG_DO_SEL: ::std::os::raw::c_int = 8;
pub const PFLAG_HAVE_QMAP: ::std::os::raw::c_int = 16;
pub const PFLAG_HAVE_PTAB: ::std::os::raw::c_int = 32;
pub const PFLAG_HAVE_DTAB: ::std::os::raw::c_int = 64;
pub const PFLAG_HAVE_QTAB: ::std::os::raw::c_int = 128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fqz_param
{
    pub context: u16,
    pub pflags: ::std::os::raw::c_uint,
    pub do_sel: ::std::os::raw::c_uint,
    pub do_dedup: ::std::os::raw::c_uint,
    pub store_qmap: ::std::os::raw::c_uint,
    pub fixed_len: ::std::os::raw::c_uint,
    pub use_qtab: ::std::os::raw::c_uchar,
    pub use_dtab: ::std::os::raw::c_uchar,
    pub use_ptab: ::std::os::raw::c_uchar,
    pub qbits: ::std::os::raw::c_uint,
    pub qloc: ::std::os::raw::c_uint,
    pub pbits: ::std::os::raw::c_uint,
    pub ploc: ::std::os::raw::c_uint,
    pub dbits: ::std::os::raw::c_uint,
    pub dloc: ::std::os::raw::c_uint,
    pub sbits: ::std::os::raw::c_uint,
    pub sloc: ::std::os::raw::c_uint,
    pub max_sym: ::std::os::raw::c_int,
    pub nsym: ::std::os::raw::c_int,
    pub max_sel: ::std::os::raw::c_int,
    pub qmap: [::std::os::raw::c_uint; 256usize],
    pub qtab: [::std::os::raw::c_uint; 256usize],
    pub ptab: [::std::os::raw::c_uint; 1024usize],
    pub dtab: [::std::os::raw::c_uint; 256usize],
    pub qshift: ::std::os::raw::c_int,
    pub pshift: ::std::os::raw::c_int,
    pub dshift: ::std::os::raw::c_int,
    pub sshift: ::std::os::raw::c_int,
    pub qmask: ::std::os::raw::c_uint,
    pub do_r2: ::std::os::raw::c_int,
    pub do_qa: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fqz_param()
{
    const UNINIT: ::std::mem::MaybeUninit<fqz_param> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fqz_param>(),
        7268usize,
        concat!("Size of: ", stringify!(fqz_param))
    );
    assert_eq!(
        ::std::mem::align_of::<fqz_param>(),
        4usize,
        concat!("Alignment of ", stringify!(fqz_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pflags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(pflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_sel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(do_sel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).do_dedup) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(do_dedup)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).store_qmap) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(store_qmap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fixed_len) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(fixed_len)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).use_qtab) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(use_qtab)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).use_dtab) as usize - ptr as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(use_dtab)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).use_ptab) as usize - ptr as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(use_ptab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qbits) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(qbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qloc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(qloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbits) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(pbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ploc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(ploc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbits) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(dbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dloc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(dloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbits) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(sbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sloc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(sloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sym) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(max_sym)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsym) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(nsym)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sel) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(max_sel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qmap) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(qmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qtab) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(qtab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptab) as usize - ptr as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(ptab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtab) as usize - ptr as usize },
        6216usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(dtab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qshift) as usize - ptr as usize },
        7240usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(qshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pshift) as usize - ptr as usize },
        7244usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(pshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dshift) as usize - ptr as usize },
        7248usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(dshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sshift) as usize - ptr as usize },
        7252usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(sshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qmask) as usize - ptr as usize },
        7256usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(qmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_r2) as usize - ptr as usize },
        7260usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(do_r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_qa) as usize - ptr as usize },
        7264usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_param),
            "::",
            stringify!(do_qa)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fqz_gparams
{
    pub vers: ::std::os::raw::c_int,
    pub gflags: ::std::os::raw::c_uint,
    pub nparam: ::std::os::raw::c_int,
    pub max_sel: ::std::os::raw::c_int,
    pub stab: [::std::os::raw::c_uint; 256usize],
    pub max_sym: ::std::os::raw::c_int,
    pub p: *mut fqz_param,
}
#[test]
fn bindgen_test_layout_fqz_gparams()
{
    const UNINIT: ::std::mem::MaybeUninit<fqz_gparams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fqz_gparams>(),
        1056usize,
        concat!("Size of: ", stringify!(fqz_gparams))
    );
    assert_eq!(
        ::std::mem::align_of::<fqz_gparams>(),
        8usize,
        concat!("Alignment of ", stringify!(fqz_gparams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_gparams),
            "::",
            stringify!(vers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gflags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_gparams),
            "::",
            stringify!(gflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nparam) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_gparams),
            "::",
            stringify!(nparam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sel) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_gparams),
            "::",
            stringify!(max_sel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stab) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_gparams),
            "::",
            stringify!(stab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sym) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_gparams),
            "::",
            stringify!(max_sym)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(fqz_gparams),
            "::",
            stringify!(p)
        )
    );
}
extern "C" {
    #[doc = " Compress a block of quality values.\n\n @param vers          The CRAM version number (<<8) plus fqz strategy (0-3)\n @param s             Length and flag data CRAM per-record\n @param in            Buffer of concatenated quality values (no separator)\n @param in_size       Size of in buffer\n @param out_size      Size of returned output\n @param strat         FQZ compression strategy (0 to FQZ_MAX_STRAT)\n @param gp            Optional fqzcomp paramters (may be NULL).\n\n @return              The compressed quality buffer on success,\n                      NULL on failure."]
    pub fn fqz_compress(
        vers: ::std::os::raw::c_int,
        s: *mut fqz_slice,
        in_: *mut ::std::os::raw::c_char,
        in_size: usize,
        out_size: *mut usize,
        strat: ::std::os::raw::c_int,
        gp: *mut fqz_gparams,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Decompress a block of quality values.\n\n @param in            Buffer of compressed quality values\n @param in_size       Size of in buffer\n @param out_size      Size of returned output\n @param lengths       Optional array filled out with record lengths.\n                      May be NULL.  If not, preallocate it to correct size.\n\n @return              The uncompressed concatenated qualities on success,\n                      NULL on failure."]
    pub fn fqz_decompress(
        in_: *mut ::std::os::raw::c_char,
        in_size: usize,
        out_size: *mut usize,
        lengths: *mut ::std::os::raw::c_int,
        nlengths: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " A utlity function to analyse a quality buffer to gather statistical\n  information.  This is written into qhist and pm.  This function is only\n  useful if you intend on passing your own fqz_gparams block to\n  fqz_compress."]
    pub fn fqz_qual_stats(
        s: *mut fqz_slice,
        in_: *mut ::std::os::raw::c_uchar,
        in_size: usize,
        pm: *mut fqz_param,
        qhist: *mut u32,
        one_param: ::std::os::raw::c_int,
    );
}
