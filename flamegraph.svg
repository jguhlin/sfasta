<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="1951"><g><title>perf-exec (6 samples, 0.31%)</title><rect x="0.0000%" y="549" width="0.3075%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.31%)</title><rect x="0.0000%" y="533" width="0.3075%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="543.50"></text></g><g><title>do_syscall_64 (6 samples, 0.31%)</title><rect x="0.0000%" y="517" width="0.3075%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="527.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.31%)</title><rect x="0.0000%" y="501" width="0.3075%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="511.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.31%)</title><rect x="0.0000%" y="485" width="0.3075%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="495.50"></text></g><g><title>bprm_execve (6 samples, 0.31%)</title><rect x="0.0000%" y="469" width="0.3075%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 0.31%)</title><rect x="0.0000%" y="453" width="0.3075%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="463.50"></text></g><g><title>exec_binprm (6 samples, 0.31%)</title><rect x="0.0000%" y="437" width="0.3075%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="447.50"></text></g><g><title>search_binary_handler (6 samples, 0.31%)</title><rect x="0.0000%" y="421" width="0.3075%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="431.50"></text></g><g><title>load_elf_binary (6 samples, 0.31%)</title><rect x="0.0000%" y="405" width="0.3075%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="415.50"></text></g><g><title>begin_new_exec (6 samples, 0.31%)</title><rect x="0.0000%" y="389" width="0.3075%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="399.50"></text></g><g><title>perf_event_exec (6 samples, 0.31%)</title><rect x="0.0000%" y="373" width="0.3075%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="383.50"></text></g><g><title>ctx_resched (6 samples, 0.31%)</title><rect x="0.0000%" y="357" width="0.3075%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="367.50"></text></g><g><title>[sfa] (42 samples, 2.15%)</title><rect x="0.3075%" y="533" width="2.1527%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="42"/><text x="0.5575%" y="543.50">[..</text></g><g><title>_mi_malloc_generic (1 samples, 0.05%)</title><rect x="2.4603%" y="469" width="0.0513%" height="15" fill="rgb(217,207,13)" fg:x="48" fg:w="1"/><text x="2.7103%" y="479.50"></text></g><g><title>mi_page_fresh_alloc (1 samples, 0.05%)</title><rect x="2.4603%" y="453" width="0.0513%" height="15" fill="rgb(231,73,38)" fg:x="48" fg:w="1"/><text x="2.7103%" y="463.50"></text></g><g><title>_mi_segment_page_start (1 samples, 0.05%)</title><rect x="2.4603%" y="437" width="0.0513%" height="15" fill="rgb(225,20,46)" fg:x="48" fg:w="1"/><text x="2.7103%" y="447.50"></text></g><g><title>_mi_segment_page_free (1 samples, 0.05%)</title><rect x="2.5115%" y="469" width="0.0513%" height="15" fill="rgb(210,31,41)" fg:x="49" fg:w="1"/><text x="2.7615%" y="479.50"></text></g><g><title>ZSTD_decodeLiteralsBlock (1 samples, 0.05%)</title><rect x="2.5628%" y="373" width="0.0513%" height="15" fill="rgb(221,200,47)" fg:x="50" fg:w="1"/><text x="2.8128%" y="383.50"></text></g><g><title>HUF_decompress4X_hufOnly_wksp_bmi2 (1 samples, 0.05%)</title><rect x="2.5628%" y="357" width="0.0513%" height="15" fill="rgb(226,26,5)" fg:x="50" fg:w="1"/><text x="2.8128%" y="367.50"></text></g><g><title>HUF_readDTableX2_wksp_bmi2 (1 samples, 0.05%)</title><rect x="2.5628%" y="341" width="0.0513%" height="15" fill="rgb(249,33,26)" fg:x="50" fg:w="1"/><text x="2.8128%" y="351.50"></text></g><g><title>HUF_readStats_wksp (1 samples, 0.05%)</title><rect x="2.5628%" y="325" width="0.0513%" height="15" fill="rgb(235,183,28)" fg:x="50" fg:w="1"/><text x="2.8128%" y="335.50"></text></g><g><title>FSE_decompress_wksp_body_default (1 samples, 0.05%)</title><rect x="2.5628%" y="309" width="0.0513%" height="15" fill="rgb(221,5,38)" fg:x="50" fg:w="1"/><text x="2.8128%" y="319.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (1 samples, 0.05%)</title><rect x="2.6140%" y="357" width="0.0513%" height="15" fill="rgb(247,18,42)" fg:x="51" fg:w="1"/><text x="2.8640%" y="367.50"></text></g><g><title>ZSTD_decodeSeqHeaders (6 samples, 0.31%)</title><rect x="2.6140%" y="373" width="0.3075%" height="15" fill="rgb(241,131,45)" fg:x="51" fg:w="6"/><text x="2.8640%" y="383.50"></text></g><g><title>ZSTD_buildSeqTable.constprop.0 (5 samples, 0.26%)</title><rect x="2.6653%" y="357" width="0.2563%" height="15" fill="rgb(249,31,29)" fg:x="52" fg:w="5"/><text x="2.9153%" y="367.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (5 samples, 0.26%)</title><rect x="2.6653%" y="341" width="0.2563%" height="15" fill="rgb(225,111,53)" fg:x="52" fg:w="5"/><text x="2.9153%" y="351.50"></text></g><g><title>ZSTD_decompressSequencesSplitLitBuffer_bmi2.constprop.0 (5 samples, 0.26%)</title><rect x="2.9216%" y="373" width="0.2563%" height="15" fill="rgb(238,160,17)" fg:x="57" fg:w="5"/><text x="3.1716%" y="383.50"></text></g><g><title>__count_memcg_events (1 samples, 0.05%)</title><rect x="9.3285%" y="293" width="0.0513%" height="15" fill="rgb(214,148,48)" fg:x="182" fg:w="1"/><text x="9.5785%" y="303.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.05%)</title><rect x="9.3285%" y="277" width="0.0513%" height="15" fill="rgb(232,36,49)" fg:x="182" fg:w="1"/><text x="9.5785%" y="287.50"></text></g><g><title>ZSTD_decompressContinueStream (137 samples, 7.02%)</title><rect x="2.5628%" y="421" width="7.0220%" height="15" fill="rgb(209,103,24)" fg:x="50" fg:w="137"/><text x="2.8128%" y="431.50">ZSTD_deco..</text></g><g><title>ZSTD_decompressContinue (137 samples, 7.02%)</title><rect x="2.5628%" y="405" width="7.0220%" height="15" fill="rgb(229,88,8)" fg:x="50" fg:w="137"/><text x="2.8128%" y="415.50">ZSTD_deco..</text></g><g><title>ZSTD_decompressBlock_internal (137 samples, 7.02%)</title><rect x="2.5628%" y="389" width="7.0220%" height="15" fill="rgb(213,181,19)" fg:x="50" fg:w="137"/><text x="2.8128%" y="399.50">ZSTD_deco..</text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (125 samples, 6.41%)</title><rect x="3.1779%" y="373" width="6.4070%" height="15" fill="rgb(254,191,54)" fg:x="62" fg:w="125"/><text x="3.4279%" y="383.50">ZSTD_dec..</text></g><g><title>asm_exc_page_fault (6 samples, 0.31%)</title><rect x="9.2773%" y="357" width="0.3075%" height="15" fill="rgb(241,83,37)" fg:x="181" fg:w="6"/><text x="9.5273%" y="367.50"></text></g><g><title>exc_page_fault (5 samples, 0.26%)</title><rect x="9.3285%" y="341" width="0.2563%" height="15" fill="rgb(233,36,39)" fg:x="182" fg:w="5"/><text x="9.5785%" y="351.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.26%)</title><rect x="9.3285%" y="325" width="0.2563%" height="15" fill="rgb(226,3,54)" fg:x="182" fg:w="5"/><text x="9.5785%" y="335.50"></text></g><g><title>handle_mm_fault (5 samples, 0.26%)</title><rect x="9.3285%" y="309" width="0.2563%" height="15" fill="rgb(245,192,40)" fg:x="182" fg:w="5"/><text x="9.5785%" y="319.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.21%)</title><rect x="9.3798%" y="293" width="0.2050%" height="15" fill="rgb(238,167,29)" fg:x="183" fg:w="4"/><text x="9.6298%" y="303.50"></text></g><g><title>handle_pte_fault (2 samples, 0.10%)</title><rect x="9.4823%" y="277" width="0.1025%" height="15" fill="rgb(232,182,51)" fg:x="185" fg:w="2"/><text x="9.7323%" y="287.50"></text></g><g><title>do_anonymous_page (2 samples, 0.10%)</title><rect x="9.4823%" y="261" width="0.1025%" height="15" fill="rgb(231,60,39)" fg:x="185" fg:w="2"/><text x="9.7323%" y="271.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.10%)</title><rect x="9.4823%" y="245" width="0.1025%" height="15" fill="rgb(208,69,12)" fg:x="185" fg:w="2"/><text x="9.7323%" y="255.50"></text></g><g><title>__alloc_pages (2 samples, 0.10%)</title><rect x="9.4823%" y="229" width="0.1025%" height="15" fill="rgb(235,93,37)" fg:x="185" fg:w="2"/><text x="9.7323%" y="239.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.10%)</title><rect x="9.4823%" y="213" width="0.1025%" height="15" fill="rgb(213,116,39)" fg:x="185" fg:w="2"/><text x="9.7323%" y="223.50"></text></g><g><title>clear_page_rep (2 samples, 0.10%)</title><rect x="9.4823%" y="197" width="0.1025%" height="15" fill="rgb(222,207,29)" fg:x="185" fg:w="2"/><text x="9.7323%" y="207.50"></text></g><g><title>ZSTD_decompressStream (149 samples, 7.64%)</title><rect x="2.5628%" y="437" width="7.6371%" height="15" fill="rgb(206,96,30)" fg:x="50" fg:w="149"/><text x="2.8128%" y="447.50">ZSTD_decom..</text></g><g><title>__memcpy_avx_unaligned_erms (12 samples, 0.62%)</title><rect x="9.5848%" y="421" width="0.6151%" height="15" fill="rgb(218,138,4)" fg:x="187" fg:w="12"/><text x="9.8348%" y="431.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (151 samples, 7.74%)</title><rect x="2.5628%" y="453" width="7.7396%" height="15" fill="rgb(250,191,14)" fg:x="50" fg:w="151"/><text x="2.8128%" y="463.50">&lt;zstd::stre..</text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.10%)</title><rect x="10.1999%" y="437" width="0.1025%" height="15" fill="rgb(239,60,40)" fg:x="199" fg:w="2"/><text x="10.4499%" y="447.50"></text></g><g><title>__memset_avx2_unaligned_erms (40 samples, 2.05%)</title><rect x="10.3024%" y="453" width="2.0502%" height="15" fill="rgb(206,27,48)" fg:x="201" fg:w="40"/><text x="10.5524%" y="463.50">_..</text></g><g><title>[unknown] (232 samples, 11.89%)</title><rect x="2.4603%" y="533" width="11.8913%" height="15" fill="rgb(225,35,8)" fg:x="48" fg:w="232"/><text x="2.7103%" y="543.50">[unknown]</text></g><g><title>sfa::main (232 samples, 11.89%)</title><rect x="2.4603%" y="517" width="11.8913%" height="15" fill="rgb(250,213,24)" fg:x="48" fg:w="232"/><text x="2.7103%" y="527.50">sfa::main</text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_sequence (232 samples, 11.89%)</title><rect x="2.4603%" y="501" width="11.8913%" height="15" fill="rgb(247,123,22)" fg:x="48" fg:w="232"/><text x="2.7103%" y="511.50">libsfasta::formats..</text></g><g><title>libsfasta::data_types::sequence_block::SequenceBlockCompressed::decompress (232 samples, 11.89%)</title><rect x="2.4603%" y="485" width="11.8913%" height="15" fill="rgb(231,138,38)" fg:x="48" fg:w="232"/><text x="2.7103%" y="495.50">libsfasta::data_ty..</text></g><g><title>std::io::Read::read_to_end (230 samples, 11.79%)</title><rect x="2.5628%" y="469" width="11.7888%" height="15" fill="rgb(231,145,46)" fg:x="50" fg:w="230"/><text x="2.8128%" y="479.50">std::io::Read::re..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 2.00%)</title><rect x="12.3526%" y="453" width="1.9990%" height="15" fill="rgb(251,118,11)" fg:x="241" fg:w="39"/><text x="12.6026%" y="463.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (39 samples, 2.00%)</title><rect x="12.3526%" y="437" width="1.9990%" height="15" fill="rgb(217,147,25)" fg:x="241" fg:w="39"/><text x="12.6026%" y="447.50">a..</text></g><g><title>_mi_heap_realloc_zero (39 samples, 2.00%)</title><rect x="12.3526%" y="421" width="1.9990%" height="15" fill="rgb(247,81,37)" fg:x="241" fg:w="39"/><text x="12.6026%" y="431.50">_..</text></g><g><title>__memcpy_avx_unaligned_erms (39 samples, 2.00%)</title><rect x="12.3526%" y="405" width="1.9990%" height="15" fill="rgb(209,12,38)" fg:x="241" fg:w="39"/><text x="12.6026%" y="415.50">_..</text></g><g><title>__GI_exit (4 samples, 0.21%)</title><rect x="14.3516%" y="485" width="0.2050%" height="15" fill="rgb(227,1,9)" fg:x="280" fg:w="4"/><text x="14.6016%" y="495.50"></text></g><g><title>__run_exit_handlers (4 samples, 0.21%)</title><rect x="14.3516%" y="469" width="0.2050%" height="15" fill="rgb(248,47,43)" fg:x="280" fg:w="4"/><text x="14.6016%" y="479.50"></text></g><g><title>mi_process_done (4 samples, 0.21%)</title><rect x="14.3516%" y="453" width="0.2050%" height="15" fill="rgb(221,10,30)" fg:x="280" fg:w="4"/><text x="14.6016%" y="463.50"></text></g><g><title>mi_heap_collect_ex (4 samples, 0.21%)</title><rect x="14.3516%" y="437" width="0.2050%" height="15" fill="rgb(210,229,1)" fg:x="280" fg:w="4"/><text x="14.6016%" y="447.50"></text></g><g><title>mi_segment_cache_purge (4 samples, 0.21%)</title><rect x="14.3516%" y="421" width="0.2050%" height="15" fill="rgb(222,148,37)" fg:x="280" fg:w="4"/><text x="14.6016%" y="431.50"></text></g><g><title>mi_commit_mask_decommit.constprop.0 (4 samples, 0.21%)</title><rect x="14.3516%" y="405" width="0.2050%" height="15" fill="rgb(234,67,33)" fg:x="280" fg:w="4"/><text x="14.6016%" y="415.50"></text></g><g><title>_mi_os_decommit (4 samples, 0.21%)</title><rect x="14.3516%" y="389" width="0.2050%" height="15" fill="rgb(247,98,35)" fg:x="280" fg:w="4"/><text x="14.6016%" y="399.50"></text></g><g><title>__GI_madvise (4 samples, 0.21%)</title><rect x="14.3516%" y="373" width="0.2050%" height="15" fill="rgb(247,138,52)" fg:x="280" fg:w="4"/><text x="14.6016%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.21%)</title><rect x="14.3516%" y="357" width="0.2050%" height="15" fill="rgb(213,79,30)" fg:x="280" fg:w="4"/><text x="14.6016%" y="367.50"></text></g><g><title>do_syscall_64 (4 samples, 0.21%)</title><rect x="14.3516%" y="341" width="0.2050%" height="15" fill="rgb(246,177,23)" fg:x="280" fg:w="4"/><text x="14.6016%" y="351.50"></text></g><g><title>__x64_sys_madvise (4 samples, 0.21%)</title><rect x="14.3516%" y="325" width="0.2050%" height="15" fill="rgb(230,62,27)" fg:x="280" fg:w="4"/><text x="14.6016%" y="335.50"></text></g><g><title>do_madvise.part.0 (4 samples, 0.21%)</title><rect x="14.3516%" y="309" width="0.2050%" height="15" fill="rgb(216,154,8)" fg:x="280" fg:w="4"/><text x="14.6016%" y="319.50"></text></g><g><title>zap_page_range (4 samples, 0.21%)</title><rect x="14.3516%" y="293" width="0.2050%" height="15" fill="rgb(244,35,45)" fg:x="280" fg:w="4"/><text x="14.6016%" y="303.50"></text></g><g><title>unmap_single_vma (4 samples, 0.21%)</title><rect x="14.3516%" y="277" width="0.2050%" height="15" fill="rgb(251,115,12)" fg:x="280" fg:w="4"/><text x="14.6016%" y="287.50"></text></g><g><title>unmap_page_range (4 samples, 0.21%)</title><rect x="14.3516%" y="261" width="0.2050%" height="15" fill="rgb(240,54,50)" fg:x="280" fg:w="4"/><text x="14.6016%" y="271.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.21%)</title><rect x="14.3516%" y="245" width="0.2050%" height="15" fill="rgb(233,84,52)" fg:x="280" fg:w="4"/><text x="14.6016%" y="255.50"></text></g><g><title>zap_pte_range (4 samples, 0.21%)</title><rect x="14.3516%" y="229" width="0.2050%" height="15" fill="rgb(207,117,47)" fg:x="280" fg:w="4"/><text x="14.6016%" y="239.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.10%)</title><rect x="14.4541%" y="213" width="0.1025%" height="15" fill="rgb(249,43,39)" fg:x="282" fg:w="2"/><text x="14.7041%" y="223.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.10%)</title><rect x="14.4541%" y="197" width="0.1025%" height="15" fill="rgb(209,38,44)" fg:x="282" fg:w="2"/><text x="14.7041%" y="207.50"></text></g><g><title>release_pages (2 samples, 0.10%)</title><rect x="14.4541%" y="181" width="0.1025%" height="15" fill="rgb(236,212,23)" fg:x="282" fg:w="2"/><text x="14.7041%" y="191.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="14.5054%" y="165" width="0.0513%" height="15" fill="rgb(242,79,21)" fg:x="283" fg:w="1"/><text x="14.7554%" y="175.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="14.5054%" y="149" width="0.0513%" height="15" fill="rgb(211,96,35)" fg:x="283" fg:w="1"/><text x="14.7554%" y="159.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="14.5054%" y="133" width="0.0513%" height="15" fill="rgb(253,215,40)" fg:x="283" fg:w="1"/><text x="14.7554%" y="143.50"></text></g><g><title>__free_one_page (1 samples, 0.05%)</title><rect x="14.5054%" y="117" width="0.0513%" height="15" fill="rgb(211,81,21)" fg:x="283" fg:w="1"/><text x="14.7554%" y="127.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.05%)</title><rect x="14.8642%" y="309" width="0.0513%" height="15" fill="rgb(208,190,38)" fg:x="290" fg:w="1"/><text x="15.1142%" y="319.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="14.8642%" y="293" width="0.0513%" height="15" fill="rgb(235,213,38)" fg:x="290" fg:w="1"/><text x="15.1142%" y="303.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="14.8642%" y="277" width="0.0513%" height="15" fill="rgb(237,122,38)" fg:x="290" fg:w="1"/><text x="15.1142%" y="287.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="14.8642%" y="261" width="0.0513%" height="15" fill="rgb(244,218,35)" fg:x="290" fg:w="1"/><text x="15.1142%" y="271.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="14.8642%" y="245" width="0.0513%" height="15" fill="rgb(240,68,47)" fg:x="290" fg:w="1"/><text x="15.1142%" y="255.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="14.8642%" y="229" width="0.0513%" height="15" fill="rgb(210,16,53)" fg:x="290" fg:w="1"/><text x="15.1142%" y="239.50"></text></g><g><title>__free_one_page (1 samples, 0.05%)</title><rect x="14.8642%" y="213" width="0.0513%" height="15" fill="rgb(235,124,12)" fg:x="290" fg:w="1"/><text x="15.1142%" y="223.50"></text></g><g><title>_mi_os_free_ex (4 samples, 0.21%)</title><rect x="14.8642%" y="437" width="0.2050%" height="15" fill="rgb(224,169,11)" fg:x="290" fg:w="4"/><text x="15.1142%" y="447.50"></text></g><g><title>__GI___munmap (4 samples, 0.21%)</title><rect x="14.8642%" y="421" width="0.2050%" height="15" fill="rgb(250,166,2)" fg:x="290" fg:w="4"/><text x="15.1142%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.21%)</title><rect x="14.8642%" y="405" width="0.2050%" height="15" fill="rgb(242,216,29)" fg:x="290" fg:w="4"/><text x="15.1142%" y="415.50"></text></g><g><title>do_syscall_64 (4 samples, 0.21%)</title><rect x="14.8642%" y="389" width="0.2050%" height="15" fill="rgb(230,116,27)" fg:x="290" fg:w="4"/><text x="15.1142%" y="399.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.21%)</title><rect x="14.8642%" y="373" width="0.2050%" height="15" fill="rgb(228,99,48)" fg:x="290" fg:w="4"/><text x="15.1142%" y="383.50"></text></g><g><title>__vm_munmap (4 samples, 0.21%)</title><rect x="14.8642%" y="357" width="0.2050%" height="15" fill="rgb(253,11,6)" fg:x="290" fg:w="4"/><text x="15.1142%" y="367.50"></text></g><g><title>__do_munmap (4 samples, 0.21%)</title><rect x="14.8642%" y="341" width="0.2050%" height="15" fill="rgb(247,143,39)" fg:x="290" fg:w="4"/><text x="15.1142%" y="351.50"></text></g><g><title>unmap_region (4 samples, 0.21%)</title><rect x="14.8642%" y="325" width="0.2050%" height="15" fill="rgb(236,97,10)" fg:x="290" fg:w="4"/><text x="15.1142%" y="335.50"></text></g><g><title>unmap_vmas (3 samples, 0.15%)</title><rect x="14.9154%" y="309" width="0.1538%" height="15" fill="rgb(233,208,19)" fg:x="291" fg:w="3"/><text x="15.1654%" y="319.50"></text></g><g><title>unmap_single_vma (3 samples, 0.15%)</title><rect x="14.9154%" y="293" width="0.1538%" height="15" fill="rgb(216,164,2)" fg:x="291" fg:w="3"/><text x="15.1654%" y="303.50"></text></g><g><title>unmap_page_range (3 samples, 0.15%)</title><rect x="14.9154%" y="277" width="0.1538%" height="15" fill="rgb(220,129,5)" fg:x="291" fg:w="3"/><text x="15.1654%" y="287.50"></text></g><g><title>zap_pmd_range.isra.0 (3 samples, 0.15%)</title><rect x="14.9154%" y="261" width="0.1538%" height="15" fill="rgb(242,17,10)" fg:x="291" fg:w="3"/><text x="15.1654%" y="271.50"></text></g><g><title>zap_pte_range (3 samples, 0.15%)</title><rect x="14.9154%" y="245" width="0.1538%" height="15" fill="rgb(242,107,0)" fg:x="291" fg:w="3"/><text x="15.1654%" y="255.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.10%)</title><rect x="14.9667%" y="229" width="0.1025%" height="15" fill="rgb(251,28,31)" fg:x="292" fg:w="2"/><text x="15.2167%" y="239.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.10%)</title><rect x="14.9667%" y="213" width="0.1025%" height="15" fill="rgb(233,223,10)" fg:x="292" fg:w="2"/><text x="15.2167%" y="223.50"></text></g><g><title>release_pages (2 samples, 0.10%)</title><rect x="14.9667%" y="197" width="0.1025%" height="15" fill="rgb(215,21,27)" fg:x="292" fg:w="2"/><text x="15.2167%" y="207.50"></text></g><g><title>free_unref_page_list (2 samples, 0.10%)</title><rect x="14.9667%" y="181" width="0.1025%" height="15" fill="rgb(232,23,21)" fg:x="292" fg:w="2"/><text x="15.2167%" y="191.50"></text></g><g><title>free_unref_page_commit (2 samples, 0.10%)</title><rect x="14.9667%" y="165" width="0.1025%" height="15" fill="rgb(244,5,23)" fg:x="292" fg:w="2"/><text x="15.2167%" y="175.50"></text></g><g><title>free_pcppages_bulk (2 samples, 0.10%)</title><rect x="14.9667%" y="149" width="0.1025%" height="15" fill="rgb(226,81,46)" fg:x="292" fg:w="2"/><text x="15.2167%" y="159.50"></text></g><g><title>__free_one_page (2 samples, 0.10%)</title><rect x="14.9667%" y="133" width="0.1025%" height="15" fill="rgb(247,70,30)" fg:x="292" fg:w="2"/><text x="15.2167%" y="143.50"></text></g><g><title>_mi_page_free (5 samples, 0.26%)</title><rect x="15.0692%" y="437" width="0.2563%" height="15" fill="rgb(212,68,19)" fg:x="294" fg:w="5"/><text x="15.3192%" y="447.50"></text></g><g><title>_mi_page_retire (1 samples, 0.05%)</title><rect x="15.3255%" y="437" width="0.0513%" height="15" fill="rgb(240,187,13)" fg:x="299" fg:w="1"/><text x="15.5755%" y="447.50"></text></g><g><title>_mi_stat_decrease (5 samples, 0.26%)</title><rect x="15.6843%" y="421" width="0.2563%" height="15" fill="rgb(223,113,26)" fg:x="306" fg:w="5"/><text x="15.9343%" y="431.50"></text></g><g><title>mi_option_is_enabled (6 samples, 0.31%)</title><rect x="15.9405%" y="421" width="0.3075%" height="15" fill="rgb(206,192,2)" fg:x="311" fg:w="6"/><text x="16.1905%" y="431.50"></text></g><g><title>mi_option_get (6 samples, 0.31%)</title><rect x="15.9405%" y="405" width="0.3075%" height="15" fill="rgb(241,108,4)" fg:x="311" fg:w="6"/><text x="16.1905%" y="415.50"></text></g><g><title>_mi_clock_now (10 samples, 0.51%)</title><rect x="17.4782%" y="389" width="0.5126%" height="15" fill="rgb(247,173,49)" fg:x="341" fg:w="10"/><text x="17.7282%" y="399.50"></text></g><g><title>__clock_gettime_2 (8 samples, 0.41%)</title><rect x="17.5807%" y="373" width="0.4100%" height="15" fill="rgb(224,114,35)" fg:x="343" fg:w="8"/><text x="17.8307%" y="383.50"></text></g><g><title>[[vdso]] (8 samples, 0.41%)</title><rect x="17.5807%" y="357" width="0.4100%" height="15" fill="rgb(245,159,27)" fg:x="343" fg:w="8"/><text x="17.8307%" y="367.50"></text></g><g><title>[[vdso]] (7 samples, 0.36%)</title><rect x="17.6320%" y="341" width="0.3588%" height="15" fill="rgb(245,172,44)" fg:x="344" fg:w="7"/><text x="17.8820%" y="351.50"></text></g><g><title>mi_option_get (1 samples, 0.05%)</title><rect x="17.9908%" y="389" width="0.0513%" height="15" fill="rgb(236,23,11)" fg:x="351" fg:w="1"/><text x="18.2408%" y="399.50"></text></g><g><title>mi_segment_perhaps_decommit (44 samples, 2.26%)</title><rect x="16.5556%" y="405" width="2.2553%" height="15" fill="rgb(205,117,38)" fg:x="323" fg:w="44"/><text x="16.8056%" y="415.50">m..</text></g><g><title>mi_segment_commit_mask.part.0 (15 samples, 0.77%)</title><rect x="18.0420%" y="389" width="0.7688%" height="15" fill="rgb(237,72,25)" fg:x="352" fg:w="15"/><text x="18.2920%" y="399.50"></text></g><g><title>_mi_segment_page_free (71 samples, 3.64%)</title><rect x="15.3767%" y="437" width="3.6392%" height="15" fill="rgb(244,70,9)" fg:x="300" fg:w="71"/><text x="15.6267%" y="447.50">_mi_..</text></g><g><title>mi_segment_span_free_coalesce (54 samples, 2.77%)</title><rect x="16.2481%" y="421" width="2.7678%" height="15" fill="rgb(217,125,39)" fg:x="317" fg:w="54"/><text x="16.4981%" y="431.50">mi..</text></g><g><title>mi_segment_span_remove_from_queue (4 samples, 0.21%)</title><rect x="18.8109%" y="405" width="0.2050%" height="15" fill="rgb(235,36,10)" fg:x="367" fg:w="4"/><text x="19.0609%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;libsfasta::data_types::seq_loc::SeqLoc&gt; (5 samples, 0.26%)</title><rect x="19.0159%" y="437" width="0.2563%" height="15" fill="rgb(251,123,47)" fg:x="371" fg:w="5"/><text x="19.2659%" y="447.50"></text></g><g><title>mi_free (3 samples, 0.15%)</title><rect x="19.1184%" y="421" width="0.1538%" height="15" fill="rgb(221,13,13)" fg:x="373" fg:w="3"/><text x="19.3684%" y="431.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.05%)</title><rect x="19.2722%" y="293" width="0.0513%" height="15" fill="rgb(238,131,9)" fg:x="376" fg:w="1"/><text x="19.5222%" y="303.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="19.2722%" y="277" width="0.0513%" height="15" fill="rgb(211,50,8)" fg:x="376" fg:w="1"/><text x="19.5222%" y="287.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="19.2722%" y="261" width="0.0513%" height="15" fill="rgb(245,182,24)" fg:x="376" fg:w="1"/><text x="19.5222%" y="271.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="19.2722%" y="245" width="0.0513%" height="15" fill="rgb(242,14,37)" fg:x="376" fg:w="1"/><text x="19.5222%" y="255.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="19.2722%" y="229" width="0.0513%" height="15" fill="rgb(246,228,12)" fg:x="376" fg:w="1"/><text x="19.5222%" y="239.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="19.2722%" y="213" width="0.0513%" height="15" fill="rgb(213,55,15)" fg:x="376" fg:w="1"/><text x="19.5222%" y="223.50"></text></g><g><title>__free_one_page (1 samples, 0.05%)</title><rect x="19.2722%" y="197" width="0.0513%" height="15" fill="rgb(209,9,3)" fg:x="376" fg:w="1"/><text x="19.5222%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;libsfasta::formats::sfasta::Sfasta&gt; (4 samples, 0.21%)</title><rect x="19.2722%" y="437" width="0.2050%" height="15" fill="rgb(230,59,30)" fg:x="376" fg:w="4"/><text x="19.5222%" y="447.50"></text></g><g><title>_mi_os_free_ex (4 samples, 0.21%)</title><rect x="19.2722%" y="421" width="0.2050%" height="15" fill="rgb(209,121,21)" fg:x="376" fg:w="4"/><text x="19.5222%" y="431.50"></text></g><g><title>__GI___munmap (4 samples, 0.21%)</title><rect x="19.2722%" y="405" width="0.2050%" height="15" fill="rgb(220,109,13)" fg:x="376" fg:w="4"/><text x="19.5222%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.21%)</title><rect x="19.2722%" y="389" width="0.2050%" height="15" fill="rgb(232,18,1)" fg:x="376" fg:w="4"/><text x="19.5222%" y="399.50"></text></g><g><title>do_syscall_64 (4 samples, 0.21%)</title><rect x="19.2722%" y="373" width="0.2050%" height="15" fill="rgb(215,41,42)" fg:x="376" fg:w="4"/><text x="19.5222%" y="383.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.21%)</title><rect x="19.2722%" y="357" width="0.2050%" height="15" fill="rgb(224,123,36)" fg:x="376" fg:w="4"/><text x="19.5222%" y="367.50"></text></g><g><title>__vm_munmap (4 samples, 0.21%)</title><rect x="19.2722%" y="341" width="0.2050%" height="15" fill="rgb(240,125,3)" fg:x="376" fg:w="4"/><text x="19.5222%" y="351.50"></text></g><g><title>__do_munmap (4 samples, 0.21%)</title><rect x="19.2722%" y="325" width="0.2050%" height="15" fill="rgb(205,98,50)" fg:x="376" fg:w="4"/><text x="19.5222%" y="335.50"></text></g><g><title>unmap_region (4 samples, 0.21%)</title><rect x="19.2722%" y="309" width="0.2050%" height="15" fill="rgb(205,185,37)" fg:x="376" fg:w="4"/><text x="19.5222%" y="319.50"></text></g><g><title>unmap_vmas (3 samples, 0.15%)</title><rect x="19.3234%" y="293" width="0.1538%" height="15" fill="rgb(238,207,15)" fg:x="377" fg:w="3"/><text x="19.5734%" y="303.50"></text></g><g><title>unmap_single_vma (3 samples, 0.15%)</title><rect x="19.3234%" y="277" width="0.1538%" height="15" fill="rgb(213,199,42)" fg:x="377" fg:w="3"/><text x="19.5734%" y="287.50"></text></g><g><title>unmap_page_range (3 samples, 0.15%)</title><rect x="19.3234%" y="261" width="0.1538%" height="15" fill="rgb(235,201,11)" fg:x="377" fg:w="3"/><text x="19.5734%" y="271.50"></text></g><g><title>zap_pmd_range.isra.0 (3 samples, 0.15%)</title><rect x="19.3234%" y="245" width="0.1538%" height="15" fill="rgb(207,46,11)" fg:x="377" fg:w="3"/><text x="19.5734%" y="255.50"></text></g><g><title>zap_pte_range (3 samples, 0.15%)</title><rect x="19.3234%" y="229" width="0.1538%" height="15" fill="rgb(241,35,35)" fg:x="377" fg:w="3"/><text x="19.5734%" y="239.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.05%)</title><rect x="19.4259%" y="213" width="0.0513%" height="15" fill="rgb(243,32,47)" fg:x="379" fg:w="1"/><text x="19.6759%" y="223.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="19.4259%" y="197" width="0.0513%" height="15" fill="rgb(247,202,23)" fg:x="379" fg:w="1"/><text x="19.6759%" y="207.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="19.4259%" y="181" width="0.0513%" height="15" fill="rgb(219,102,11)" fg:x="379" fg:w="1"/><text x="19.6759%" y="191.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="19.4259%" y="165" width="0.0513%" height="15" fill="rgb(243,110,44)" fg:x="379" fg:w="1"/><text x="19.6759%" y="175.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="19.4259%" y="149" width="0.0513%" height="15" fill="rgb(222,74,54)" fg:x="379" fg:w="1"/><text x="19.6759%" y="159.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="19.4259%" y="133" width="0.0513%" height="15" fill="rgb(216,99,12)" fg:x="379" fg:w="1"/><text x="19.6759%" y="143.50"></text></g><g><title>__free_one_page (1 samples, 0.05%)</title><rect x="19.4259%" y="117" width="0.0513%" height="15" fill="rgb(226,22,26)" fg:x="379" fg:w="1"/><text x="19.6759%" y="127.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="19.8872%" y="421" width="0.0513%" height="15" fill="rgb(217,163,10)" fg:x="388" fg:w="1"/><text x="20.1372%" y="431.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.05%)</title><rect x="19.9385%" y="421" width="0.0513%" height="15" fill="rgb(213,25,53)" fg:x="389" fg:w="1"/><text x="20.1885%" y="431.50"></text></g><g><title>_mi_heap_delayed_free (1 samples, 0.05%)</title><rect x="19.9385%" y="405" width="0.0513%" height="15" fill="rgb(252,105,26)" fg:x="389" fg:w="1"/><text x="20.1885%" y="415.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_header (21 samples, 1.08%)</title><rect x="19.4772%" y="437" width="1.0764%" height="15" fill="rgb(220,39,43)" fg:x="380" fg:w="21"/><text x="19.7272%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (11 samples, 0.56%)</title><rect x="19.9897%" y="421" width="0.5638%" height="15" fill="rgb(229,68,48)" fg:x="390" fg:w="11"/><text x="20.2397%" y="431.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.36%)</title><rect x="20.1948%" y="405" width="0.3588%" height="15" fill="rgb(252,8,32)" fg:x="394" fg:w="7"/><text x="20.4448%" y="415.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.05%)</title><rect x="20.7586%" y="421" width="0.0513%" height="15" fill="rgb(223,20,43)" fg:x="405" fg:w="1"/><text x="21.0086%" y="431.50"></text></g><g><title>_mi_heap_delayed_free (1 samples, 0.05%)</title><rect x="20.7586%" y="405" width="0.0513%" height="15" fill="rgb(229,81,49)" fg:x="405" fg:w="1"/><text x="21.0086%" y="415.50"></text></g><g><title>core::str::converts::from_utf8 (9 samples, 0.46%)</title><rect x="20.8098%" y="421" width="0.4613%" height="15" fill="rgb(236,28,36)" fg:x="406" fg:w="9"/><text x="21.0598%" y="431.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.36%)</title><rect x="20.9124%" y="405" width="0.3588%" height="15" fill="rgb(249,185,26)" fg:x="408" fg:w="7"/><text x="21.1624%" y="415.50"></text></g><g><title>core::str::validations::contains_nonascii (1 samples, 0.05%)</title><rect x="21.2199%" y="389" width="0.0513%" height="15" fill="rgb(249,174,33)" fg:x="414" fg:w="1"/><text x="21.4699%" y="399.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_id (16 samples, 0.82%)</title><rect x="20.5536%" y="437" width="0.8201%" height="15" fill="rgb(233,201,37)" fg:x="401" fg:w="16"/><text x="20.8036%" y="447.50"></text></g><g><title>mi_malloc (2 samples, 0.10%)</title><rect x="21.2711%" y="421" width="0.1025%" height="15" fill="rgb(221,78,26)" fg:x="415" fg:w="2"/><text x="21.5211%" y="431.50"></text></g><g><title>copy_user_generic_string (6 samples, 0.31%)</title><rect x="33.6238%" y="229" width="0.3075%" height="15" fill="rgb(250,127,30)" fg:x="656" fg:w="6"/><text x="33.8738%" y="239.50"></text></g><g><title>__x64_sys_read (7 samples, 0.36%)</title><rect x="33.6238%" y="341" width="0.3588%" height="15" fill="rgb(230,49,44)" fg:x="656" fg:w="7"/><text x="33.8738%" y="351.50"></text></g><g><title>ksys_read (7 samples, 0.36%)</title><rect x="33.6238%" y="325" width="0.3588%" height="15" fill="rgb(229,67,23)" fg:x="656" fg:w="7"/><text x="33.8738%" y="335.50"></text></g><g><title>vfs_read (7 samples, 0.36%)</title><rect x="33.6238%" y="309" width="0.3588%" height="15" fill="rgb(249,83,47)" fg:x="656" fg:w="7"/><text x="33.8738%" y="319.50"></text></g><g><title>new_sync_read (7 samples, 0.36%)</title><rect x="33.6238%" y="293" width="0.3588%" height="15" fill="rgb(215,43,3)" fg:x="656" fg:w="7"/><text x="33.8738%" y="303.50"></text></g><g><title>ext4_file_read_iter (7 samples, 0.36%)</title><rect x="33.6238%" y="277" width="0.3588%" height="15" fill="rgb(238,154,13)" fg:x="656" fg:w="7"/><text x="33.8738%" y="287.50"></text></g><g><title>generic_file_read_iter (7 samples, 0.36%)</title><rect x="33.6238%" y="261" width="0.3588%" height="15" fill="rgb(219,56,2)" fg:x="656" fg:w="7"/><text x="33.8738%" y="271.50"></text></g><g><title>filemap_read (7 samples, 0.36%)</title><rect x="33.6238%" y="245" width="0.3588%" height="15" fill="rgb(233,0,4)" fg:x="656" fg:w="7"/><text x="33.8738%" y="255.50"></text></g><g><title>filemap_get_pages (1 samples, 0.05%)</title><rect x="33.9313%" y="229" width="0.0513%" height="15" fill="rgb(235,30,7)" fg:x="662" fg:w="1"/><text x="34.1813%" y="239.50"></text></g><g><title>filemap_get_read_batch (1 samples, 0.05%)</title><rect x="33.9313%" y="213" width="0.0513%" height="15" fill="rgb(250,79,13)" fg:x="662" fg:w="1"/><text x="34.1813%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.41%)</title><rect x="33.6238%" y="405" width="0.4100%" height="15" fill="rgb(211,146,34)" fg:x="656" fg:w="8"/><text x="33.8738%" y="415.50"></text></g><g><title>__libc_read (8 samples, 0.41%)</title><rect x="33.6238%" y="389" width="0.4100%" height="15" fill="rgb(228,22,38)" fg:x="656" fg:w="8"/><text x="33.8738%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.41%)</title><rect x="33.6238%" y="373" width="0.4100%" height="15" fill="rgb(235,168,5)" fg:x="656" fg:w="8"/><text x="33.8738%" y="383.50"></text></g><g><title>do_syscall_64 (8 samples, 0.41%)</title><rect x="33.6238%" y="357" width="0.4100%" height="15" fill="rgb(221,155,16)" fg:x="656" fg:w="8"/><text x="33.8738%" y="367.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.05%)</title><rect x="33.9826%" y="341" width="0.0513%" height="15" fill="rgb(215,215,53)" fg:x="663" fg:w="1"/><text x="34.2326%" y="351.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.05%)</title><rect x="33.9826%" y="325" width="0.0513%" height="15" fill="rgb(223,4,10)" fg:x="663" fg:w="1"/><text x="34.2326%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.97%)</title><rect x="34.0338%" y="405" width="0.9739%" height="15" fill="rgb(234,103,6)" fg:x="664" fg:w="19"/><text x="34.2838%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (218 samples, 11.17%)</title><rect x="26.1404%" y="421" width="11.1738%" height="15" fill="rgb(227,97,0)" fg:x="510" fg:w="218"/><text x="26.3904%" y="431.50">&lt;std::io::buffer..</text></g><g><title>__memmove_avx_unaligned (45 samples, 2.31%)</title><rect x="35.0077%" y="405" width="2.3065%" height="15" fill="rgb(234,150,53)" fg:x="683" fg:w="45"/><text x="35.2577%" y="415.50">_..</text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.31%)</title><rect x="37.3142%" y="421" width="0.3075%" height="15" fill="rgb(228,201,54)" fg:x="728" fg:w="6"/><text x="37.5642%" y="431.50"></text></g><g><title>_mi_bin (1 samples, 0.05%)</title><rect x="37.9293%" y="405" width="0.0513%" height="15" fill="rgb(222,22,37)" fg:x="740" fg:w="1"/><text x="38.1793%" y="415.50"></text></g><g><title>_mi_heap_delayed_free (1 samples, 0.05%)</title><rect x="37.9805%" y="405" width="0.0513%" height="15" fill="rgb(237,53,32)" fg:x="741" fg:w="1"/><text x="38.2305%" y="415.50"></text></g><g><title>_mi_os_good_alloc_size (6 samples, 0.31%)</title><rect x="38.0318%" y="405" width="0.3075%" height="15" fill="rgb(233,25,53)" fg:x="742" fg:w="6"/><text x="38.2818%" y="415.50"></text></g><g><title>_mi_segment_page_alloc (1 samples, 0.05%)</title><rect x="38.5443%" y="389" width="0.0513%" height="15" fill="rgb(210,40,34)" fg:x="752" fg:w="1"/><text x="38.7943%" y="399.50"></text></g><g><title>_mi_clock_now (23 samples, 1.18%)</title><rect x="38.5956%" y="373" width="1.1789%" height="15" fill="rgb(241,220,44)" fg:x="753" fg:w="23"/><text x="38.8456%" y="383.50"></text></g><g><title>__clock_gettime_2 (21 samples, 1.08%)</title><rect x="38.6981%" y="357" width="1.0764%" height="15" fill="rgb(235,28,35)" fg:x="755" fg:w="21"/><text x="38.9481%" y="367.50"></text></g><g><title>[[vdso]] (21 samples, 1.08%)</title><rect x="38.6981%" y="341" width="1.0764%" height="15" fill="rgb(210,56,17)" fg:x="755" fg:w="21"/><text x="38.9481%" y="351.50"></text></g><g><title>[[vdso]] (18 samples, 0.92%)</title><rect x="38.8519%" y="325" width="0.9226%" height="15" fill="rgb(224,130,29)" fg:x="758" fg:w="18"/><text x="39.1019%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="41.0559%" y="341" width="0.0513%" height="15" fill="rgb(235,212,8)" fg:x="801" fg:w="1"/><text x="41.3059%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="41.0559%" y="325" width="0.0513%" height="15" fill="rgb(223,33,50)" fg:x="801" fg:w="1"/><text x="41.3059%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="41.0559%" y="309" width="0.0513%" height="15" fill="rgb(219,149,13)" fg:x="801" fg:w="1"/><text x="41.3059%" y="319.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.05%)</title><rect x="41.0559%" y="293" width="0.0513%" height="15" fill="rgb(250,156,29)" fg:x="801" fg:w="1"/><text x="41.3059%" y="303.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.05%)</title><rect x="41.0559%" y="277" width="0.0513%" height="15" fill="rgb(216,193,19)" fg:x="801" fg:w="1"/><text x="41.3059%" y="287.50"></text></g><g><title>tick_sched_timer (1 samples, 0.05%)</title><rect x="41.0559%" y="261" width="0.0513%" height="15" fill="rgb(216,135,14)" fg:x="801" fg:w="1"/><text x="41.3059%" y="271.50"></text></g><g><title>tick_sched_handle (1 samples, 0.05%)</title><rect x="41.0559%" y="245" width="0.0513%" height="15" fill="rgb(241,47,5)" fg:x="801" fg:w="1"/><text x="41.3059%" y="255.50"></text></g><g><title>update_process_times (1 samples, 0.05%)</title><rect x="41.0559%" y="229" width="0.0513%" height="15" fill="rgb(233,42,35)" fg:x="801" fg:w="1"/><text x="41.3059%" y="239.50"></text></g><g><title>account_process_tick (1 samples, 0.05%)</title><rect x="41.0559%" y="213" width="0.0513%" height="15" fill="rgb(231,13,6)" fg:x="801" fg:w="1"/><text x="41.3059%" y="223.50"></text></g><g><title>account_user_time (1 samples, 0.05%)</title><rect x="41.0559%" y="197" width="0.0513%" height="15" fill="rgb(207,181,40)" fg:x="801" fg:w="1"/><text x="41.3059%" y="207.50"></text></g><g><title>_mi_clock_now (13 samples, 0.67%)</title><rect x="41.8247%" y="325" width="0.6663%" height="15" fill="rgb(254,173,49)" fg:x="816" fg:w="13"/><text x="42.0747%" y="335.50"></text></g><g><title>__clock_gettime_2 (12 samples, 0.62%)</title><rect x="41.8760%" y="309" width="0.6151%" height="15" fill="rgb(221,1,38)" fg:x="817" fg:w="12"/><text x="42.1260%" y="319.50"></text></g><g><title>[[vdso]] (11 samples, 0.56%)</title><rect x="41.9272%" y="293" width="0.5638%" height="15" fill="rgb(206,124,46)" fg:x="818" fg:w="11"/><text x="42.1772%" y="303.50"></text></g><g><title>[[vdso]] (8 samples, 0.41%)</title><rect x="42.0810%" y="277" width="0.4100%" height="15" fill="rgb(249,21,11)" fg:x="821" fg:w="8"/><text x="42.3310%" y="287.50"></text></g><g><title>mi_option_get (1 samples, 0.05%)</title><rect x="42.4910%" y="325" width="0.0513%" height="15" fill="rgb(222,201,40)" fg:x="829" fg:w="1"/><text x="42.7410%" y="335.50"></text></g><g><title>mi_segment_span_allocate.isra.0 (49 samples, 2.51%)</title><rect x="40.3895%" y="357" width="2.5115%" height="15" fill="rgb(235,61,29)" fg:x="788" fg:w="49"/><text x="40.6395%" y="367.50">mi..</text></g><g><title>mi_segment_commitx (35 samples, 1.79%)</title><rect x="41.1071%" y="341" width="1.7940%" height="15" fill="rgb(219,207,3)" fg:x="802" fg:w="35"/><text x="41.3571%" y="351.50">m..</text></g><g><title>mi_segment_commit_mask.part.0 (7 samples, 0.36%)</title><rect x="42.5423%" y="325" width="0.3588%" height="15" fill="rgb(222,56,46)" fg:x="830" fg:w="7"/><text x="42.7923%" y="335.50"></text></g><g><title>_mi_clock_now (7 samples, 0.36%)</title><rect x="43.7724%" y="325" width="0.3588%" height="15" fill="rgb(239,76,54)" fg:x="854" fg:w="7"/><text x="44.0224%" y="335.50"></text></g><g><title>__clock_gettime_2 (6 samples, 0.31%)</title><rect x="43.8237%" y="309" width="0.3075%" height="15" fill="rgb(231,124,27)" fg:x="855" fg:w="6"/><text x="44.0737%" y="319.50"></text></g><g><title>[[vdso]] (6 samples, 0.31%)</title><rect x="43.8237%" y="293" width="0.3075%" height="15" fill="rgb(249,195,6)" fg:x="855" fg:w="6"/><text x="44.0737%" y="303.50"></text></g><g><title>[[vdso]] (5 samples, 0.26%)</title><rect x="43.8749%" y="277" width="0.2563%" height="15" fill="rgb(237,174,47)" fg:x="856" fg:w="5"/><text x="44.1249%" y="287.50"></text></g><g><title>mi_option_get (2 samples, 0.10%)</title><rect x="44.1312%" y="325" width="0.1025%" height="15" fill="rgb(206,201,31)" fg:x="861" fg:w="2"/><text x="44.3812%" y="335.50"></text></g><g><title>_mi_malloc_generic (142 samples, 7.28%)</title><rect x="37.6217%" y="421" width="7.2783%" height="15" fill="rgb(231,57,52)" fg:x="734" fg:w="142"/><text x="37.8717%" y="431.50">_mi_malloc..</text></g><g><title>mi_page_fresh_alloc (128 samples, 6.56%)</title><rect x="38.3393%" y="405" width="6.5607%" height="15" fill="rgb(248,177,22)" fg:x="748" fg:w="128"/><text x="38.5893%" y="415.50">mi_page_f..</text></g><g><title>mi_segments_page_alloc.constprop.1 (123 samples, 6.30%)</title><rect x="38.5956%" y="389" width="6.3045%" height="15" fill="rgb(215,211,37)" fg:x="753" fg:w="123"/><text x="38.8456%" y="399.50">mi_segme..</text></g><g><title>mi_segments_page_find_and_allocate (100 samples, 5.13%)</title><rect x="39.7745%" y="373" width="5.1256%" height="15" fill="rgb(241,128,51)" fg:x="776" fg:w="100"/><text x="40.0245%" y="383.50">mi_seg..</text></g><g><title>mi_segment_span_free (39 samples, 2.00%)</title><rect x="42.9011%" y="357" width="1.9990%" height="15" fill="rgb(227,165,31)" fg:x="837" fg:w="39"/><text x="43.1511%" y="367.50">m..</text></g><g><title>mi_segment_perhaps_decommit (37 samples, 1.90%)</title><rect x="43.0036%" y="341" width="1.8965%" height="15" fill="rgb(228,167,24)" fg:x="839" fg:w="37"/><text x="43.2536%" y="351.50">m..</text></g><g><title>mi_segment_commit_mask.part.0 (13 samples, 0.67%)</title><rect x="44.2337%" y="325" width="0.6663%" height="15" fill="rgb(228,143,12)" fg:x="863" fg:w="13"/><text x="44.4837%" y="335.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_sequence (461 samples, 23.63%)</title><rect x="21.3737%" y="437" width="23.6289%" height="15" fill="rgb(249,149,8)" fg:x="417" fg:w="461"/><text x="21.6237%" y="447.50">libsfasta::formats::sfasta::Sfasta::ge..</text></g><g><title>mi_malloc (2 samples, 0.10%)</title><rect x="44.9001%" y="421" width="0.1025%" height="15" fill="rgb(243,35,44)" fg:x="876" fg:w="2"/><text x="45.1501%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.05%)</title><rect x="47.7191%" y="405" width="0.0513%" height="15" fill="rgb(246,89,9)" fg:x="931" fg:w="1"/><text x="47.9691%" y="415.50"></text></g><g><title>__libc_read (1 samples, 0.05%)</title><rect x="47.7191%" y="389" width="0.0513%" height="15" fill="rgb(233,213,13)" fg:x="931" fg:w="1"/><text x="47.9691%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.05%)</title><rect x="47.7191%" y="373" width="0.0513%" height="15" fill="rgb(233,141,41)" fg:x="931" fg:w="1"/><text x="47.9691%" y="383.50"></text></g><g><title>do_syscall_64 (1 samples, 0.05%)</title><rect x="47.7191%" y="357" width="0.0513%" height="15" fill="rgb(239,167,4)" fg:x="931" fg:w="1"/><text x="47.9691%" y="367.50"></text></g><g><title>__x64_sys_read (1 samples, 0.05%)</title><rect x="47.7191%" y="341" width="0.0513%" height="15" fill="rgb(209,217,16)" fg:x="931" fg:w="1"/><text x="47.9691%" y="351.50"></text></g><g><title>ksys_read (1 samples, 0.05%)</title><rect x="47.7191%" y="325" width="0.0513%" height="15" fill="rgb(219,88,35)" fg:x="931" fg:w="1"/><text x="47.9691%" y="335.50"></text></g><g><title>vfs_read (1 samples, 0.05%)</title><rect x="47.7191%" y="309" width="0.0513%" height="15" fill="rgb(220,193,23)" fg:x="931" fg:w="1"/><text x="47.9691%" y="319.50"></text></g><g><title>new_sync_read (1 samples, 0.05%)</title><rect x="47.7191%" y="293" width="0.0513%" height="15" fill="rgb(230,90,52)" fg:x="931" fg:w="1"/><text x="47.9691%" y="303.50"></text></g><g><title>ext4_file_read_iter (1 samples, 0.05%)</title><rect x="47.7191%" y="277" width="0.0513%" height="15" fill="rgb(252,106,19)" fg:x="931" fg:w="1"/><text x="47.9691%" y="287.50"></text></g><g><title>generic_file_read_iter (1 samples, 0.05%)</title><rect x="47.7191%" y="261" width="0.0513%" height="15" fill="rgb(206,74,20)" fg:x="931" fg:w="1"/><text x="47.9691%" y="271.50"></text></g><g><title>filemap_read (1 samples, 0.05%)</title><rect x="47.7191%" y="245" width="0.0513%" height="15" fill="rgb(230,138,44)" fg:x="931" fg:w="1"/><text x="47.9691%" y="255.50"></text></g><g><title>copy_page_to_iter (1 samples, 0.05%)</title><rect x="47.7191%" y="229" width="0.0513%" height="15" fill="rgb(235,182,43)" fg:x="931" fg:w="1"/><text x="47.9691%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.15%)</title><rect x="47.7704%" y="405" width="0.1538%" height="15" fill="rgb(242,16,51)" fg:x="932" fg:w="3"/><text x="48.0204%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (28 samples, 1.44%)</title><rect x="46.6427%" y="421" width="1.4352%" height="15" fill="rgb(248,9,4)" fg:x="910" fg:w="28"/><text x="46.8927%" y="431.50"></text></g><g><title>__memmove_avx_unaligned (3 samples, 0.15%)</title><rect x="47.9241%" y="405" width="0.1538%" height="15" fill="rgb(210,31,22)" fg:x="935" fg:w="3"/><text x="48.1741%" y="415.50"></text></g><g><title>tlb_finish_mmu (2 samples, 0.10%)</title><rect x="48.0779%" y="277" width="0.1025%" height="15" fill="rgb(239,54,39)" fg:x="938" fg:w="2"/><text x="48.3279%" y="287.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.10%)</title><rect x="48.0779%" y="261" width="0.1025%" height="15" fill="rgb(230,99,41)" fg:x="938" fg:w="2"/><text x="48.3279%" y="271.50"></text></g><g><title>release_pages (2 samples, 0.10%)</title><rect x="48.0779%" y="245" width="0.1025%" height="15" fill="rgb(253,106,12)" fg:x="938" fg:w="2"/><text x="48.3279%" y="255.50"></text></g><g><title>free_unref_page_list (2 samples, 0.10%)</title><rect x="48.0779%" y="229" width="0.1025%" height="15" fill="rgb(213,46,41)" fg:x="938" fg:w="2"/><text x="48.3279%" y="239.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="48.1292%" y="213" width="0.0513%" height="15" fill="rgb(215,133,35)" fg:x="939" fg:w="1"/><text x="48.3792%" y="223.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="48.1292%" y="197" width="0.0513%" height="15" fill="rgb(213,28,5)" fg:x="939" fg:w="1"/><text x="48.3792%" y="207.50"></text></g><g><title>ZSTD_freeDCtx (4 samples, 0.21%)</title><rect x="48.0779%" y="421" width="0.2050%" height="15" fill="rgb(215,77,49)" fg:x="938" fg:w="4"/><text x="48.3279%" y="431.50"></text></g><g><title>__free (4 samples, 0.21%)</title><rect x="48.0779%" y="405" width="0.2050%" height="15" fill="rgb(248,100,22)" fg:x="938" fg:w="4"/><text x="48.3279%" y="415.50"></text></g><g><title>__GI___munmap (4 samples, 0.21%)</title><rect x="48.0779%" y="389" width="0.2050%" height="15" fill="rgb(208,67,9)" fg:x="938" fg:w="4"/><text x="48.3279%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.21%)</title><rect x="48.0779%" y="373" width="0.2050%" height="15" fill="rgb(219,133,21)" fg:x="938" fg:w="4"/><text x="48.3279%" y="383.50"></text></g><g><title>do_syscall_64 (4 samples, 0.21%)</title><rect x="48.0779%" y="357" width="0.2050%" height="15" fill="rgb(246,46,29)" fg:x="938" fg:w="4"/><text x="48.3279%" y="367.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.21%)</title><rect x="48.0779%" y="341" width="0.2050%" height="15" fill="rgb(246,185,52)" fg:x="938" fg:w="4"/><text x="48.3279%" y="351.50"></text></g><g><title>__vm_munmap (4 samples, 0.21%)</title><rect x="48.0779%" y="325" width="0.2050%" height="15" fill="rgb(252,136,11)" fg:x="938" fg:w="4"/><text x="48.3279%" y="335.50"></text></g><g><title>__do_munmap (4 samples, 0.21%)</title><rect x="48.0779%" y="309" width="0.2050%" height="15" fill="rgb(219,138,53)" fg:x="938" fg:w="4"/><text x="48.3279%" y="319.50"></text></g><g><title>unmap_region (4 samples, 0.21%)</title><rect x="48.0779%" y="293" width="0.2050%" height="15" fill="rgb(211,51,23)" fg:x="938" fg:w="4"/><text x="48.3279%" y="303.50"></text></g><g><title>unmap_vmas (2 samples, 0.10%)</title><rect x="48.1804%" y="277" width="0.1025%" height="15" fill="rgb(247,221,28)" fg:x="940" fg:w="2"/><text x="48.4304%" y="287.50"></text></g><g><title>unmap_single_vma (2 samples, 0.10%)</title><rect x="48.1804%" y="261" width="0.1025%" height="15" fill="rgb(251,222,45)" fg:x="940" fg:w="2"/><text x="48.4304%" y="271.50"></text></g><g><title>unmap_page_range (2 samples, 0.10%)</title><rect x="48.1804%" y="245" width="0.1025%" height="15" fill="rgb(217,162,53)" fg:x="940" fg:w="2"/><text x="48.4304%" y="255.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.10%)</title><rect x="48.1804%" y="229" width="0.1025%" height="15" fill="rgb(229,93,14)" fg:x="940" fg:w="2"/><text x="48.4304%" y="239.50"></text></g><g><title>zap_pte_range (2 samples, 0.10%)</title><rect x="48.1804%" y="213" width="0.1025%" height="15" fill="rgb(209,67,49)" fg:x="940" fg:w="2"/><text x="48.4304%" y="223.50"></text></g><g><title>page_remove_rmap (1 samples, 0.05%)</title><rect x="48.2317%" y="197" width="0.0513%" height="15" fill="rgb(213,87,29)" fg:x="941" fg:w="1"/><text x="48.4817%" y="207.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.05%)</title><rect x="48.2317%" y="181" width="0.0513%" height="15" fill="rgb(205,151,52)" fg:x="941" fg:w="1"/><text x="48.4817%" y="191.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.05%)</title><rect x="48.2317%" y="165" width="0.0513%" height="15" fill="rgb(253,215,39)" fg:x="941" fg:w="1"/><text x="48.4817%" y="175.50"></text></g><g><title>__count_memcg_events (1 samples, 0.05%)</title><rect x="49.6668%" y="341" width="0.0513%" height="15" fill="rgb(221,220,41)" fg:x="969" fg:w="1"/><text x="49.9168%" y="351.50"></text></g><g><title>clear_page_rep (11 samples, 0.56%)</title><rect x="49.9231%" y="245" width="0.5638%" height="15" fill="rgb(218,133,21)" fg:x="974" fg:w="11"/><text x="50.1731%" y="255.50"></text></g><g><title>alloc_pages_vma (18 samples, 0.92%)</title><rect x="49.7181%" y="293" width="0.9226%" height="15" fill="rgb(221,193,43)" fg:x="970" fg:w="18"/><text x="49.9681%" y="303.50"></text></g><g><title>__alloc_pages (15 samples, 0.77%)</title><rect x="49.8719%" y="277" width="0.7688%" height="15" fill="rgb(240,128,52)" fg:x="973" fg:w="15"/><text x="50.1219%" y="287.50"></text></g><g><title>get_page_from_freelist (15 samples, 0.77%)</title><rect x="49.8719%" y="261" width="0.7688%" height="15" fill="rgb(253,114,12)" fg:x="973" fg:w="15"/><text x="50.1219%" y="271.50"></text></g><g><title>rmqueue (3 samples, 0.15%)</title><rect x="50.4869%" y="245" width="0.1538%" height="15" fill="rgb(215,223,47)" fg:x="985" fg:w="3"/><text x="50.7369%" y="255.50"></text></g><g><title>rmqueue_bulk.constprop.0 (3 samples, 0.15%)</title><rect x="50.4869%" y="229" width="0.1538%" height="15" fill="rgb(248,225,23)" fg:x="985" fg:w="3"/><text x="50.7369%" y="239.50"></text></g><g><title>do_anonymous_page (19 samples, 0.97%)</title><rect x="49.7181%" y="309" width="0.9739%" height="15" fill="rgb(250,108,0)" fg:x="970" fg:w="19"/><text x="49.9681%" y="319.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 0.05%)</title><rect x="50.6407%" y="293" width="0.0513%" height="15" fill="rgb(228,208,7)" fg:x="988" fg:w="1"/><text x="50.8907%" y="303.50"></text></g><g><title>lru_cache_add (1 samples, 0.05%)</title><rect x="50.6407%" y="277" width="0.0513%" height="15" fill="rgb(244,45,10)" fg:x="988" fg:w="1"/><text x="50.8907%" y="287.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.05%)</title><rect x="50.6407%" y="261" width="0.0513%" height="15" fill="rgb(207,125,25)" fg:x="988" fg:w="1"/><text x="50.8907%" y="271.50"></text></g><g><title>do_user_addr_fault (21 samples, 1.08%)</title><rect x="49.6668%" y="373" width="1.0764%" height="15" fill="rgb(210,195,18)" fg:x="969" fg:w="21"/><text x="49.9168%" y="383.50"></text></g><g><title>handle_mm_fault (21 samples, 1.08%)</title><rect x="49.6668%" y="357" width="1.0764%" height="15" fill="rgb(249,80,12)" fg:x="969" fg:w="21"/><text x="49.9168%" y="367.50"></text></g><g><title>__handle_mm_fault (20 samples, 1.03%)</title><rect x="49.7181%" y="341" width="1.0251%" height="15" fill="rgb(221,65,9)" fg:x="970" fg:w="20"/><text x="49.9681%" y="351.50"></text></g><g><title>handle_pte_fault (20 samples, 1.03%)</title><rect x="49.7181%" y="325" width="1.0251%" height="15" fill="rgb(235,49,36)" fg:x="970" fg:w="20"/><text x="49.9681%" y="335.50"></text></g><g><title>pmd_page_vaddr (1 samples, 0.05%)</title><rect x="50.6920%" y="309" width="0.0513%" height="15" fill="rgb(225,32,20)" fg:x="989" fg:w="1"/><text x="50.9420%" y="319.50"></text></g><g><title>asm_exc_page_fault (36 samples, 1.85%)</title><rect x="48.9493%" y="405" width="1.8452%" height="15" fill="rgb(215,141,46)" fg:x="955" fg:w="36"/><text x="49.1993%" y="415.50">a..</text></g><g><title>exc_page_fault (24 samples, 1.23%)</title><rect x="49.5643%" y="389" width="1.2301%" height="15" fill="rgb(250,160,47)" fg:x="967" fg:w="24"/><text x="49.8143%" y="399.50"></text></g><g><title>irqentry_exit (1 samples, 0.05%)</title><rect x="50.7432%" y="373" width="0.0513%" height="15" fill="rgb(216,222,40)" fg:x="990" fg:w="1"/><text x="50.9932%" y="383.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.05%)</title><rect x="50.7432%" y="357" width="0.0513%" height="15" fill="rgb(234,217,39)" fg:x="990" fg:w="1"/><text x="50.9932%" y="367.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.05%)</title><rect x="50.7432%" y="341" width="0.0513%" height="15" fill="rgb(207,178,40)" fg:x="990" fg:w="1"/><text x="50.9932%" y="351.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.05%)</title><rect x="50.7432%" y="325" width="0.0513%" height="15" fill="rgb(221,136,13)" fg:x="990" fg:w="1"/><text x="50.9932%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (50 samples, 2.56%)</title><rect x="48.2829%" y="421" width="2.5628%" height="15" fill="rgb(249,199,10)" fg:x="942" fg:w="50"/><text x="48.5329%" y="431.50">__..</text></g><g><title>error_entry (1 samples, 0.05%)</title><rect x="50.7945%" y="405" width="0.0513%" height="15" fill="rgb(249,222,13)" fg:x="991" fg:w="1"/><text x="51.0445%" y="415.50"></text></g><g><title>clear_page_rep (4 samples, 0.21%)</title><rect x="50.8970%" y="261" width="0.2050%" height="15" fill="rgb(244,185,38)" fg:x="993" fg:w="4"/><text x="51.1470%" y="271.50"></text></g><g><title>alloc_pages_vma (7 samples, 0.36%)</title><rect x="50.8970%" y="309" width="0.3588%" height="15" fill="rgb(236,202,9)" fg:x="993" fg:w="7"/><text x="51.1470%" y="319.50"></text></g><g><title>__alloc_pages (7 samples, 0.36%)</title><rect x="50.8970%" y="293" width="0.3588%" height="15" fill="rgb(250,229,37)" fg:x="993" fg:w="7"/><text x="51.1470%" y="303.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.36%)</title><rect x="50.8970%" y="277" width="0.3588%" height="15" fill="rgb(206,174,23)" fg:x="993" fg:w="7"/><text x="51.1470%" y="287.50"></text></g><g><title>rmqueue (3 samples, 0.15%)</title><rect x="51.1020%" y="261" width="0.1538%" height="15" fill="rgb(211,33,43)" fg:x="997" fg:w="3"/><text x="51.3520%" y="271.50"></text></g><g><title>rmqueue_bulk.constprop.0 (3 samples, 0.15%)</title><rect x="51.1020%" y="245" width="0.1538%" height="15" fill="rgb(245,58,50)" fg:x="997" fg:w="3"/><text x="51.3520%" y="255.50"></text></g><g><title>asm_exc_page_fault (9 samples, 0.46%)</title><rect x="50.8457%" y="421" width="0.4613%" height="15" fill="rgb(244,68,36)" fg:x="992" fg:w="9"/><text x="51.0957%" y="431.50"></text></g><g><title>exc_page_fault (9 samples, 0.46%)</title><rect x="50.8457%" y="405" width="0.4613%" height="15" fill="rgb(232,229,15)" fg:x="992" fg:w="9"/><text x="51.0957%" y="415.50"></text></g><g><title>do_user_addr_fault (9 samples, 0.46%)</title><rect x="50.8457%" y="389" width="0.4613%" height="15" fill="rgb(254,30,23)" fg:x="992" fg:w="9"/><text x="51.0957%" y="399.50"></text></g><g><title>handle_mm_fault (9 samples, 0.46%)</title><rect x="50.8457%" y="373" width="0.4613%" height="15" fill="rgb(235,160,14)" fg:x="992" fg:w="9"/><text x="51.0957%" y="383.50"></text></g><g><title>__handle_mm_fault (9 samples, 0.46%)</title><rect x="50.8457%" y="357" width="0.4613%" height="15" fill="rgb(212,155,44)" fg:x="992" fg:w="9"/><text x="51.0957%" y="367.50"></text></g><g><title>handle_pte_fault (9 samples, 0.46%)</title><rect x="50.8457%" y="341" width="0.4613%" height="15" fill="rgb(226,2,50)" fg:x="992" fg:w="9"/><text x="51.0957%" y="351.50"></text></g><g><title>do_anonymous_page (8 samples, 0.41%)</title><rect x="50.8970%" y="325" width="0.4100%" height="15" fill="rgb(234,177,6)" fg:x="993" fg:w="8"/><text x="51.1470%" y="335.50"></text></g><g><title>cgroup_throttle_swaprate (1 samples, 0.05%)</title><rect x="51.2558%" y="309" width="0.0513%" height="15" fill="rgb(217,24,9)" fg:x="1000" fg:w="1"/><text x="51.5058%" y="319.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.05%)</title><rect x="51.9221%" y="389" width="0.0513%" height="15" fill="rgb(220,13,46)" fg:x="1013" fg:w="1"/><text x="52.1721%" y="399.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.10%)</title><rect x="52.0759%" y="245" width="0.1025%" height="15" fill="rgb(239,221,27)" fg:x="1016" fg:w="2"/><text x="52.3259%" y="255.50"></text></g><g><title>__alloc_pages (2 samples, 0.10%)</title><rect x="52.0759%" y="229" width="0.1025%" height="15" fill="rgb(222,198,25)" fg:x="1016" fg:w="2"/><text x="52.3259%" y="239.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.10%)</title><rect x="52.0759%" y="213" width="0.1025%" height="15" fill="rgb(211,99,13)" fg:x="1016" fg:w="2"/><text x="52.3259%" y="223.50"></text></g><g><title>clear_page_rep (2 samples, 0.10%)</title><rect x="52.0759%" y="197" width="0.1025%" height="15" fill="rgb(232,111,31)" fg:x="1016" fg:w="2"/><text x="52.3259%" y="207.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 0.05%)</title><rect x="52.1784%" y="245" width="0.0513%" height="15" fill="rgb(245,82,37)" fg:x="1018" fg:w="1"/><text x="52.4284%" y="255.50"></text></g><g><title>lru_cache_add (1 samples, 0.05%)</title><rect x="52.1784%" y="229" width="0.0513%" height="15" fill="rgb(227,149,46)" fg:x="1018" fg:w="1"/><text x="52.4284%" y="239.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.05%)</title><rect x="52.1784%" y="213" width="0.0513%" height="15" fill="rgb(218,36,50)" fg:x="1018" fg:w="1"/><text x="52.4284%" y="223.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.05%)</title><rect x="52.1784%" y="197" width="0.0513%" height="15" fill="rgb(226,80,48)" fg:x="1018" fg:w="1"/><text x="52.4284%" y="207.50"></text></g><g><title>mem_cgroup_update_lru_size (1 samples, 0.05%)</title><rect x="52.1784%" y="181" width="0.0513%" height="15" fill="rgb(238,224,15)" fg:x="1018" fg:w="1"/><text x="52.4284%" y="191.50"></text></g><g><title>_mi_malloc_generic (7 samples, 0.36%)</title><rect x="51.9221%" y="405" width="0.3588%" height="15" fill="rgb(241,136,10)" fg:x="1013" fg:w="7"/><text x="52.1721%" y="415.50"></text></g><g><title>mi_page_queue_find_free_ex (6 samples, 0.31%)</title><rect x="51.9733%" y="389" width="0.3075%" height="15" fill="rgb(208,32,45)" fg:x="1014" fg:w="6"/><text x="52.2233%" y="399.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (6 samples, 0.31%)</title><rect x="51.9733%" y="373" width="0.3075%" height="15" fill="rgb(207,135,9)" fg:x="1014" fg:w="6"/><text x="52.2233%" y="383.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.26%)</title><rect x="52.0246%" y="357" width="0.2563%" height="15" fill="rgb(206,86,44)" fg:x="1015" fg:w="5"/><text x="52.2746%" y="367.50"></text></g><g><title>exc_page_fault (4 samples, 0.21%)</title><rect x="52.0759%" y="341" width="0.2050%" height="15" fill="rgb(245,177,15)" fg:x="1016" fg:w="4"/><text x="52.3259%" y="351.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.21%)</title><rect x="52.0759%" y="325" width="0.2050%" height="15" fill="rgb(206,64,50)" fg:x="1016" fg:w="4"/><text x="52.3259%" y="335.50"></text></g><g><title>handle_mm_fault (4 samples, 0.21%)</title><rect x="52.0759%" y="309" width="0.2050%" height="15" fill="rgb(234,36,40)" fg:x="1016" fg:w="4"/><text x="52.3259%" y="319.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.21%)</title><rect x="52.0759%" y="293" width="0.2050%" height="15" fill="rgb(213,64,8)" fg:x="1016" fg:w="4"/><text x="52.3259%" y="303.50"></text></g><g><title>handle_pte_fault (4 samples, 0.21%)</title><rect x="52.0759%" y="277" width="0.2050%" height="15" fill="rgb(210,75,36)" fg:x="1016" fg:w="4"/><text x="52.3259%" y="287.50"></text></g><g><title>do_anonymous_page (4 samples, 0.21%)</title><rect x="52.0759%" y="261" width="0.2050%" height="15" fill="rgb(229,88,21)" fg:x="1016" fg:w="4"/><text x="52.3259%" y="271.50"></text></g><g><title>pmd_val (1 samples, 0.05%)</title><rect x="52.2296%" y="245" width="0.0513%" height="15" fill="rgb(252,204,47)" fg:x="1019" fg:w="1"/><text x="52.4796%" y="255.50"></text></g><g><title>bincode::de::impls::&lt;impl bincode::de::Decode for core::option::Option&lt;T&gt;&gt;::decode (24 samples, 1.23%)</title><rect x="51.3070%" y="421" width="1.2301%" height="15" fill="rgb(208,77,27)" fg:x="1001" fg:w="24"/><text x="51.5570%" y="431.50"></text></g><g><title>mi_malloc (5 samples, 0.26%)</title><rect x="52.2809%" y="405" width="0.2563%" height="15" fill="rgb(221,76,26)" fg:x="1020" fg:w="5"/><text x="52.5309%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.10%)</title><rect x="54.4336%" y="389" width="0.1025%" height="15" fill="rgb(225,139,18)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="399.50"></text></g><g><title>__libc_read (2 samples, 0.10%)</title><rect x="54.4336%" y="373" width="0.1025%" height="15" fill="rgb(230,137,11)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.10%)</title><rect x="54.4336%" y="357" width="0.1025%" height="15" fill="rgb(212,28,1)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="367.50"></text></g><g><title>do_syscall_64 (2 samples, 0.10%)</title><rect x="54.4336%" y="341" width="0.1025%" height="15" fill="rgb(248,164,17)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="351.50"></text></g><g><title>__x64_sys_read (2 samples, 0.10%)</title><rect x="54.4336%" y="325" width="0.1025%" height="15" fill="rgb(222,171,42)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="335.50"></text></g><g><title>ksys_read (2 samples, 0.10%)</title><rect x="54.4336%" y="309" width="0.1025%" height="15" fill="rgb(243,84,45)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="319.50"></text></g><g><title>vfs_read (2 samples, 0.10%)</title><rect x="54.4336%" y="293" width="0.1025%" height="15" fill="rgb(252,49,23)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="303.50"></text></g><g><title>new_sync_read (2 samples, 0.10%)</title><rect x="54.4336%" y="277" width="0.1025%" height="15" fill="rgb(215,19,7)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="287.50"></text></g><g><title>ext4_file_read_iter (2 samples, 0.10%)</title><rect x="54.4336%" y="261" width="0.1025%" height="15" fill="rgb(238,81,41)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="271.50"></text></g><g><title>generic_file_read_iter (2 samples, 0.10%)</title><rect x="54.4336%" y="245" width="0.1025%" height="15" fill="rgb(210,199,37)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="255.50"></text></g><g><title>filemap_read (2 samples, 0.10%)</title><rect x="54.4336%" y="229" width="0.1025%" height="15" fill="rgb(244,192,49)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="239.50"></text></g><g><title>copy_user_generic_string (2 samples, 0.10%)</title><rect x="54.4336%" y="213" width="0.1025%" height="15" fill="rgb(226,211,11)" fg:x="1062" fg:w="2"/><text x="54.6836%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.10%)</title><rect x="54.5361%" y="389" width="0.1025%" height="15" fill="rgb(236,162,54)" fg:x="1064" fg:w="2"/><text x="54.7861%" y="399.50"></text></g><g><title>bincode::features::impl_std::decode_from_std_read (44 samples, 2.26%)</title><rect x="52.5372%" y="421" width="2.2553%" height="15" fill="rgb(220,229,9)" fg:x="1025" fg:w="44"/><text x="52.7872%" y="431.50">b..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (27 samples, 1.38%)</title><rect x="53.4085%" y="405" width="1.3839%" height="15" fill="rgb(250,87,22)" fg:x="1042" fg:w="27"/><text x="53.6585%" y="415.50"></text></g><g><title>__memmove_avx_unaligned (3 samples, 0.15%)</title><rect x="54.6386%" y="389" width="0.1538%" height="15" fill="rgb(239,43,17)" fg:x="1066" fg:w="3"/><text x="54.8886%" y="399.50"></text></g><g><title>ZSTD_decodeLiteralsBlock (2 samples, 0.10%)</title><rect x="54.7924%" y="325" width="0.1025%" height="15" fill="rgb(231,177,25)" fg:x="1069" fg:w="2"/><text x="55.0424%" y="335.50"></text></g><g><title>HUF_decompress4X_hufOnly_wksp_bmi2 (2 samples, 0.10%)</title><rect x="54.7924%" y="309" width="0.1025%" height="15" fill="rgb(219,179,1)" fg:x="1069" fg:w="2"/><text x="55.0424%" y="319.50"></text></g><g><title>HUF_readDTableX1_wksp_bmi2 (2 samples, 0.10%)</title><rect x="54.7924%" y="293" width="0.1025%" height="15" fill="rgb(238,219,53)" fg:x="1069" fg:w="2"/><text x="55.0424%" y="303.50"></text></g><g><title>HUF_readStats_body_bmi2 (1 samples, 0.05%)</title><rect x="54.8437%" y="277" width="0.0513%" height="15" fill="rgb(232,167,36)" fg:x="1070" fg:w="1"/><text x="55.0937%" y="287.50"></text></g><g><title>FSE_decompress_wksp_body_bmi2 (1 samples, 0.05%)</title><rect x="54.8437%" y="261" width="0.0513%" height="15" fill="rgb(244,19,51)" fg:x="1070" fg:w="1"/><text x="55.0937%" y="271.50"></text></g><g><title>ZSTD_decodeSeqHeaders (1 samples, 0.05%)</title><rect x="54.8949%" y="325" width="0.0513%" height="15" fill="rgb(224,6,22)" fg:x="1071" fg:w="1"/><text x="55.1449%" y="335.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (1 samples, 0.05%)</title><rect x="54.8949%" y="309" width="0.0513%" height="15" fill="rgb(224,145,5)" fg:x="1071" fg:w="1"/><text x="55.1449%" y="319.50"></text></g><g><title>clear_page_rep (8 samples, 0.41%)</title><rect x="55.9713%" y="149" width="0.4100%" height="15" fill="rgb(234,130,49)" fg:x="1092" fg:w="8"/><text x="56.2213%" y="159.50"></text></g><g><title>alloc_pages_vma (13 samples, 0.67%)</title><rect x="55.9713%" y="197" width="0.6663%" height="15" fill="rgb(254,6,2)" fg:x="1092" fg:w="13"/><text x="56.2213%" y="207.50"></text></g><g><title>__alloc_pages (13 samples, 0.67%)</title><rect x="55.9713%" y="181" width="0.6663%" height="15" fill="rgb(208,96,46)" fg:x="1092" fg:w="13"/><text x="56.2213%" y="191.50"></text></g><g><title>get_page_from_freelist (13 samples, 0.67%)</title><rect x="55.9713%" y="165" width="0.6663%" height="15" fill="rgb(239,3,39)" fg:x="1092" fg:w="13"/><text x="56.2213%" y="175.50"></text></g><g><title>rmqueue (5 samples, 0.26%)</title><rect x="56.3813%" y="149" width="0.2563%" height="15" fill="rgb(233,210,1)" fg:x="1100" fg:w="5"/><text x="56.6313%" y="159.50"></text></g><g><title>rmqueue_bulk.constprop.0 (4 samples, 0.21%)</title><rect x="56.4326%" y="133" width="0.2050%" height="15" fill="rgb(244,137,37)" fg:x="1101" fg:w="4"/><text x="56.6826%" y="143.50"></text></g><g><title>handle_pte_fault (14 samples, 0.72%)</title><rect x="55.9713%" y="229" width="0.7176%" height="15" fill="rgb(240,136,2)" fg:x="1092" fg:w="14"/><text x="56.2213%" y="239.50"></text></g><g><title>do_anonymous_page (14 samples, 0.72%)</title><rect x="55.9713%" y="213" width="0.7176%" height="15" fill="rgb(239,18,37)" fg:x="1092" fg:w="14"/><text x="56.2213%" y="223.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 0.05%)</title><rect x="56.6376%" y="197" width="0.0513%" height="15" fill="rgb(218,185,22)" fg:x="1105" fg:w="1"/><text x="56.8876%" y="207.50"></text></g><g><title>lru_cache_add (1 samples, 0.05%)</title><rect x="56.6376%" y="181" width="0.0513%" height="15" fill="rgb(225,218,4)" fg:x="1105" fg:w="1"/><text x="56.8876%" y="191.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.05%)</title><rect x="56.6376%" y="165" width="0.0513%" height="15" fill="rgb(230,182,32)" fg:x="1105" fg:w="1"/><text x="56.8876%" y="175.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="56.6376%" y="149" width="0.0513%" height="15" fill="rgb(242,56,43)" fg:x="1105" fg:w="1"/><text x="56.8876%" y="159.50"></text></g><g><title>mem_cgroup_uncharge_list (1 samples, 0.05%)</title><rect x="56.6376%" y="133" width="0.0513%" height="15" fill="rgb(233,99,24)" fg:x="1105" fg:w="1"/><text x="56.8876%" y="143.50"></text></g><g><title>ZSTD_decompressContinueStream (38 samples, 1.95%)</title><rect x="54.7924%" y="373" width="1.9477%" height="15" fill="rgb(234,209,42)" fg:x="1069" fg:w="38"/><text x="55.0424%" y="383.50">Z..</text></g><g><title>ZSTD_decompressContinue (38 samples, 1.95%)</title><rect x="54.7924%" y="357" width="1.9477%" height="15" fill="rgb(227,7,12)" fg:x="1069" fg:w="38"/><text x="55.0424%" y="367.50">Z..</text></g><g><title>ZSTD_decompressBlock_internal (38 samples, 1.95%)</title><rect x="54.7924%" y="341" width="1.9477%" height="15" fill="rgb(245,203,43)" fg:x="1069" fg:w="38"/><text x="55.0424%" y="351.50">Z..</text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (35 samples, 1.79%)</title><rect x="54.9462%" y="325" width="1.7940%" height="15" fill="rgb(238,205,33)" fg:x="1072" fg:w="35"/><text x="55.1962%" y="335.50">Z..</text></g><g><title>asm_exc_page_fault (16 samples, 0.82%)</title><rect x="55.9200%" y="309" width="0.8201%" height="15" fill="rgb(231,56,7)" fg:x="1091" fg:w="16"/><text x="56.1700%" y="319.50"></text></g><g><title>exc_page_fault (15 samples, 0.77%)</title><rect x="55.9713%" y="293" width="0.7688%" height="15" fill="rgb(244,186,29)" fg:x="1092" fg:w="15"/><text x="56.2213%" y="303.50"></text></g><g><title>do_user_addr_fault (15 samples, 0.77%)</title><rect x="55.9713%" y="277" width="0.7688%" height="15" fill="rgb(234,111,31)" fg:x="1092" fg:w="15"/><text x="56.2213%" y="287.50"></text></g><g><title>handle_mm_fault (15 samples, 0.77%)</title><rect x="55.9713%" y="261" width="0.7688%" height="15" fill="rgb(241,149,10)" fg:x="1092" fg:w="15"/><text x="56.2213%" y="271.50"></text></g><g><title>__handle_mm_fault (15 samples, 0.77%)</title><rect x="55.9713%" y="245" width="0.7688%" height="15" fill="rgb(249,206,44)" fg:x="1092" fg:w="15"/><text x="56.2213%" y="255.50"></text></g><g><title>pmd_val (1 samples, 0.05%)</title><rect x="56.6889%" y="229" width="0.0513%" height="15" fill="rgb(251,153,30)" fg:x="1106" fg:w="1"/><text x="56.9389%" y="239.50"></text></g><g><title>ZSTD_decompressStream (41 samples, 2.10%)</title><rect x="54.7924%" y="389" width="2.1015%" height="15" fill="rgb(239,152,38)" fg:x="1069" fg:w="41"/><text x="55.0424%" y="399.50">Z..</text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.15%)</title><rect x="56.7401%" y="373" width="0.1538%" height="15" fill="rgb(249,139,47)" fg:x="1107" fg:w="3"/><text x="56.9901%" y="383.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (42 samples, 2.15%)</title><rect x="54.7924%" y="405" width="2.1527%" height="15" fill="rgb(244,64,35)" fg:x="1069" fg:w="42"/><text x="55.0424%" y="415.50">&lt;..</text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="56.8939%" y="389" width="0.0513%" height="15" fill="rgb(216,46,15)" fg:x="1110" fg:w="1"/><text x="57.1439%" y="399.50"></text></g><g><title>clear_page_rep (5 samples, 0.26%)</title><rect x="57.5602%" y="229" width="0.2563%" height="15" fill="rgb(250,74,19)" fg:x="1123" fg:w="5"/><text x="57.8102%" y="239.50"></text></g><g><title>__memset_avx2_unaligned_erms (19 samples, 0.97%)</title><rect x="56.9452%" y="405" width="0.9739%" height="15" fill="rgb(249,42,33)" fg:x="1111" fg:w="19"/><text x="57.1952%" y="415.50"></text></g><g><title>asm_exc_page_fault (12 samples, 0.62%)</title><rect x="57.3039%" y="389" width="0.6151%" height="15" fill="rgb(242,149,17)" fg:x="1118" fg:w="12"/><text x="57.5539%" y="399.50"></text></g><g><title>exc_page_fault (9 samples, 0.46%)</title><rect x="57.4577%" y="373" width="0.4613%" height="15" fill="rgb(244,29,21)" fg:x="1121" fg:w="9"/><text x="57.7077%" y="383.50"></text></g><g><title>do_user_addr_fault (9 samples, 0.46%)</title><rect x="57.4577%" y="357" width="0.4613%" height="15" fill="rgb(220,130,37)" fg:x="1121" fg:w="9"/><text x="57.7077%" y="367.50"></text></g><g><title>handle_mm_fault (9 samples, 0.46%)</title><rect x="57.4577%" y="341" width="0.4613%" height="15" fill="rgb(211,67,2)" fg:x="1121" fg:w="9"/><text x="57.7077%" y="351.50"></text></g><g><title>__handle_mm_fault (9 samples, 0.46%)</title><rect x="57.4577%" y="325" width="0.4613%" height="15" fill="rgb(235,68,52)" fg:x="1121" fg:w="9"/><text x="57.7077%" y="335.50"></text></g><g><title>handle_pte_fault (9 samples, 0.46%)</title><rect x="57.4577%" y="309" width="0.4613%" height="15" fill="rgb(246,142,3)" fg:x="1121" fg:w="9"/><text x="57.7077%" y="319.50"></text></g><g><title>do_anonymous_page (9 samples, 0.46%)</title><rect x="57.4577%" y="293" width="0.4613%" height="15" fill="rgb(241,25,7)" fg:x="1121" fg:w="9"/><text x="57.7077%" y="303.50"></text></g><g><title>alloc_pages_vma (9 samples, 0.46%)</title><rect x="57.4577%" y="277" width="0.4613%" height="15" fill="rgb(242,119,39)" fg:x="1121" fg:w="9"/><text x="57.7077%" y="287.50"></text></g><g><title>__alloc_pages (8 samples, 0.41%)</title><rect x="57.5090%" y="261" width="0.4100%" height="15" fill="rgb(241,98,45)" fg:x="1122" fg:w="8"/><text x="57.7590%" y="271.50"></text></g><g><title>get_page_from_freelist (8 samples, 0.41%)</title><rect x="57.5090%" y="245" width="0.4100%" height="15" fill="rgb(254,28,30)" fg:x="1122" fg:w="8"/><text x="57.7590%" y="255.50"></text></g><g><title>rmqueue (2 samples, 0.10%)</title><rect x="57.8165%" y="229" width="0.1025%" height="15" fill="rgb(241,142,54)" fg:x="1128" fg:w="2"/><text x="58.0665%" y="239.50"></text></g><g><title>rmqueue_bulk.constprop.0 (2 samples, 0.10%)</title><rect x="57.8165%" y="213" width="0.1025%" height="15" fill="rgb(222,85,15)" fg:x="1128" fg:w="2"/><text x="58.0665%" y="223.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.10%)</title><rect x="58.6879%" y="229" width="0.1025%" height="15" fill="rgb(210,85,47)" fg:x="1145" fg:w="2"/><text x="58.9379%" y="239.50"></text></g><g><title>__alloc_pages (2 samples, 0.10%)</title><rect x="58.6879%" y="213" width="0.1025%" height="15" fill="rgb(224,206,25)" fg:x="1145" fg:w="2"/><text x="58.9379%" y="223.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.10%)</title><rect x="58.6879%" y="197" width="0.1025%" height="15" fill="rgb(243,201,19)" fg:x="1145" fg:w="2"/><text x="58.9379%" y="207.50"></text></g><g><title>clear_page_rep (1 samples, 0.05%)</title><rect x="58.7391%" y="181" width="0.0513%" height="15" fill="rgb(236,59,4)" fg:x="1146" fg:w="1"/><text x="58.9891%" y="191.50"></text></g><g><title>handle_mm_fault (5 samples, 0.26%)</title><rect x="58.5853%" y="293" width="0.2563%" height="15" fill="rgb(254,179,45)" fg:x="1143" fg:w="5"/><text x="58.8353%" y="303.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.15%)</title><rect x="58.6879%" y="277" width="0.1538%" height="15" fill="rgb(226,14,10)" fg:x="1145" fg:w="3"/><text x="58.9379%" y="287.50"></text></g><g><title>handle_pte_fault (3 samples, 0.15%)</title><rect x="58.6879%" y="261" width="0.1538%" height="15" fill="rgb(244,27,41)" fg:x="1145" fg:w="3"/><text x="58.9379%" y="271.50"></text></g><g><title>do_anonymous_page (3 samples, 0.15%)</title><rect x="58.6879%" y="245" width="0.1538%" height="15" fill="rgb(235,35,32)" fg:x="1145" fg:w="3"/><text x="58.9379%" y="255.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 0.05%)</title><rect x="58.7904%" y="229" width="0.0513%" height="15" fill="rgb(218,68,31)" fg:x="1147" fg:w="1"/><text x="59.0404%" y="239.50"></text></g><g><title>lru_cache_add (1 samples, 0.05%)</title><rect x="58.7904%" y="213" width="0.0513%" height="15" fill="rgb(207,120,37)" fg:x="1147" fg:w="1"/><text x="59.0404%" y="223.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.05%)</title><rect x="58.7904%" y="197" width="0.0513%" height="15" fill="rgb(227,98,0)" fg:x="1147" fg:w="1"/><text x="59.0404%" y="207.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.05%)</title><rect x="58.7904%" y="181" width="0.0513%" height="15" fill="rgb(207,7,3)" fg:x="1147" fg:w="1"/><text x="59.0404%" y="191.50"></text></g><g><title>page_mapping (1 samples, 0.05%)</title><rect x="58.7904%" y="165" width="0.0513%" height="15" fill="rgb(206,98,19)" fg:x="1147" fg:w="1"/><text x="59.0404%" y="175.50"></text></g><g><title>std::io::Read::read_to_end (80 samples, 4.10%)</title><rect x="54.7924%" y="421" width="4.1005%" height="15" fill="rgb(217,5,26)" fg:x="1069" fg:w="80"/><text x="55.0424%" y="431.50">std:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.97%)</title><rect x="57.9190%" y="405" width="0.9739%" height="15" fill="rgb(235,190,38)" fg:x="1130" fg:w="19"/><text x="58.1690%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.97%)</title><rect x="57.9190%" y="389" width="0.9739%" height="15" fill="rgb(247,86,24)" fg:x="1130" fg:w="19"/><text x="58.1690%" y="399.50"></text></g><g><title>_mi_heap_realloc_zero (19 samples, 0.97%)</title><rect x="57.9190%" y="373" width="0.9739%" height="15" fill="rgb(205,101,16)" fg:x="1130" fg:w="19"/><text x="58.1690%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.97%)</title><rect x="57.9190%" y="357" width="0.9739%" height="15" fill="rgb(246,168,33)" fg:x="1130" fg:w="19"/><text x="58.1690%" y="367.50"></text></g><g><title>asm_exc_page_fault (14 samples, 0.72%)</title><rect x="58.1753%" y="341" width="0.7176%" height="15" fill="rgb(231,114,1)" fg:x="1135" fg:w="14"/><text x="58.4253%" y="351.50"></text></g><g><title>exc_page_fault (7 samples, 0.36%)</title><rect x="58.5341%" y="325" width="0.3588%" height="15" fill="rgb(207,184,53)" fg:x="1142" fg:w="7"/><text x="58.7841%" y="335.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.36%)</title><rect x="58.5341%" y="309" width="0.3588%" height="15" fill="rgb(224,95,51)" fg:x="1142" fg:w="7"/><text x="58.7841%" y="319.50"></text></g><g><title>rcu_all_qs (1 samples, 0.05%)</title><rect x="58.8416%" y="293" width="0.0513%" height="15" fill="rgb(212,188,45)" fg:x="1148" fg:w="1"/><text x="59.0916%" y="303.50"></text></g><g><title>ZSTD_decodeLiteralsBlock (1 samples, 0.05%)</title><rect x="58.8929%" y="357" width="0.0513%" height="15" fill="rgb(223,154,38)" fg:x="1149" fg:w="1"/><text x="59.1429%" y="367.50"></text></g><g><title>HUF_decompress4X1_usingDTable_internal_bmi2_asm (1 samples, 0.05%)</title><rect x="58.8929%" y="341" width="0.0513%" height="15" fill="rgb(251,22,52)" fg:x="1149" fg:w="1"/><text x="59.1429%" y="351.50"></text></g><g><title>FSE_readNCount_body_default (2 samples, 0.10%)</title><rect x="58.9441%" y="325" width="0.1025%" height="15" fill="rgb(229,209,22)" fg:x="1150" fg:w="2"/><text x="59.1941%" y="335.50"></text></g><g><title>ZSTD_decodeSeqHeaders (3 samples, 0.15%)</title><rect x="58.9441%" y="357" width="0.1538%" height="15" fill="rgb(234,138,34)" fg:x="1150" fg:w="3"/><text x="59.1941%" y="367.50"></text></g><g><title>ZSTD_buildSeqTable.constprop.0 (3 samples, 0.15%)</title><rect x="58.9441%" y="341" width="0.1538%" height="15" fill="rgb(212,95,11)" fg:x="1150" fg:w="3"/><text x="59.1941%" y="351.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (1 samples, 0.05%)</title><rect x="59.0466%" y="325" width="0.0513%" height="15" fill="rgb(240,179,47)" fg:x="1152" fg:w="1"/><text x="59.2966%" y="335.50"></text></g><g><title>libsfasta::formats::sfasta::SfastaParser::open_from_buffer (314 samples, 16.09%)</title><rect x="45.0026%" y="437" width="16.0943%" height="15" fill="rgb(240,163,11)" fg:x="878" fg:w="314"/><text x="45.2526%" y="447.50">libsfasta::formats::sfast..</text></g><g><title>zstd::bulk::decompressor::Decompressor::decompress (43 samples, 2.20%)</title><rect x="58.8929%" y="421" width="2.2040%" height="15" fill="rgb(236,37,12)" fg:x="1149" fg:w="43"/><text x="59.1429%" y="431.50">z..</text></g><g><title>ZSTD_decompress_usingDDict (43 samples, 2.20%)</title><rect x="58.8929%" y="405" width="2.2040%" height="15" fill="rgb(232,164,16)" fg:x="1149" fg:w="43"/><text x="59.1429%" y="415.50">Z..</text></g><g><title>ZSTD_decompressMultiFrame (43 samples, 2.20%)</title><rect x="58.8929%" y="389" width="2.2040%" height="15" fill="rgb(244,205,15)" fg:x="1149" fg:w="43"/><text x="59.1429%" y="399.50">Z..</text></g><g><title>ZSTD_decompressBlock_internal (43 samples, 2.20%)</title><rect x="58.8929%" y="373" width="2.2040%" height="15" fill="rgb(223,117,47)" fg:x="1149" fg:w="43"/><text x="59.1429%" y="383.50">Z..</text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (39 samples, 2.00%)</title><rect x="59.0979%" y="357" width="1.9990%" height="15" fill="rgb(244,107,35)" fg:x="1153" fg:w="39"/><text x="59.3479%" y="367.50">Z..</text></g><g><title>mi_free (12 samples, 0.62%)</title><rect x="61.0969%" y="437" width="0.6151%" height="15" fill="rgb(205,140,8)" fg:x="1192" fg:w="12"/><text x="61.3469%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (12 samples, 0.62%)</title><rect x="62.2245%" y="421" width="0.6151%" height="15" fill="rgb(228,84,46)" fg:x="1214" fg:w="12"/><text x="62.4745%" y="431.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.36%)</title><rect x="62.4808%" y="405" width="0.3588%" height="15" fill="rgb(254,188,9)" fg:x="1219" fg:w="7"/><text x="62.7308%" y="415.50"></text></g><g><title>simdutf8::implementation::x86::avx2::validate_utf8_basic (26 samples, 1.33%)</title><rect x="62.8396%" y="421" width="1.3326%" height="15" fill="rgb(206,112,54)" fg:x="1226" fg:w="26"/><text x="63.0896%" y="431.50"></text></g><g><title>__memmove_avx_unaligned (1 samples, 0.05%)</title><rect x="64.1210%" y="405" width="0.0513%" height="15" fill="rgb(216,84,49)" fg:x="1251" fg:w="1"/><text x="64.3710%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1 samples, 0.05%)</title><rect x="65.9662%" y="309" width="0.0513%" height="15" fill="rgb(214,194,35)" fg:x="1287" fg:w="1"/><text x="66.2162%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.05%)</title><rect x="65.9662%" y="293" width="0.0513%" height="15" fill="rgb(249,28,3)" fg:x="1287" fg:w="1"/><text x="66.2162%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (17 samples, 0.87%)</title><rect x="65.5561%" y="357" width="0.8713%" height="15" fill="rgb(222,56,52)" fg:x="1279" fg:w="17"/><text x="65.8061%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (17 samples, 0.87%)</title><rect x="65.5561%" y="341" width="0.8713%" height="15" fill="rgb(245,217,50)" fg:x="1279" fg:w="17"/><text x="65.8061%" y="351.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.87%)</title><rect x="65.5561%" y="325" width="0.8713%" height="15" fill="rgb(213,201,24)" fg:x="1279" fg:w="17"/><text x="65.8061%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (8 samples, 0.41%)</title><rect x="66.0174%" y="309" width="0.4100%" height="15" fill="rgb(248,116,28)" fg:x="1288" fg:w="8"/><text x="66.2674%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.10%)</title><rect x="67.5551%" y="325" width="0.1025%" height="15" fill="rgb(219,72,43)" fg:x="1318" fg:w="2"/><text x="67.8051%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="67.6064%" y="309" width="0.0513%" height="15" fill="rgb(209,138,14)" fg:x="1319" fg:w="1"/><text x="67.8564%" y="319.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="67.6064%" y="293" width="0.0513%" height="15" fill="rgb(222,18,33)" fg:x="1319" fg:w="1"/><text x="67.8564%" y="303.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="67.6064%" y="277" width="0.0513%" height="15" fill="rgb(213,199,7)" fg:x="1319" fg:w="1"/><text x="67.8564%" y="287.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.05%)</title><rect x="67.6064%" y="261" width="0.0513%" height="15" fill="rgb(250,110,10)" fg:x="1319" fg:w="1"/><text x="67.8564%" y="271.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.05%)</title><rect x="67.6064%" y="245" width="0.0513%" height="15" fill="rgb(248,123,6)" fg:x="1319" fg:w="1"/><text x="67.8564%" y="255.50"></text></g><g><title>tick_sched_timer (1 samples, 0.05%)</title><rect x="67.6064%" y="229" width="0.0513%" height="15" fill="rgb(206,91,31)" fg:x="1319" fg:w="1"/><text x="67.8564%" y="239.50"></text></g><g><title>tick_sched_handle (1 samples, 0.05%)</title><rect x="67.6064%" y="213" width="0.0513%" height="15" fill="rgb(211,154,13)" fg:x="1319" fg:w="1"/><text x="67.8564%" y="223.50"></text></g><g><title>account_process_tick (1 samples, 0.05%)</title><rect x="67.6064%" y="197" width="0.0513%" height="15" fill="rgb(225,148,7)" fg:x="1319" fg:w="1"/><text x="67.8564%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.15%)</title><rect x="67.6576%" y="325" width="0.1538%" height="15" fill="rgb(220,160,43)" fg:x="1320" fg:w="3"/><text x="67.9076%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.15%)</title><rect x="67.6576%" y="309" width="0.1538%" height="15" fill="rgb(213,52,39)" fg:x="1320" fg:w="3"/><text x="67.9076%" y="319.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (1 samples, 0.05%)</title><rect x="68.9903%" y="245" width="0.0513%" height="15" fill="rgb(243,137,7)" fg:x="1346" fg:w="1"/><text x="69.2403%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.10%)</title><rect x="69.3491%" y="229" width="0.1025%" height="15" fill="rgb(230,79,13)" fg:x="1353" fg:w="2"/><text x="69.5991%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.41%)</title><rect x="69.4516%" y="213" width="0.4100%" height="15" fill="rgb(247,105,23)" fg:x="1355" fg:w="8"/><text x="69.7016%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.62%)</title><rect x="69.4516%" y="229" width="0.6151%" height="15" fill="rgb(223,179,41)" fg:x="1355" fg:w="12"/><text x="69.7016%" y="239.50"></text></g><g><title>__memmove_avx_unaligned (4 samples, 0.21%)</title><rect x="69.8616%" y="213" width="0.2050%" height="15" fill="rgb(218,9,34)" fg:x="1363" fg:w="4"/><text x="70.1116%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (24 samples, 1.23%)</title><rect x="68.8877%" y="261" width="1.2301%" height="15" fill="rgb(222,106,8)" fg:x="1344" fg:w="24"/><text x="69.1377%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (21 samples, 1.08%)</title><rect x="69.0415%" y="245" width="1.0764%" height="15" fill="rgb(211,220,0)" fg:x="1347" fg:w="21"/><text x="69.2915%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.05%)</title><rect x="70.0666%" y="229" width="0.0513%" height="15" fill="rgb(229,52,16)" fg:x="1367" fg:w="1"/><text x="70.3166%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.05%)</title><rect x="70.0666%" y="213" width="0.0513%" height="15" fill="rgb(212,155,18)" fg:x="1367" fg:w="1"/><text x="70.3166%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.10%)</title><rect x="70.1179%" y="261" width="0.1025%" height="15" fill="rgb(242,21,14)" fg:x="1368" fg:w="2"/><text x="70.3679%" y="271.50"></text></g><g><title>__entry_text_start (46 samples, 2.36%)</title><rect x="71.8606%" y="181" width="2.3578%" height="15" fill="rgb(222,19,48)" fg:x="1402" fg:w="46"/><text x="72.1106%" y="191.50">_..</text></g><g><title>do_syscall_64 (1 samples, 0.05%)</title><rect x="74.2183%" y="181" width="0.0513%" height="15" fill="rgb(232,45,27)" fg:x="1448" fg:w="1"/><text x="74.4683%" y="191.50"></text></g><g><title>__x64_sys_write (22 samples, 1.13%)</title><rect x="74.5259%" y="165" width="1.1276%" height="15" fill="rgb(249,103,42)" fg:x="1454" fg:w="22"/><text x="74.7759%" y="175.50"></text></g><g><title>__x86_indirect_thunk_rax (2 samples, 0.10%)</title><rect x="75.6535%" y="165" width="0.1025%" height="15" fill="rgb(246,81,33)" fg:x="1476" fg:w="2"/><text x="75.9035%" y="175.50"></text></g><g><title>__fdget_pos (1 samples, 0.05%)</title><rect x="76.1148%" y="117" width="0.0513%" height="15" fill="rgb(252,33,42)" fg:x="1485" fg:w="1"/><text x="76.3648%" y="127.50"></text></g><g><title>__fget_light (23 samples, 1.18%)</title><rect x="76.1661%" y="117" width="1.1789%" height="15" fill="rgb(209,212,41)" fg:x="1486" fg:w="23"/><text x="76.4161%" y="127.50"></text></g><g><title>__fsnotify_parent (1 samples, 0.05%)</title><rect x="77.3450%" y="117" width="0.0513%" height="15" fill="rgb(207,154,6)" fg:x="1509" fg:w="1"/><text x="77.5950%" y="127.50"></text></g><g><title>rw_verify_area (7 samples, 0.36%)</title><rect x="77.3962%" y="117" width="0.3588%" height="15" fill="rgb(223,64,47)" fg:x="1510" fg:w="7"/><text x="77.6462%" y="127.50"></text></g><g><title>__cond_resched (2 samples, 0.10%)</title><rect x="79.2927%" y="85" width="0.1025%" height="15" fill="rgb(211,161,38)" fg:x="1547" fg:w="2"/><text x="79.5427%" y="95.50"></text></g><g><title>lockref_get_not_zero (15 samples, 0.77%)</title><rect x="79.6002%" y="69" width="0.7688%" height="15" fill="rgb(219,138,40)" fg:x="1553" fg:w="15"/><text x="79.8502%" y="79.50"></text></g><g><title>dget_parent (20 samples, 1.03%)</title><rect x="79.3952%" y="85" width="1.0251%" height="15" fill="rgb(241,228,46)" fg:x="1549" fg:w="20"/><text x="79.6452%" y="95.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.05%)</title><rect x="80.3690%" y="69" width="0.0513%" height="15" fill="rgb(223,209,38)" fg:x="1568" fg:w="1"/><text x="80.6190%" y="79.50"></text></g><g><title>__cond_resched (1 samples, 0.05%)</title><rect x="80.4716%" y="69" width="0.0513%" height="15" fill="rgb(236,164,45)" fg:x="1570" fg:w="1"/><text x="80.7216%" y="79.50"></text></g><g><title>dput (7 samples, 0.36%)</title><rect x="80.4203%" y="85" width="0.3588%" height="15" fill="rgb(231,15,5)" fg:x="1569" fg:w="7"/><text x="80.6703%" y="95.50"></text></g><g><title>rcu_all_qs (5 samples, 0.26%)</title><rect x="80.5228%" y="69" width="0.2563%" height="15" fill="rgb(252,35,15)" fg:x="1571" fg:w="5"/><text x="80.7728%" y="79.50"></text></g><g><title>fsnotify (7 samples, 0.36%)</title><rect x="80.7791%" y="85" width="0.3588%" height="15" fill="rgb(248,181,18)" fg:x="1576" fg:w="7"/><text x="81.0291%" y="95.50"></text></g><g><title>lockref_get_not_zero (2 samples, 0.10%)</title><rect x="81.1379%" y="85" width="0.1025%" height="15" fill="rgb(233,39,42)" fg:x="1583" fg:w="2"/><text x="81.3879%" y="95.50"></text></g><g><title>lockref_put_return (12 samples, 0.62%)</title><rect x="81.2404%" y="85" width="0.6151%" height="15" fill="rgb(238,110,33)" fg:x="1585" fg:w="12"/><text x="81.4904%" y="95.50"></text></g><g><title>__fsnotify_parent (70 samples, 3.59%)</title><rect x="78.5751%" y="101" width="3.5879%" height="15" fill="rgb(233,195,10)" fg:x="1533" fg:w="70"/><text x="78.8251%" y="111.50">__fs..</text></g><g><title>rcu_read_unlock_strict (6 samples, 0.31%)</title><rect x="81.8555%" y="85" width="0.3075%" height="15" fill="rgb(254,105,3)" fg:x="1597" fg:w="6"/><text x="82.1055%" y="95.50"></text></g><g><title>apparmor_file_permission (12 samples, 0.62%)</title><rect x="82.2655%" y="85" width="0.6151%" height="15" fill="rgb(221,225,9)" fg:x="1605" fg:w="12"/><text x="82.5155%" y="95.50"></text></g><g><title>vfs_write (126 samples, 6.46%)</title><rect x="77.7550%" y="117" width="6.4582%" height="15" fill="rgb(224,227,45)" fg:x="1517" fg:w="126"/><text x="78.0050%" y="127.50">vfs_write</text></g><g><title>rw_verify_area (40 samples, 2.05%)</title><rect x="82.1630%" y="101" width="2.0502%" height="15" fill="rgb(229,198,43)" fg:x="1603" fg:w="40"/><text x="82.4130%" y="111.50">r..</text></g><g><title>security_file_permission (26 samples, 1.33%)</title><rect x="82.8806%" y="85" width="1.3326%" height="15" fill="rgb(206,209,35)" fg:x="1617" fg:w="26"/><text x="83.1306%" y="95.50"></text></g><g><title>apparmor_file_permission (24 samples, 1.23%)</title><rect x="82.9831%" y="69" width="1.2301%" height="15" fill="rgb(245,195,53)" fg:x="1619" fg:w="24"/><text x="83.2331%" y="79.50"></text></g><g><title>aa_file_perm (7 samples, 0.36%)</title><rect x="83.8544%" y="53" width="0.3588%" height="15" fill="rgb(240,92,26)" fg:x="1636" fg:w="7"/><text x="84.1044%" y="63.50"></text></g><g><title>rcu_read_unlock_strict (2 samples, 0.10%)</title><rect x="84.1107%" y="37" width="0.1025%" height="15" fill="rgb(207,40,23)" fg:x="1641" fg:w="2"/><text x="84.3607%" y="47.50"></text></g><g><title>__x64_sys_write (199 samples, 10.20%)</title><rect x="75.7560%" y="149" width="10.1999%" height="15" fill="rgb(223,111,35)" fg:x="1478" fg:w="199"/><text x="76.0060%" y="159.50">__x64_sys_write</text></g><g><title>ksys_write (199 samples, 10.20%)</title><rect x="75.7560%" y="133" width="10.1999%" height="15" fill="rgb(229,147,28)" fg:x="1478" fg:w="199"/><text x="76.0060%" y="143.50">ksys_write</text></g><g><title>write_null (34 samples, 1.74%)</title><rect x="84.2132%" y="117" width="1.7427%" height="15" fill="rgb(211,29,28)" fg:x="1643" fg:w="34"/><text x="84.4632%" y="127.50"></text></g><g><title>ksys_write (1 samples, 0.05%)</title><rect x="85.9559%" y="149" width="0.0513%" height="15" fill="rgb(228,72,33)" fg:x="1677" fg:w="1"/><text x="86.2059%" y="159.50"></text></g><g><title>syscall_enter_from_user_mode (3 samples, 0.15%)</title><rect x="86.0072%" y="149" width="0.1538%" height="15" fill="rgb(205,214,31)" fg:x="1678" fg:w="3"/><text x="86.2572%" y="159.50"></text></g><g><title>exit_to_user_mode_prepare (28 samples, 1.44%)</title><rect x="86.3660%" y="133" width="1.4352%" height="15" fill="rgb(224,111,15)" fg:x="1685" fg:w="28"/><text x="86.6160%" y="143.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.05%)</title><rect x="87.7499%" y="117" width="0.0513%" height="15" fill="rgb(253,21,26)" fg:x="1712" fg:w="1"/><text x="87.9999%" y="127.50"></text></g><g><title>do_syscall_64 (236 samples, 12.10%)</title><rect x="75.7560%" y="165" width="12.0964%" height="15" fill="rgb(245,139,43)" fg:x="1478" fg:w="236"/><text x="76.0060%" y="175.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (33 samples, 1.69%)</title><rect x="86.1609%" y="149" width="1.6914%" height="15" fill="rgb(252,170,7)" fg:x="1681" fg:w="33"/><text x="86.4109%" y="159.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.05%)</title><rect x="87.8011%" y="133" width="0.0513%" height="15" fill="rgb(231,118,14)" fg:x="1713" fg:w="1"/><text x="88.0511%" y="143.50"></text></g><g><title>syscall_enter_from_user_mode (2 samples, 0.10%)</title><rect x="87.8524%" y="165" width="0.1025%" height="15" fill="rgb(238,83,0)" fg:x="1714" fg:w="2"/><text x="88.1024%" y="175.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (268 samples, 13.74%)</title><rect x="74.2696%" y="181" width="13.7365%" height="15" fill="rgb(221,39,39)" fg:x="1449" fg:w="268"/><text x="74.5196%" y="191.50">entry_SYSCALL_64_afte..</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.05%)</title><rect x="87.9549%" y="165" width="0.0513%" height="15" fill="rgb(222,119,46)" fg:x="1716" fg:w="1"/><text x="88.2049%" y="175.50"></text></g><g><title>__GI___write (336 samples, 17.22%)</title><rect x="70.8867%" y="197" width="17.2219%" height="15" fill="rgb(222,165,49)" fg:x="1383" fg:w="336"/><text x="71.1367%" y="207.50">__GI___write</text></g><g><title>syscall_return_via_sysret (2 samples, 0.10%)</title><rect x="88.0062%" y="181" width="0.1025%" height="15" fill="rgb(219,113,52)" fg:x="1717" fg:w="2"/><text x="88.2562%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (340 samples, 17.43%)</title><rect x="70.7842%" y="245" width="17.4270%" height="15" fill="rgb(214,7,15)" fg:x="1381" fg:w="340"/><text x="71.0342%" y="255.50">&lt;std::io::stdio::StdoutRaw ..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (340 samples, 17.43%)</title><rect x="70.7842%" y="229" width="17.4270%" height="15" fill="rgb(235,32,4)" fg:x="1381" fg:w="340"/><text x="71.0342%" y="239.50">&lt;std::sys::unix::stdio::Std..</text></g><g><title>std::sys::unix::fd::FileDesc::write (340 samples, 17.43%)</title><rect x="70.7842%" y="213" width="17.4270%" height="15" fill="rgb(238,90,54)" fg:x="1381" fg:w="340"/><text x="71.0342%" y="223.50">std::sys::unix::fd::FileDes..</text></g><g><title>std::sys::unix::cvt (2 samples, 0.10%)</title><rect x="88.1087%" y="197" width="0.1025%" height="15" fill="rgb(213,208,19)" fg:x="1719" fg:w="2"/><text x="88.3587%" y="207.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (2 samples, 0.10%)</title><rect x="88.1087%" y="181" width="0.1025%" height="15" fill="rgb(233,156,4)" fg:x="1719" fg:w="2"/><text x="88.3587%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::done (3 samples, 0.15%)</title><rect x="88.2112%" y="245" width="0.1538%" height="15" fill="rgb(207,194,5)" fg:x="1721" fg:w="3"/><text x="88.4612%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (355 samples, 18.20%)</title><rect x="70.2204%" y="261" width="18.1958%" height="15" fill="rgb(206,111,30)" fg:x="1370" fg:w="355"/><text x="70.4704%" y="271.50">std::io::buffered::bufwriter..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::remaining (1 samples, 0.05%)</title><rect x="88.3649%" y="245" width="0.0513%" height="15" fill="rgb(243,70,54)" fg:x="1724" fg:w="1"/><text x="88.6149%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.05%)</title><rect x="88.3649%" y="229" width="0.0513%" height="15" fill="rgb(242,28,8)" fg:x="1724" fg:w="1"/><text x="88.6149%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.05%)</title><rect x="88.3649%" y="213" width="0.0513%" height="15" fill="rgb(219,106,18)" fg:x="1724" fg:w="1"/><text x="88.6149%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.05%)</title><rect x="88.3649%" y="197" width="0.0513%" height="15" fill="rgb(244,222,10)" fg:x="1724" fg:w="1"/><text x="88.6149%" y="207.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (1 samples, 0.05%)</title><rect x="88.4162%" y="261" width="0.0513%" height="15" fill="rgb(236,179,52)" fg:x="1725" fg:w="1"/><text x="88.6662%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.05%)</title><rect x="88.4162%" y="245" width="0.0513%" height="15" fill="rgb(213,23,39)" fg:x="1725" fg:w="1"/><text x="88.6662%" y="255.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (409 samples, 20.96%)</title><rect x="68.8877%" y="293" width="20.9636%" height="15" fill="rgb(238,48,10)" fg:x="1344" fg:w="409"/><text x="69.1377%" y="303.50">&lt;std::io::buffered::linewriter::L..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (409 samples, 20.96%)</title><rect x="68.8877%" y="277" width="20.9636%" height="15" fill="rgb(251,196,23)" fg:x="1344" fg:w="409"/><text x="69.1377%" y="287.50">&lt;std::io::buffered::linewritershi..</text></g><g><title>std::sys_common::memchr::memrchr (27 samples, 1.38%)</title><rect x="88.4675%" y="261" width="1.3839%" height="15" fill="rgb(250,152,24)" fg:x="1726" fg:w="27"/><text x="88.7175%" y="271.50"></text></g><g><title>std::sys::unix::memchr::memrchr (27 samples, 1.38%)</title><rect x="88.4675%" y="245" width="1.3839%" height="15" fill="rgb(209,150,17)" fg:x="1726" fg:w="27"/><text x="88.7175%" y="255.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (27 samples, 1.38%)</title><rect x="88.4675%" y="229" width="1.3839%" height="15" fill="rgb(234,202,34)" fg:x="1726" fg:w="27"/><text x="88.7175%" y="239.50"></text></g><g><title>__memrchr_avx2 (27 samples, 1.38%)</title><rect x="88.4675%" y="213" width="1.3839%" height="15" fill="rgb(253,148,53)" fg:x="1726" fg:w="27"/><text x="88.7175%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (428 samples, 21.94%)</title><rect x="68.2727%" y="309" width="21.9375%" height="15" fill="rgb(218,129,16)" fg:x="1332" fg:w="428"/><text x="68.5227%" y="319.50">&lt;std::io::stdio::StdoutLock as std:..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (7 samples, 0.36%)</title><rect x="89.8514%" y="293" width="0.3588%" height="15" fill="rgb(216,85,19)" fg:x="1753" fg:w="7"/><text x="90.1014%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (7 samples, 0.36%)</title><rect x="89.8514%" y="277" width="0.3588%" height="15" fill="rgb(235,228,7)" fg:x="1753" fg:w="7"/><text x="90.1014%" y="287.50"></text></g><g><title>core::cell::BorrowRefMut::new (7 samples, 0.36%)</title><rect x="89.8514%" y="261" width="0.3588%" height="15" fill="rgb(245,175,0)" fg:x="1753" fg:w="7"/><text x="90.1014%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.15%)</title><rect x="90.0564%" y="245" width="0.1538%" height="15" fill="rgb(208,168,36)" fg:x="1757" fg:w="3"/><text x="90.3064%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.15%)</title><rect x="90.0564%" y="229" width="0.1538%" height="15" fill="rgb(246,171,24)" fg:x="1757" fg:w="3"/><text x="90.3064%" y="239.50"></text></g><g><title>core::mem::replace (3 samples, 0.15%)</title><rect x="90.0564%" y="213" width="0.1538%" height="15" fill="rgb(215,142,24)" fg:x="1757" fg:w="3"/><text x="90.3064%" y="223.50"></text></g><g><title>core::ptr::write (3 samples, 0.15%)</title><rect x="90.0564%" y="197" width="0.1538%" height="15" fill="rgb(250,187,7)" fg:x="1757" fg:w="3"/><text x="90.3064%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (450 samples, 23.07%)</title><rect x="67.8114%" y="325" width="23.0651%" height="15" fill="rgb(228,66,33)" fg:x="1323" fg:w="450"/><text x="68.0614%" y="335.50">&lt;std::io::Write::write_fmt::Adapter&lt;T..</text></g><g><title>__GI___write (13 samples, 0.67%)</title><rect x="90.2101%" y="309" width="0.6663%" height="15" fill="rgb(234,215,21)" fg:x="1760" fg:w="13"/><text x="90.4601%" y="319.50"></text></g><g><title>__entry_text_start (13 samples, 0.67%)</title><rect x="90.2101%" y="293" width="0.6663%" height="15" fill="rgb(222,191,20)" fg:x="1760" fg:w="13"/><text x="90.4601%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.05%)</title><rect x="90.8765%" y="325" width="0.0513%" height="15" fill="rgb(245,79,54)" fg:x="1773" fg:w="1"/><text x="91.1265%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (482 samples, 24.71%)</title><rect x="66.4275%" y="357" width="24.7053%" height="15" fill="rgb(240,10,37)" fg:x="1296" fg:w="482"/><text x="66.6775%" y="367.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (473 samples, 24.24%)</title><rect x="66.8888%" y="341" width="24.2440%" height="15" fill="rgb(214,192,32)" fg:x="1305" fg:w="473"/><text x="67.1388%" y="351.50">core::fmt::write</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.21%)</title><rect x="90.9277%" y="325" width="0.2050%" height="15" fill="rgb(209,36,54)" fg:x="1774" fg:w="4"/><text x="91.1777%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.21%)</title><rect x="90.9277%" y="309" width="0.2050%" height="15" fill="rgb(220,10,11)" fg:x="1774" fg:w="4"/><text x="91.1777%" y="319.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (512 samples, 26.24%)</title><rect x="65.2998%" y="389" width="26.2430%" height="15" fill="rgb(221,106,17)" fg:x="1274" fg:w="512"/><text x="65.5498%" y="399.50">&lt;std::io::stdio::Stdout as std::io::Write&gt;..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (507 samples, 25.99%)</title><rect x="65.5561%" y="373" width="25.9867%" height="15" fill="rgb(251,142,44)" fg:x="1279" fg:w="507"/><text x="65.8061%" y="383.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write..</text></g><g><title>std::io::stdio::Stdout::lock (8 samples, 0.41%)</title><rect x="91.1328%" y="357" width="0.4100%" height="15" fill="rgb(238,13,15)" fg:x="1778" fg:w="8"/><text x="91.3828%" y="367.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (8 samples, 0.41%)</title><rect x="91.1328%" y="341" width="0.4100%" height="15" fill="rgb(208,107,27)" fg:x="1778" fg:w="8"/><text x="91.3828%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (7 samples, 0.36%)</title><rect x="91.1840%" y="325" width="0.3588%" height="15" fill="rgb(205,136,37)" fg:x="1779" fg:w="7"/><text x="91.4340%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.05%)</title><rect x="91.4915%" y="309" width="0.0513%" height="15" fill="rgb(250,205,27)" fg:x="1785" fg:w="1"/><text x="91.7415%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.05%)</title><rect x="91.4915%" y="293" width="0.0513%" height="15" fill="rgb(210,80,43)" fg:x="1785" fg:w="1"/><text x="91.7415%" y="303.50"></text></g><g><title>sfa::print_sequence (583 samples, 29.88%)</title><rect x="61.7119%" y="437" width="29.8821%" height="15" fill="rgb(247,160,36)" fg:x="1204" fg:w="583"/><text x="61.9619%" y="447.50">sfa::print_sequence</text></g><g><title>std::io::stdio::_print (535 samples, 27.42%)</title><rect x="64.1722%" y="421" width="27.4218%" height="15" fill="rgb(234,13,49)" fg:x="1252" fg:w="535"/><text x="64.4222%" y="431.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (513 samples, 26.29%)</title><rect x="65.2998%" y="405" width="26.2942%" height="15" fill="rgb(234,122,0)" fg:x="1274" fg:w="513"/><text x="65.5498%" y="415.50">std::io::stdio::print_to</text></g><g><title>std::io::stdio::stdout (1 samples, 0.05%)</title><rect x="91.5428%" y="389" width="0.0513%" height="15" fill="rgb(207,146,38)" fg:x="1786" fg:w="1"/><text x="91.7928%" y="399.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init_pin (1 samples, 0.05%)</title><rect x="91.5428%" y="373" width="0.0513%" height="15" fill="rgb(207,177,25)" fg:x="1786" fg:w="1"/><text x="91.7928%" y="383.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="91.5428%" y="357" width="0.0513%" height="15" fill="rgb(211,178,42)" fg:x="1786" fg:w="1"/><text x="91.7928%" y="367.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::is_initialized (1 samples, 0.05%)</title><rect x="91.5428%" y="341" width="0.0513%" height="15" fill="rgb(230,69,54)" fg:x="1786" fg:w="1"/><text x="91.7928%" y="351.50"></text></g><g><title>std::sync::once::Once::is_completed (1 samples, 0.05%)</title><rect x="91.5428%" y="325" width="0.0513%" height="15" fill="rgb(214,135,41)" fg:x="1786" fg:w="1"/><text x="91.7928%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (5 samples, 0.26%)</title><rect x="92.2091%" y="373" width="0.2563%" height="15" fill="rgb(237,67,25)" fg:x="1799" fg:w="5"/><text x="92.4591%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (5 samples, 0.26%)</title><rect x="92.2091%" y="357" width="0.2563%" height="15" fill="rgb(222,189,50)" fg:x="1799" fg:w="5"/><text x="92.4591%" y="367.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.26%)</title><rect x="92.2091%" y="341" width="0.2563%" height="15" fill="rgb(245,148,34)" fg:x="1799" fg:w="5"/><text x="92.4591%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1 samples, 0.05%)</title><rect x="92.4141%" y="325" width="0.0513%" height="15" fill="rgb(222,29,6)" fg:x="1803" fg:w="1"/><text x="92.6641%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.05%)</title><rect x="92.4141%" y="309" width="0.0513%" height="15" fill="rgb(221,189,43)" fg:x="1803" fg:w="1"/><text x="92.6641%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.10%)</title><rect x="92.6192%" y="341" width="0.1025%" height="15" fill="rgb(207,36,27)" fg:x="1807" fg:w="2"/><text x="92.8692%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="92.7217%" y="341" width="0.0513%" height="15" fill="rgb(217,90,24)" fg:x="1809" fg:w="1"/><text x="92.9717%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="92.7217%" y="325" width="0.0513%" height="15" fill="rgb(224,66,35)" fg:x="1809" fg:w="1"/><text x="92.9717%" y="335.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (3 samples, 0.15%)</title><rect x="93.2855%" y="261" width="0.1538%" height="15" fill="rgb(221,13,50)" fg:x="1820" fg:w="3"/><text x="93.5355%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (2 samples, 0.10%)</title><rect x="93.3368%" y="245" width="0.1025%" height="15" fill="rgb(236,68,49)" fg:x="1821" fg:w="2"/><text x="93.5868%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="93.5418%" y="245" width="0.0513%" height="15" fill="rgb(229,146,28)" fg:x="1825" fg:w="1"/><text x="93.7918%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.15%)</title><rect x="93.5930%" y="229" width="0.1538%" height="15" fill="rgb(225,31,38)" fg:x="1826" fg:w="3"/><text x="93.8430%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.21%)</title><rect x="93.5930%" y="245" width="0.2050%" height="15" fill="rgb(250,208,3)" fg:x="1826" fg:w="4"/><text x="93.8430%" y="255.50"></text></g><g><title>__memmove_avx_unaligned (1 samples, 0.05%)</title><rect x="93.7468%" y="229" width="0.0513%" height="15" fill="rgb(246,54,23)" fg:x="1829" fg:w="1"/><text x="93.9968%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (12 samples, 0.62%)</title><rect x="93.2855%" y="277" width="0.6151%" height="15" fill="rgb(243,76,11)" fg:x="1820" fg:w="12"/><text x="93.5355%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (9 samples, 0.46%)</title><rect x="93.4393%" y="261" width="0.4613%" height="15" fill="rgb(245,21,50)" fg:x="1823" fg:w="9"/><text x="93.6893%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.10%)</title><rect x="93.7981%" y="245" width="0.1025%" height="15" fill="rgb(228,9,43)" fg:x="1830" fg:w="2"/><text x="94.0481%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.10%)</title><rect x="93.7981%" y="229" width="0.1025%" height="15" fill="rgb(208,100,47)" fg:x="1830" fg:w="2"/><text x="94.0481%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.05%)</title><rect x="93.9006%" y="277" width="0.0513%" height="15" fill="rgb(232,26,8)" fg:x="1832" fg:w="1"/><text x="94.1506%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (10 samples, 0.51%)</title><rect x="94.1056%" y="213" width="0.5126%" height="15" fill="rgb(216,166,38)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="223.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (10 samples, 0.51%)</title><rect x="94.1056%" y="197" width="0.5126%" height="15" fill="rgb(251,202,51)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (10 samples, 0.51%)</title><rect x="94.1056%" y="181" width="0.5126%" height="15" fill="rgb(254,216,34)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="191.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (10 samples, 0.51%)</title><rect x="94.1056%" y="165" width="0.5126%" height="15" fill="rgb(251,32,27)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="175.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (10 samples, 0.51%)</title><rect x="94.1056%" y="149" width="0.5126%" height="15" fill="rgb(208,127,28)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.51%)</title><rect x="94.1056%" y="133" width="0.5126%" height="15" fill="rgb(224,137,22)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="143.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (10 samples, 0.51%)</title><rect x="94.1056%" y="117" width="0.5126%" height="15" fill="rgb(254,70,32)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="127.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (10 samples, 0.51%)</title><rect x="94.1056%" y="101" width="0.5126%" height="15" fill="rgb(229,75,37)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="111.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (10 samples, 0.51%)</title><rect x="94.1056%" y="85" width="0.5126%" height="15" fill="rgb(252,64,23)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="95.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (10 samples, 0.51%)</title><rect x="94.1056%" y="69" width="0.5126%" height="15" fill="rgb(232,162,48)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="79.50"></text></g><g><title>__GI___write (10 samples, 0.51%)</title><rect x="94.1056%" y="53" width="0.5126%" height="15" fill="rgb(246,160,12)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="63.50"></text></g><g><title>__entry_text_start (10 samples, 0.51%)</title><rect x="94.1056%" y="37" width="0.5126%" height="15" fill="rgb(247,166,0)" fg:x="1836" fg:w="10"/><text x="94.3556%" y="47.50"></text></g><g><title>__x64_sys_write (3 samples, 0.15%)</title><rect x="94.8744%" y="181" width="0.1538%" height="15" fill="rgb(249,219,21)" fg:x="1851" fg:w="3"/><text x="95.1244%" y="191.50"></text></g><g><title>__fget_light (5 samples, 0.26%)</title><rect x="95.1307%" y="133" width="0.2563%" height="15" fill="rgb(205,209,3)" fg:x="1856" fg:w="5"/><text x="95.3807%" y="143.50"></text></g><g><title>rw_verify_area (2 samples, 0.10%)</title><rect x="95.3870%" y="133" width="0.1025%" height="15" fill="rgb(243,44,1)" fg:x="1861" fg:w="2"/><text x="95.6370%" y="143.50"></text></g><g><title>dget_parent (3 samples, 0.15%)</title><rect x="95.7970%" y="101" width="0.1538%" height="15" fill="rgb(206,159,16)" fg:x="1869" fg:w="3"/><text x="96.0470%" y="111.50"></text></g><g><title>lockref_get_not_zero (2 samples, 0.10%)</title><rect x="95.8483%" y="85" width="0.1025%" height="15" fill="rgb(244,77,30)" fg:x="1870" fg:w="2"/><text x="96.0983%" y="95.50"></text></g><g><title>dput (2 samples, 0.10%)</title><rect x="95.9508%" y="101" width="0.1025%" height="15" fill="rgb(218,69,12)" fg:x="1872" fg:w="2"/><text x="96.2008%" y="111.50"></text></g><g><title>rcu_all_qs (1 samples, 0.05%)</title><rect x="96.0021%" y="85" width="0.0513%" height="15" fill="rgb(212,87,7)" fg:x="1873" fg:w="1"/><text x="96.2521%" y="95.50"></text></g><g><title>fsnotify (5 samples, 0.26%)</title><rect x="96.0533%" y="101" width="0.2563%" height="15" fill="rgb(245,114,25)" fg:x="1874" fg:w="5"/><text x="96.3033%" y="111.50"></text></g><g><title>__fsnotify_parent (17 samples, 0.87%)</title><rect x="95.5920%" y="117" width="0.8713%" height="15" fill="rgb(210,61,42)" fg:x="1865" fg:w="17"/><text x="95.8420%" y="127.50"></text></g><g><title>rcu_read_unlock_strict (3 samples, 0.15%)</title><rect x="96.3096%" y="101" width="0.1538%" height="15" fill="rgb(211,52,33)" fg:x="1879" fg:w="3"/><text x="96.5596%" y="111.50"></text></g><g><title>dget_parent (1 samples, 0.05%)</title><rect x="96.4634%" y="117" width="0.0513%" height="15" fill="rgb(234,58,33)" fg:x="1882" fg:w="1"/><text x="96.7134%" y="127.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.05%)</title><rect x="96.5146%" y="101" width="0.0513%" height="15" fill="rgb(220,115,36)" fg:x="1883" fg:w="1"/><text x="96.7646%" y="111.50"></text></g><g><title>apparmor_file_permission (2 samples, 0.10%)</title><rect x="96.5659%" y="101" width="0.1025%" height="15" fill="rgb(243,153,54)" fg:x="1884" fg:w="2"/><text x="96.8159%" y="111.50"></text></g><g><title>aa_file_perm (1 samples, 0.05%)</title><rect x="96.6684%" y="85" width="0.0513%" height="15" fill="rgb(251,47,18)" fg:x="1886" fg:w="1"/><text x="96.9184%" y="95.50"></text></g><g><title>aa_file_perm (1 samples, 0.05%)</title><rect x="96.8221%" y="69" width="0.0513%" height="15" fill="rgb(242,102,42)" fg:x="1889" fg:w="1"/><text x="97.0721%" y="79.50"></text></g><g><title>rw_verify_area (8 samples, 0.41%)</title><rect x="96.5146%" y="117" width="0.4100%" height="15" fill="rgb(234,31,38)" fg:x="1883" fg:w="8"/><text x="96.7646%" y="127.50"></text></g><g><title>security_file_permission (5 samples, 0.26%)</title><rect x="96.6684%" y="101" width="0.2563%" height="15" fill="rgb(221,117,51)" fg:x="1886" fg:w="5"/><text x="96.9184%" y="111.50"></text></g><g><title>apparmor_file_permission (4 samples, 0.21%)</title><rect x="96.7196%" y="85" width="0.2050%" height="15" fill="rgb(212,20,18)" fg:x="1887" fg:w="4"/><text x="96.9696%" y="95.50"></text></g><g><title>rcu_read_unlock_strict (1 samples, 0.05%)</title><rect x="96.8734%" y="69" width="0.0513%" height="15" fill="rgb(245,133,36)" fg:x="1890" fg:w="1"/><text x="97.1234%" y="79.50"></text></g><g><title>vfs_write (29 samples, 1.49%)</title><rect x="95.4895%" y="133" width="1.4864%" height="15" fill="rgb(212,6,19)" fg:x="1863" fg:w="29"/><text x="95.7395%" y="143.50"></text></g><g><title>security_file_permission (1 samples, 0.05%)</title><rect x="96.9247%" y="117" width="0.0513%" height="15" fill="rgb(218,1,36)" fg:x="1891" fg:w="1"/><text x="97.1747%" y="127.50"></text></g><g><title>__x64_sys_write (44 samples, 2.26%)</title><rect x="95.0282%" y="165" width="2.2553%" height="15" fill="rgb(246,84,54)" fg:x="1854" fg:w="44"/><text x="95.2782%" y="175.50">_..</text></g><g><title>ksys_write (44 samples, 2.26%)</title><rect x="95.0282%" y="149" width="2.2553%" height="15" fill="rgb(242,110,6)" fg:x="1854" fg:w="44"/><text x="95.2782%" y="159.50">k..</text></g><g><title>write_null (6 samples, 0.31%)</title><rect x="96.9759%" y="133" width="0.3075%" height="15" fill="rgb(214,47,5)" fg:x="1892" fg:w="6"/><text x="97.2259%" y="143.50"></text></g><g><title>ksys_write (3 samples, 0.15%)</title><rect x="97.2834%" y="165" width="0.1538%" height="15" fill="rgb(218,159,25)" fg:x="1898" fg:w="3"/><text x="97.5334%" y="175.50"></text></g><g><title>__GI___write (63 samples, 3.23%)</title><rect x="94.6181%" y="213" width="3.2291%" height="15" fill="rgb(215,211,28)" fg:x="1846" fg:w="63"/><text x="94.8681%" y="223.50">__G..</text></g><g><title>entry_SYSCALL_64_after_hwframe (59 samples, 3.02%)</title><rect x="94.8232%" y="197" width="3.0241%" height="15" fill="rgb(238,59,32)" fg:x="1850" fg:w="59"/><text x="95.0732%" y="207.50">ent..</text></g><g><title>do_syscall_64 (55 samples, 2.82%)</title><rect x="95.0282%" y="181" width="2.8191%" height="15" fill="rgb(226,82,3)" fg:x="1854" fg:w="55"/><text x="95.2782%" y="191.50">do..</text></g><g><title>syscall_exit_to_user_mode (8 samples, 0.41%)</title><rect x="97.4372%" y="165" width="0.4100%" height="15" fill="rgb(240,164,32)" fg:x="1901" fg:w="8"/><text x="97.6872%" y="175.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.31%)</title><rect x="97.5397%" y="149" width="0.3075%" height="15" fill="rgb(232,46,7)" fg:x="1903" fg:w="6"/><text x="97.7897%" y="159.50"></text></g><g><title>fpregs_assert_state_consistent (2 samples, 0.10%)</title><rect x="97.7447%" y="133" width="0.1025%" height="15" fill="rgb(229,129,53)" fg:x="1907" fg:w="2"/><text x="97.9947%" y="143.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (77 samples, 3.95%)</title><rect x="93.9518%" y="277" width="3.9467%" height="15" fill="rgb(234,188,29)" fg:x="1833" fg:w="77"/><text x="94.2018%" y="287.50">std:..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (74 samples, 3.79%)</title><rect x="94.1056%" y="261" width="3.7929%" height="15" fill="rgb(246,141,4)" fg:x="1836" fg:w="74"/><text x="94.3556%" y="271.50">&lt;std..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (74 samples, 3.79%)</title><rect x="94.1056%" y="245" width="3.7929%" height="15" fill="rgb(229,23,39)" fg:x="1836" fg:w="74"/><text x="94.3556%" y="255.50">&lt;std..</text></g><g><title>std::sys::unix::fd::FileDesc::write (74 samples, 3.79%)</title><rect x="94.1056%" y="229" width="3.7929%" height="15" fill="rgb(206,12,3)" fg:x="1836" fg:w="74"/><text x="94.3556%" y="239.50">std:..</text></g><g><title>std::sys::unix::cvt (1 samples, 0.05%)</title><rect x="97.8473%" y="213" width="0.0513%" height="15" fill="rgb(252,226,20)" fg:x="1909" fg:w="1"/><text x="98.0973%" y="223.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.05%)</title><rect x="97.8473%" y="197" width="0.0513%" height="15" fill="rgb(216,123,35)" fg:x="1909" fg:w="1"/><text x="98.0973%" y="207.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (2 samples, 0.10%)</title><rect x="97.8985%" y="277" width="0.1025%" height="15" fill="rgb(212,68,40)" fg:x="1910" fg:w="2"/><text x="98.1485%" y="287.50"></text></g><g><title>__memrchr_avx2 (10 samples, 0.51%)</title><rect x="98.0010%" y="229" width="0.5126%" height="15" fill="rgb(254,125,32)" fg:x="1912" fg:w="10"/><text x="98.2510%" y="239.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (104 samples, 5.33%)</title><rect x="93.2855%" y="309" width="5.3306%" height="15" fill="rgb(253,97,22)" fg:x="1820" fg:w="104"/><text x="93.5355%" y="319.50">&lt;std::i..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (104 samples, 5.33%)</title><rect x="93.2855%" y="293" width="5.3306%" height="15" fill="rgb(241,101,14)" fg:x="1820" fg:w="104"/><text x="93.5355%" y="303.50">&lt;std::i..</text></g><g><title>std::sys_common::memchr::memrchr (12 samples, 0.62%)</title><rect x="98.0010%" y="277" width="0.6151%" height="15" fill="rgb(238,103,29)" fg:x="1912" fg:w="12"/><text x="98.2510%" y="287.50"></text></g><g><title>std::sys::unix::memchr::memrchr (12 samples, 0.62%)</title><rect x="98.0010%" y="261" width="0.6151%" height="15" fill="rgb(233,195,47)" fg:x="1912" fg:w="12"/><text x="98.2510%" y="271.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (12 samples, 0.62%)</title><rect x="98.0010%" y="245" width="0.6151%" height="15" fill="rgb(246,218,30)" fg:x="1912" fg:w="12"/><text x="98.2510%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.10%)</title><rect x="98.5136%" y="229" width="0.1025%" height="15" fill="rgb(219,145,47)" fg:x="1922" fg:w="2"/><text x="98.7636%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.10%)</title><rect x="98.5136%" y="213" width="0.1025%" height="15" fill="rgb(243,12,26)" fg:x="1922" fg:w="2"/><text x="98.7636%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (116 samples, 5.95%)</title><rect x="92.7729%" y="341" width="5.9457%" height="15" fill="rgb(214,87,16)" fg:x="1810" fg:w="116"/><text x="93.0229%" y="351.50">&lt;std::io..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (112 samples, 5.74%)</title><rect x="92.9780%" y="325" width="5.7406%" height="15" fill="rgb(208,99,42)" fg:x="1814" fg:w="112"/><text x="93.2280%" y="335.50">&lt;std::i..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.10%)</title><rect x="98.6161%" y="309" width="0.1025%" height="15" fill="rgb(253,99,2)" fg:x="1924" fg:w="2"/><text x="98.8661%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.10%)</title><rect x="98.6161%" y="293" width="0.1025%" height="15" fill="rgb(220,168,23)" fg:x="1924" fg:w="2"/><text x="98.8661%" y="303.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.10%)</title><rect x="98.6161%" y="277" width="0.1025%" height="15" fill="rgb(242,38,24)" fg:x="1924" fg:w="2"/><text x="98.8661%" y="287.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.05%)</title><rect x="98.7186%" y="341" width="0.0513%" height="15" fill="rgb(225,182,9)" fg:x="1926" fg:w="1"/><text x="98.9686%" y="351.50"></text></g><g><title>std::io::Write::write_fmt (128 samples, 6.56%)</title><rect x="92.4654%" y="373" width="6.5607%" height="15" fill="rgb(243,178,37)" fg:x="1804" fg:w="128"/><text x="92.7154%" y="383.50">std::io::..</text></g><g><title>core::fmt::write (126 samples, 6.46%)</title><rect x="92.5679%" y="357" width="6.4582%" height="15" fill="rgb(232,139,19)" fg:x="1806" fg:w="126"/><text x="92.8179%" y="367.50">core::fm..</text></g><g><title>core::fmt::Formatter::pad (5 samples, 0.26%)</title><rect x="98.7699%" y="341" width="0.2563%" height="15" fill="rgb(225,201,24)" fg:x="1927" fg:w="5"/><text x="99.0199%" y="351.50"></text></g><g><title>_start (1,653 samples, 84.73%)</title><rect x="14.3516%" y="533" width="84.7258%" height="15" fill="rgb(221,47,46)" fg:x="280" fg:w="1653"/><text x="14.6016%" y="543.50">_start</text></g><g><title>__libc_start_main_alias_2 (1,653 samples, 84.73%)</title><rect x="14.3516%" y="517" width="84.7258%" height="15" fill="rgb(249,23,13)" fg:x="280" fg:w="1653"/><text x="14.6016%" y="527.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (1,653 samples, 84.73%)</title><rect x="14.3516%" y="501" width="84.7258%" height="15" fill="rgb(219,9,5)" fg:x="280" fg:w="1653"/><text x="14.6016%" y="511.50">__libc_start_call_main</text></g><g><title>main (1,649 samples, 84.52%)</title><rect x="14.5566%" y="485" width="84.5208%" height="15" fill="rgb(254,171,16)" fg:x="284" fg:w="1649"/><text x="14.8066%" y="495.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,649 samples, 84.52%)</title><rect x="14.5566%" y="469" width="84.5208%" height="15" fill="rgb(230,171,20)" fg:x="284" fg:w="1649"/><text x="14.8066%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sfa::main (1,649 samples, 84.52%)</title><rect x="14.5566%" y="453" width="84.5208%" height="15" fill="rgb(210,71,41)" fg:x="284" fg:w="1649"/><text x="14.8066%" y="463.50">sfa::main</text></g><g><title>std::io::stdio::_print (146 samples, 7.48%)</title><rect x="91.5941%" y="437" width="7.4833%" height="15" fill="rgb(206,173,20)" fg:x="1787" fg:w="146"/><text x="91.8441%" y="447.50">std::io::s..</text></g><g><title>std::io::stdio::print_to (135 samples, 6.92%)</title><rect x="92.1579%" y="421" width="6.9195%" height="15" fill="rgb(233,88,34)" fg:x="1798" fg:w="135"/><text x="92.4079%" y="431.50">std::io::..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (135 samples, 6.92%)</title><rect x="92.1579%" y="405" width="6.9195%" height="15" fill="rgb(223,209,46)" fg:x="1798" fg:w="135"/><text x="92.4079%" y="415.50">&lt;std::io:..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (134 samples, 6.87%)</title><rect x="92.2091%" y="389" width="6.8683%" height="15" fill="rgb(250,43,18)" fg:x="1799" fg:w="134"/><text x="92.4591%" y="399.50">&lt;&amp;std::io..</text></g><g><title>std::io::stdio::Stdout::lock (1 samples, 0.05%)</title><rect x="99.0261%" y="373" width="0.0513%" height="15" fill="rgb(208,13,10)" fg:x="1932" fg:w="1"/><text x="99.2761%" y="383.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (1 samples, 0.05%)</title><rect x="99.0261%" y="357" width="0.0513%" height="15" fill="rgb(212,200,36)" fg:x="1932" fg:w="1"/><text x="99.2761%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (1 samples, 0.05%)</title><rect x="99.0261%" y="341" width="0.0513%" height="15" fill="rgb(225,90,30)" fg:x="1932" fg:w="1"/><text x="99.2761%" y="351.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.05%)</title><rect x="99.1799%" y="501" width="0.0513%" height="15" fill="rgb(236,182,39)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="511.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.05%)</title><rect x="99.1799%" y="485" width="0.0513%" height="15" fill="rgb(212,144,35)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="495.50"></text></g><g><title>bprm_execve (1 samples, 0.05%)</title><rect x="99.1799%" y="469" width="0.0513%" height="15" fill="rgb(228,63,44)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="479.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.05%)</title><rect x="99.1799%" y="453" width="0.0513%" height="15" fill="rgb(228,109,6)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="463.50"></text></g><g><title>exec_binprm (1 samples, 0.05%)</title><rect x="99.1799%" y="437" width="0.0513%" height="15" fill="rgb(238,117,24)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="447.50"></text></g><g><title>search_binary_handler (1 samples, 0.05%)</title><rect x="99.1799%" y="421" width="0.0513%" height="15" fill="rgb(242,26,26)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="431.50"></text></g><g><title>load_elf_binary (1 samples, 0.05%)</title><rect x="99.1799%" y="405" width="0.0513%" height="15" fill="rgb(221,92,48)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="415.50"></text></g><g><title>load_elf_interp.constprop.0 (1 samples, 0.05%)</title><rect x="99.1799%" y="389" width="0.0513%" height="15" fill="rgb(209,209,32)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="399.50"></text></g><g><title>elf_map (1 samples, 0.05%)</title><rect x="99.1799%" y="373" width="0.0513%" height="15" fill="rgb(221,70,22)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="383.50"></text></g><g><title>vm_mmap (1 samples, 0.05%)</title><rect x="99.1799%" y="357" width="0.0513%" height="15" fill="rgb(248,145,5)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="367.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.05%)</title><rect x="99.1799%" y="341" width="0.0513%" height="15" fill="rgb(226,116,26)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="351.50"></text></g><g><title>do_mmap (1 samples, 0.05%)</title><rect x="99.1799%" y="325" width="0.0513%" height="15" fill="rgb(244,5,17)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="335.50"></text></g><g><title>mmap_region (1 samples, 0.05%)</title><rect x="99.1799%" y="309" width="0.0513%" height="15" fill="rgb(252,159,33)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="319.50"></text></g><g><title>vma_link (1 samples, 0.05%)</title><rect x="99.1799%" y="293" width="0.0513%" height="15" fill="rgb(206,71,0)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="303.50"></text></g><g><title>__vma_link_file (1 samples, 0.05%)</title><rect x="99.1799%" y="277" width="0.0513%" height="15" fill="rgb(233,118,54)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="287.50"></text></g><g><title>vma_interval_tree_insert (1 samples, 0.05%)</title><rect x="99.1799%" y="261" width="0.0513%" height="15" fill="rgb(234,83,48)" fg:x="1935" fg:w="1"/><text x="99.4299%" y="271.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.05%)</title><rect x="99.2312%" y="405" width="0.0513%" height="15" fill="rgb(228,3,54)" fg:x="1936" fg:w="1"/><text x="99.4812%" y="415.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="99.2312%" y="389" width="0.0513%" height="15" fill="rgb(226,155,13)" fg:x="1936" fg:w="1"/><text x="99.4812%" y="399.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="99.2312%" y="373" width="0.0513%" height="15" fill="rgb(241,28,37)" fg:x="1936" fg:w="1"/><text x="99.4812%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.41%)</title><rect x="99.0774%" y="533" width="0.4100%" height="15" fill="rgb(233,93,10)" fg:x="1933" fg:w="8"/><text x="99.3274%" y="543.50"></text></g><g><title>do_syscall_64 (6 samples, 0.31%)</title><rect x="99.1799%" y="517" width="0.3075%" height="15" fill="rgb(225,113,19)" fg:x="1935" fg:w="6"/><text x="99.4299%" y="527.50"></text></g><g><title>__x64_sys_exit_group (5 samples, 0.26%)</title><rect x="99.2312%" y="501" width="0.2563%" height="15" fill="rgb(241,2,18)" fg:x="1936" fg:w="5"/><text x="99.4812%" y="511.50"></text></g><g><title>do_group_exit (5 samples, 0.26%)</title><rect x="99.2312%" y="485" width="0.2563%" height="15" fill="rgb(228,207,21)" fg:x="1936" fg:w="5"/><text x="99.4812%" y="495.50"></text></g><g><title>do_exit (5 samples, 0.26%)</title><rect x="99.2312%" y="469" width="0.2563%" height="15" fill="rgb(213,211,35)" fg:x="1936" fg:w="5"/><text x="99.4812%" y="479.50"></text></g><g><title>exit_mm (5 samples, 0.26%)</title><rect x="99.2312%" y="453" width="0.2563%" height="15" fill="rgb(209,83,10)" fg:x="1936" fg:w="5"/><text x="99.4812%" y="463.50"></text></g><g><title>mmput (5 samples, 0.26%)</title><rect x="99.2312%" y="437" width="0.2563%" height="15" fill="rgb(209,164,1)" fg:x="1936" fg:w="5"/><text x="99.4812%" y="447.50"></text></g><g><title>exit_mmap (5 samples, 0.26%)</title><rect x="99.2312%" y="421" width="0.2563%" height="15" fill="rgb(213,184,43)" fg:x="1936" fg:w="5"/><text x="99.4812%" y="431.50"></text></g><g><title>unmap_vmas (4 samples, 0.21%)</title><rect x="99.2824%" y="405" width="0.2050%" height="15" fill="rgb(231,61,34)" fg:x="1937" fg:w="4"/><text x="99.5324%" y="415.50"></text></g><g><title>unmap_single_vma (4 samples, 0.21%)</title><rect x="99.2824%" y="389" width="0.2050%" height="15" fill="rgb(235,75,3)" fg:x="1937" fg:w="4"/><text x="99.5324%" y="399.50"></text></g><g><title>unmap_page_range (4 samples, 0.21%)</title><rect x="99.2824%" y="373" width="0.2050%" height="15" fill="rgb(220,106,47)" fg:x="1937" fg:w="4"/><text x="99.5324%" y="383.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.21%)</title><rect x="99.2824%" y="357" width="0.2050%" height="15" fill="rgb(210,196,33)" fg:x="1937" fg:w="4"/><text x="99.5324%" y="367.50"></text></g><g><title>zap_pte_range (4 samples, 0.21%)</title><rect x="99.2824%" y="341" width="0.2050%" height="15" fill="rgb(229,154,42)" fg:x="1937" fg:w="4"/><text x="99.5324%" y="351.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.05%)</title><rect x="99.4362%" y="325" width="0.0513%" height="15" fill="rgb(228,114,26)" fg:x="1940" fg:w="1"/><text x="99.6862%" y="335.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="99.4362%" y="309" width="0.0513%" height="15" fill="rgb(208,144,1)" fg:x="1940" fg:w="1"/><text x="99.6862%" y="319.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="99.4362%" y="293" width="0.0513%" height="15" fill="rgb(239,112,37)" fg:x="1940" fg:w="1"/><text x="99.6862%" y="303.50"></text></g><g><title>mem_cgroup_update_lru_size (1 samples, 0.05%)</title><rect x="99.4362%" y="277" width="0.0513%" height="15" fill="rgb(210,96,50)" fg:x="1940" fg:w="1"/><text x="99.6862%" y="287.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (6 samples, 0.31%)</title><rect x="99.4874%" y="533" width="0.3075%" height="15" fill="rgb(222,178,2)" fg:x="1941" fg:w="6"/><text x="99.7374%" y="543.50"></text></g><g><title>_mi_page_free (2 samples, 0.10%)</title><rect x="99.7950%" y="517" width="0.1025%" height="15" fill="rgb(226,74,18)" fg:x="1947" fg:w="2"/><text x="100.0450%" y="527.50"></text></g><g><title>sfa::main (3 samples, 0.15%)</title><rect x="99.7950%" y="533" width="0.1538%" height="15" fill="rgb(225,67,54)" fg:x="1947" fg:w="3"/><text x="100.0450%" y="543.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.05%)</title><rect x="99.8975%" y="517" width="0.0513%" height="15" fill="rgb(251,92,32)" fg:x="1949" fg:w="1"/><text x="100.1475%" y="527.50"></text></g><g><title>all (1,951 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(228,149,22)" fg:x="0" fg:w="1951"/><text x="0.2500%" y="575.50"></text></g><g><title>sfa (1,945 samples, 99.69%)</title><rect x="0.3075%" y="549" width="99.6925%" height="15" fill="rgb(243,54,13)" fg:x="6" fg:w="1945"/><text x="0.5575%" y="559.50">sfa</text></g><g><title>syscall_return_via_sysret (1 samples, 0.05%)</title><rect x="99.9487%" y="533" width="0.0513%" height="15" fill="rgb(243,180,28)" fg:x="1950" fg:w="1"/><text x="100.1987%" y="543.50"></text></g></svg></svg>