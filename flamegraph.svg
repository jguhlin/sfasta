<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="1940"><g><title>perf-exec (6 samples, 0.31%)</title><rect x="0.0000%" y="469" width="0.3093%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.31%)</title><rect x="0.0000%" y="453" width="0.3093%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="463.50"></text></g><g><title>do_syscall_64 (6 samples, 0.31%)</title><rect x="0.0000%" y="437" width="0.3093%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="447.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.31%)</title><rect x="0.0000%" y="421" width="0.3093%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="431.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.31%)</title><rect x="0.0000%" y="405" width="0.3093%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="415.50"></text></g><g><title>bprm_execve (6 samples, 0.31%)</title><rect x="0.0000%" y="389" width="0.3093%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="399.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 0.31%)</title><rect x="0.0000%" y="373" width="0.3093%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="383.50"></text></g><g><title>exec_binprm (6 samples, 0.31%)</title><rect x="0.0000%" y="357" width="0.3093%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="367.50"></text></g><g><title>search_binary_handler (6 samples, 0.31%)</title><rect x="0.0000%" y="341" width="0.3093%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="351.50"></text></g><g><title>load_elf_binary (6 samples, 0.31%)</title><rect x="0.0000%" y="325" width="0.3093%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="335.50"></text></g><g><title>begin_new_exec (6 samples, 0.31%)</title><rect x="0.0000%" y="309" width="0.3093%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="319.50"></text></g><g><title>perf_event_exec (6 samples, 0.31%)</title><rect x="0.0000%" y="293" width="0.3093%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="303.50"></text></g><g><title>[[stack]] (8 samples, 0.41%)</title><rect x="0.3093%" y="453" width="0.4124%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="8"/><text x="0.5593%" y="463.50"></text></g><g><title>__GI___write (8 samples, 0.41%)</title><rect x="0.3093%" y="437" width="0.4124%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="8"/><text x="0.5593%" y="447.50"></text></g><g><title>__entry_text_start (8 samples, 0.41%)</title><rect x="0.3093%" y="421" width="0.4124%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="8"/><text x="0.5593%" y="431.50"></text></g><g><title>[sfa] (45 samples, 2.32%)</title><rect x="0.7216%" y="453" width="2.3196%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="45"/><text x="0.9716%" y="463.50">[..</text></g><g><title>ZSTD_decodeLiteralsBlock (2 samples, 0.10%)</title><rect x="3.0928%" y="293" width="0.1031%" height="15" fill="rgb(225,20,46)" fg:x="60" fg:w="2"/><text x="3.3428%" y="303.50"></text></g><g><title>HUF_decompress4X_hufOnly_wksp_bmi2 (1 samples, 0.05%)</title><rect x="3.1443%" y="277" width="0.0515%" height="15" fill="rgb(210,31,41)" fg:x="61" fg:w="1"/><text x="3.3943%" y="287.50"></text></g><g><title>HUF_readDTableX2_wksp_bmi2 (1 samples, 0.05%)</title><rect x="3.1443%" y="261" width="0.0515%" height="15" fill="rgb(221,200,47)" fg:x="61" fg:w="1"/><text x="3.3943%" y="271.50"></text></g><g><title>FSE_readNCount_body_default (1 samples, 0.05%)</title><rect x="3.1959%" y="277" width="0.0515%" height="15" fill="rgb(226,26,5)" fg:x="62" fg:w="1"/><text x="3.4459%" y="287.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (6 samples, 0.31%)</title><rect x="3.2474%" y="277" width="0.3093%" height="15" fill="rgb(249,33,26)" fg:x="63" fg:w="6"/><text x="3.4974%" y="287.50"></text></g><g><title>ZSTD_decodeSeqHeaders (10 samples, 0.52%)</title><rect x="3.1959%" y="293" width="0.5155%" height="15" fill="rgb(235,183,28)" fg:x="62" fg:w="10"/><text x="3.4459%" y="303.50"></text></g><g><title>ZSTD_buildSeqTable.constprop.0 (3 samples, 0.15%)</title><rect x="3.5567%" y="277" width="0.1546%" height="15" fill="rgb(221,5,38)" fg:x="69" fg:w="3"/><text x="3.8067%" y="287.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (3 samples, 0.15%)</title><rect x="3.5567%" y="261" width="0.1546%" height="15" fill="rgb(247,18,42)" fg:x="69" fg:w="3"/><text x="3.8067%" y="271.50"></text></g><g><title>ZSTD_decompressSequencesSplitLitBuffer_bmi2.constprop.0 (7 samples, 0.36%)</title><rect x="3.7113%" y="293" width="0.3608%" height="15" fill="rgb(241,131,45)" fg:x="72" fg:w="7"/><text x="3.9613%" y="303.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.05%)</title><rect x="10.1031%" y="165" width="0.0515%" height="15" fill="rgb(249,31,29)" fg:x="196" fg:w="1"/><text x="10.3531%" y="175.50"></text></g><g><title>__alloc_pages (1 samples, 0.05%)</title><rect x="10.1031%" y="149" width="0.0515%" height="15" fill="rgb(225,111,53)" fg:x="196" fg:w="1"/><text x="10.3531%" y="159.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.05%)</title><rect x="10.1031%" y="133" width="0.0515%" height="15" fill="rgb(238,160,17)" fg:x="196" fg:w="1"/><text x="10.3531%" y="143.50"></text></g><g><title>rmqueue (1 samples, 0.05%)</title><rect x="10.1031%" y="117" width="0.0515%" height="15" fill="rgb(214,148,48)" fg:x="196" fg:w="1"/><text x="10.3531%" y="127.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1 samples, 0.05%)</title><rect x="10.1031%" y="101" width="0.0515%" height="15" fill="rgb(232,36,49)" fg:x="196" fg:w="1"/><text x="10.3531%" y="111.50"></text></g><g><title>ZSTD_decompressContinueStream (138 samples, 7.11%)</title><rect x="3.0928%" y="341" width="7.1134%" height="15" fill="rgb(209,103,24)" fg:x="60" fg:w="138"/><text x="3.3428%" y="351.50">ZSTD_decom..</text></g><g><title>ZSTD_decompressContinue (138 samples, 7.11%)</title><rect x="3.0928%" y="325" width="7.1134%" height="15" fill="rgb(229,88,8)" fg:x="60" fg:w="138"/><text x="3.3428%" y="335.50">ZSTD_decom..</text></g><g><title>ZSTD_decompressBlock_internal (138 samples, 7.11%)</title><rect x="3.0928%" y="309" width="7.1134%" height="15" fill="rgb(213,181,19)" fg:x="60" fg:w="138"/><text x="3.3428%" y="319.50">ZSTD_decom..</text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (119 samples, 6.13%)</title><rect x="4.0722%" y="293" width="6.1340%" height="15" fill="rgb(254,191,54)" fg:x="79" fg:w="119"/><text x="4.3222%" y="303.50">ZSTD_dec..</text></g><g><title>asm_exc_page_fault (3 samples, 0.15%)</title><rect x="10.0515%" y="277" width="0.1546%" height="15" fill="rgb(241,83,37)" fg:x="195" fg:w="3"/><text x="10.3015%" y="287.50"></text></g><g><title>exc_page_fault (2 samples, 0.10%)</title><rect x="10.1031%" y="261" width="0.1031%" height="15" fill="rgb(233,36,39)" fg:x="196" fg:w="2"/><text x="10.3531%" y="271.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.10%)</title><rect x="10.1031%" y="245" width="0.1031%" height="15" fill="rgb(226,3,54)" fg:x="196" fg:w="2"/><text x="10.3531%" y="255.50"></text></g><g><title>handle_mm_fault (2 samples, 0.10%)</title><rect x="10.1031%" y="229" width="0.1031%" height="15" fill="rgb(245,192,40)" fg:x="196" fg:w="2"/><text x="10.3531%" y="239.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.10%)</title><rect x="10.1031%" y="213" width="0.1031%" height="15" fill="rgb(238,167,29)" fg:x="196" fg:w="2"/><text x="10.3531%" y="223.50"></text></g><g><title>handle_pte_fault (2 samples, 0.10%)</title><rect x="10.1031%" y="197" width="0.1031%" height="15" fill="rgb(232,182,51)" fg:x="196" fg:w="2"/><text x="10.3531%" y="207.50"></text></g><g><title>do_anonymous_page (2 samples, 0.10%)</title><rect x="10.1031%" y="181" width="0.1031%" height="15" fill="rgb(231,60,39)" fg:x="196" fg:w="2"/><text x="10.3531%" y="191.50"></text></g><g><title>mem_cgroup_charge (1 samples, 0.05%)</title><rect x="10.1546%" y="165" width="0.0515%" height="15" fill="rgb(208,69,12)" fg:x="197" fg:w="1"/><text x="10.4046%" y="175.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.05%)</title><rect x="10.1546%" y="149" width="0.0515%" height="15" fill="rgb(235,93,37)" fg:x="197" fg:w="1"/><text x="10.4046%" y="159.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (1 samples, 0.05%)</title><rect x="10.1546%" y="133" width="0.0515%" height="15" fill="rgb(213,116,39)" fg:x="197" fg:w="1"/><text x="10.4046%" y="143.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.05%)</title><rect x="10.1546%" y="117" width="0.0515%" height="15" fill="rgb(222,207,29)" fg:x="197" fg:w="1"/><text x="10.4046%" y="127.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="10.2062%" y="341" width="0.0515%" height="15" fill="rgb(206,96,30)" fg:x="198" fg:w="1"/><text x="10.4562%" y="351.50"></text></g><g><title>_int_malloc (1 samples, 0.05%)</title><rect x="10.2062%" y="325" width="0.0515%" height="15" fill="rgb(218,138,4)" fg:x="198" fg:w="1"/><text x="10.4562%" y="335.50"></text></g><g><title>ZSTD_decompressStream (147 samples, 7.58%)</title><rect x="3.0412%" y="357" width="7.5773%" height="15" fill="rgb(250,191,14)" fg:x="59" fg:w="147"/><text x="3.2912%" y="367.50">ZSTD_decom..</text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.36%)</title><rect x="10.2577%" y="341" width="0.3608%" height="15" fill="rgb(239,60,40)" fg:x="199" fg:w="7"/><text x="10.5077%" y="351.50"></text></g><g><title>ZSTD_isError (1 samples, 0.05%)</title><rect x="10.6186%" y="357" width="0.0515%" height="15" fill="rgb(206,27,48)" fg:x="206" fg:w="1"/><text x="10.8686%" y="367.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (150 samples, 7.73%)</title><rect x="3.0412%" y="373" width="7.7320%" height="15" fill="rgb(225,35,8)" fg:x="59" fg:w="150"/><text x="3.2912%" y="383.50">&lt;zstd::stre..</text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.10%)</title><rect x="10.6701%" y="357" width="0.1031%" height="15" fill="rgb(250,213,24)" fg:x="207" fg:w="2"/><text x="10.9201%" y="367.50"></text></g><g><title>__memset_avx2_unaligned_erms (48 samples, 2.47%)</title><rect x="10.7732%" y="373" width="2.4742%" height="15" fill="rgb(247,123,22)" fg:x="209" fg:w="48"/><text x="11.0232%" y="383.50">__..</text></g><g><title>__memcpy_avx_unaligned_erms (39 samples, 2.01%)</title><rect x="13.2474%" y="325" width="2.0103%" height="15" fill="rgb(231,138,38)" fg:x="257" fg:w="39"/><text x="13.4974%" y="335.50">_..</text></g><g><title>[unknown] (238 samples, 12.27%)</title><rect x="3.0412%" y="453" width="12.2680%" height="15" fill="rgb(231,145,46)" fg:x="59" fg:w="238"/><text x="3.2912%" y="463.50">[unknown]</text></g><g><title>sfa::main (238 samples, 12.27%)</title><rect x="3.0412%" y="437" width="12.2680%" height="15" fill="rgb(251,118,11)" fg:x="59" fg:w="238"/><text x="3.2912%" y="447.50">sfa::main</text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_sequence (238 samples, 12.27%)</title><rect x="3.0412%" y="421" width="12.2680%" height="15" fill="rgb(217,147,25)" fg:x="59" fg:w="238"/><text x="3.2912%" y="431.50">libsfasta::formats..</text></g><g><title>libsfasta::data_types::sequence_block::SequenceBlockCompressed::decompress (238 samples, 12.27%)</title><rect x="3.0412%" y="405" width="12.2680%" height="15" fill="rgb(247,81,37)" fg:x="59" fg:w="238"/><text x="3.2912%" y="415.50">libsfasta::data_ty..</text></g><g><title>std::io::Read::read_to_end (238 samples, 12.27%)</title><rect x="3.0412%" y="389" width="12.2680%" height="15" fill="rgb(209,12,38)" fg:x="59" fg:w="238"/><text x="3.2912%" y="399.50">std::io::Read::rea..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (40 samples, 2.06%)</title><rect x="13.2474%" y="373" width="2.0619%" height="15" fill="rgb(227,1,9)" fg:x="257" fg:w="40"/><text x="13.4974%" y="383.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (40 samples, 2.06%)</title><rect x="13.2474%" y="357" width="2.0619%" height="15" fill="rgb(248,47,43)" fg:x="257" fg:w="40"/><text x="13.4974%" y="367.50">a..</text></g><g><title>_mi_heap_realloc_zero (40 samples, 2.06%)</title><rect x="13.2474%" y="341" width="2.0619%" height="15" fill="rgb(221,10,30)" fg:x="257" fg:w="40"/><text x="13.4974%" y="351.50">_..</text></g><g><title>_mi_malloc_generic (1 samples, 0.05%)</title><rect x="15.2577%" y="325" width="0.0515%" height="15" fill="rgb(210,229,1)" fg:x="296" fg:w="1"/><text x="15.5077%" y="335.50"></text></g><g><title>mi_page_fresh_alloc (1 samples, 0.05%)</title><rect x="15.2577%" y="309" width="0.0515%" height="15" fill="rgb(222,148,37)" fg:x="296" fg:w="1"/><text x="15.5077%" y="319.50"></text></g><g><title>__GI_exit (4 samples, 0.21%)</title><rect x="15.3093%" y="405" width="0.2062%" height="15" fill="rgb(234,67,33)" fg:x="297" fg:w="4"/><text x="15.5593%" y="415.50"></text></g><g><title>__run_exit_handlers (4 samples, 0.21%)</title><rect x="15.3093%" y="389" width="0.2062%" height="15" fill="rgb(247,98,35)" fg:x="297" fg:w="4"/><text x="15.5593%" y="399.50"></text></g><g><title>mi_process_done (4 samples, 0.21%)</title><rect x="15.3093%" y="373" width="0.2062%" height="15" fill="rgb(247,138,52)" fg:x="297" fg:w="4"/><text x="15.5593%" y="383.50"></text></g><g><title>mi_heap_collect_ex (4 samples, 0.21%)</title><rect x="15.3093%" y="357" width="0.2062%" height="15" fill="rgb(213,79,30)" fg:x="297" fg:w="4"/><text x="15.5593%" y="367.50"></text></g><g><title>mi_segment_cache_purge (4 samples, 0.21%)</title><rect x="15.3093%" y="341" width="0.2062%" height="15" fill="rgb(246,177,23)" fg:x="297" fg:w="4"/><text x="15.5593%" y="351.50"></text></g><g><title>mi_commit_mask_decommit.constprop.0 (4 samples, 0.21%)</title><rect x="15.3093%" y="325" width="0.2062%" height="15" fill="rgb(230,62,27)" fg:x="297" fg:w="4"/><text x="15.5593%" y="335.50"></text></g><g><title>_mi_os_decommit (4 samples, 0.21%)</title><rect x="15.3093%" y="309" width="0.2062%" height="15" fill="rgb(216,154,8)" fg:x="297" fg:w="4"/><text x="15.5593%" y="319.50"></text></g><g><title>__GI_madvise (4 samples, 0.21%)</title><rect x="15.3093%" y="293" width="0.2062%" height="15" fill="rgb(244,35,45)" fg:x="297" fg:w="4"/><text x="15.5593%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.21%)</title><rect x="15.3093%" y="277" width="0.2062%" height="15" fill="rgb(251,115,12)" fg:x="297" fg:w="4"/><text x="15.5593%" y="287.50"></text></g><g><title>do_syscall_64 (4 samples, 0.21%)</title><rect x="15.3093%" y="261" width="0.2062%" height="15" fill="rgb(240,54,50)" fg:x="297" fg:w="4"/><text x="15.5593%" y="271.50"></text></g><g><title>__x64_sys_madvise (4 samples, 0.21%)</title><rect x="15.3093%" y="245" width="0.2062%" height="15" fill="rgb(233,84,52)" fg:x="297" fg:w="4"/><text x="15.5593%" y="255.50"></text></g><g><title>do_madvise.part.0 (4 samples, 0.21%)</title><rect x="15.3093%" y="229" width="0.2062%" height="15" fill="rgb(207,117,47)" fg:x="297" fg:w="4"/><text x="15.5593%" y="239.50"></text></g><g><title>zap_page_range (4 samples, 0.21%)</title><rect x="15.3093%" y="213" width="0.2062%" height="15" fill="rgb(249,43,39)" fg:x="297" fg:w="4"/><text x="15.5593%" y="223.50"></text></g><g><title>unmap_single_vma (4 samples, 0.21%)</title><rect x="15.3093%" y="197" width="0.2062%" height="15" fill="rgb(209,38,44)" fg:x="297" fg:w="4"/><text x="15.5593%" y="207.50"></text></g><g><title>unmap_page_range (4 samples, 0.21%)</title><rect x="15.3093%" y="181" width="0.2062%" height="15" fill="rgb(236,212,23)" fg:x="297" fg:w="4"/><text x="15.5593%" y="191.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.21%)</title><rect x="15.3093%" y="165" width="0.2062%" height="15" fill="rgb(242,79,21)" fg:x="297" fg:w="4"/><text x="15.5593%" y="175.50"></text></g><g><title>zap_pte_range (4 samples, 0.21%)</title><rect x="15.3093%" y="149" width="0.2062%" height="15" fill="rgb(211,96,35)" fg:x="297" fg:w="4"/><text x="15.5593%" y="159.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.10%)</title><rect x="15.4124%" y="133" width="0.1031%" height="15" fill="rgb(253,215,40)" fg:x="299" fg:w="2"/><text x="15.6624%" y="143.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.10%)</title><rect x="15.4124%" y="117" width="0.1031%" height="15" fill="rgb(211,81,21)" fg:x="299" fg:w="2"/><text x="15.6624%" y="127.50"></text></g><g><title>release_pages (2 samples, 0.10%)</title><rect x="15.4124%" y="101" width="0.1031%" height="15" fill="rgb(208,190,38)" fg:x="299" fg:w="2"/><text x="15.6624%" y="111.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="15.4639%" y="85" width="0.0515%" height="15" fill="rgb(235,213,38)" fg:x="300" fg:w="1"/><text x="15.7139%" y="95.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="15.4639%" y="69" width="0.0515%" height="15" fill="rgb(237,122,38)" fg:x="300" fg:w="1"/><text x="15.7139%" y="79.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="15.4639%" y="53" width="0.0515%" height="15" fill="rgb(244,218,35)" fg:x="300" fg:w="1"/><text x="15.7139%" y="63.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.05%)</title><rect x="15.8763%" y="229" width="0.0515%" height="15" fill="rgb(240,68,47)" fg:x="308" fg:w="1"/><text x="16.1263%" y="239.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="15.8763%" y="213" width="0.0515%" height="15" fill="rgb(210,16,53)" fg:x="308" fg:w="1"/><text x="16.1263%" y="223.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="15.8763%" y="197" width="0.0515%" height="15" fill="rgb(235,124,12)" fg:x="308" fg:w="1"/><text x="16.1263%" y="207.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="15.8763%" y="181" width="0.0515%" height="15" fill="rgb(224,169,11)" fg:x="308" fg:w="1"/><text x="16.1263%" y="191.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="15.8763%" y="165" width="0.0515%" height="15" fill="rgb(250,166,2)" fg:x="308" fg:w="1"/><text x="16.1263%" y="175.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="15.8763%" y="149" width="0.0515%" height="15" fill="rgb(242,216,29)" fg:x="308" fg:w="1"/><text x="16.1263%" y="159.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.05%)</title><rect x="15.8763%" y="133" width="0.0515%" height="15" fill="rgb(230,116,27)" fg:x="308" fg:w="1"/><text x="16.1263%" y="143.50"></text></g><g><title>_mi_os_free_ex (4 samples, 0.21%)</title><rect x="15.8763%" y="357" width="0.2062%" height="15" fill="rgb(228,99,48)" fg:x="308" fg:w="4"/><text x="16.1263%" y="367.50"></text></g><g><title>__GI___munmap (4 samples, 0.21%)</title><rect x="15.8763%" y="341" width="0.2062%" height="15" fill="rgb(253,11,6)" fg:x="308" fg:w="4"/><text x="16.1263%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.21%)</title><rect x="15.8763%" y="325" width="0.2062%" height="15" fill="rgb(247,143,39)" fg:x="308" fg:w="4"/><text x="16.1263%" y="335.50"></text></g><g><title>do_syscall_64 (4 samples, 0.21%)</title><rect x="15.8763%" y="309" width="0.2062%" height="15" fill="rgb(236,97,10)" fg:x="308" fg:w="4"/><text x="16.1263%" y="319.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.21%)</title><rect x="15.8763%" y="293" width="0.2062%" height="15" fill="rgb(233,208,19)" fg:x="308" fg:w="4"/><text x="16.1263%" y="303.50"></text></g><g><title>__vm_munmap (4 samples, 0.21%)</title><rect x="15.8763%" y="277" width="0.2062%" height="15" fill="rgb(216,164,2)" fg:x="308" fg:w="4"/><text x="16.1263%" y="287.50"></text></g><g><title>__do_munmap (4 samples, 0.21%)</title><rect x="15.8763%" y="261" width="0.2062%" height="15" fill="rgb(220,129,5)" fg:x="308" fg:w="4"/><text x="16.1263%" y="271.50"></text></g><g><title>unmap_region (4 samples, 0.21%)</title><rect x="15.8763%" y="245" width="0.2062%" height="15" fill="rgb(242,17,10)" fg:x="308" fg:w="4"/><text x="16.1263%" y="255.50"></text></g><g><title>unmap_vmas (3 samples, 0.15%)</title><rect x="15.9278%" y="229" width="0.1546%" height="15" fill="rgb(242,107,0)" fg:x="309" fg:w="3"/><text x="16.1778%" y="239.50"></text></g><g><title>unmap_single_vma (3 samples, 0.15%)</title><rect x="15.9278%" y="213" width="0.1546%" height="15" fill="rgb(251,28,31)" fg:x="309" fg:w="3"/><text x="16.1778%" y="223.50"></text></g><g><title>unmap_page_range (3 samples, 0.15%)</title><rect x="15.9278%" y="197" width="0.1546%" height="15" fill="rgb(233,223,10)" fg:x="309" fg:w="3"/><text x="16.1778%" y="207.50"></text></g><g><title>zap_pmd_range.isra.0 (3 samples, 0.15%)</title><rect x="15.9278%" y="181" width="0.1546%" height="15" fill="rgb(215,21,27)" fg:x="309" fg:w="3"/><text x="16.1778%" y="191.50"></text></g><g><title>zap_pte_range (3 samples, 0.15%)</title><rect x="15.9278%" y="165" width="0.1546%" height="15" fill="rgb(232,23,21)" fg:x="309" fg:w="3"/><text x="16.1778%" y="175.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.05%)</title><rect x="16.0309%" y="149" width="0.0515%" height="15" fill="rgb(244,5,23)" fg:x="311" fg:w="1"/><text x="16.2809%" y="159.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="16.0309%" y="133" width="0.0515%" height="15" fill="rgb(226,81,46)" fg:x="311" fg:w="1"/><text x="16.2809%" y="143.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="16.0309%" y="117" width="0.0515%" height="15" fill="rgb(247,70,30)" fg:x="311" fg:w="1"/><text x="16.2809%" y="127.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="16.0309%" y="101" width="0.0515%" height="15" fill="rgb(212,68,19)" fg:x="311" fg:w="1"/><text x="16.2809%" y="111.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="16.0309%" y="85" width="0.0515%" height="15" fill="rgb(240,187,13)" fg:x="311" fg:w="1"/><text x="16.2809%" y="95.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="16.0309%" y="69" width="0.0515%" height="15" fill="rgb(223,113,26)" fg:x="311" fg:w="1"/><text x="16.2809%" y="79.50"></text></g><g><title>__free_one_page (1 samples, 0.05%)</title><rect x="16.0309%" y="53" width="0.0515%" height="15" fill="rgb(206,192,2)" fg:x="311" fg:w="1"/><text x="16.2809%" y="63.50"></text></g><g><title>_mi_stat_decrease (3 samples, 0.15%)</title><rect x="16.4433%" y="341" width="0.1546%" height="15" fill="rgb(241,108,4)" fg:x="319" fg:w="3"/><text x="16.6933%" y="351.50"></text></g><g><title>mi_option_is_enabled (9 samples, 0.46%)</title><rect x="16.5979%" y="341" width="0.4639%" height="15" fill="rgb(247,173,49)" fg:x="322" fg:w="9"/><text x="16.8479%" y="351.50"></text></g><g><title>mi_option_get (3 samples, 0.15%)</title><rect x="16.9072%" y="325" width="0.1546%" height="15" fill="rgb(224,114,35)" fg:x="328" fg:w="3"/><text x="17.1572%" y="335.50"></text></g><g><title>_mi_clock_now (13 samples, 0.67%)</title><rect x="17.8866%" y="309" width="0.6701%" height="15" fill="rgb(245,159,27)" fg:x="347" fg:w="13"/><text x="18.1366%" y="319.50"></text></g><g><title>__clock_gettime_2 (11 samples, 0.57%)</title><rect x="17.9897%" y="293" width="0.5670%" height="15" fill="rgb(245,172,44)" fg:x="349" fg:w="11"/><text x="18.2397%" y="303.50"></text></g><g><title>[[vdso]] (11 samples, 0.57%)</title><rect x="17.9897%" y="277" width="0.5670%" height="15" fill="rgb(236,23,11)" fg:x="349" fg:w="11"/><text x="18.2397%" y="287.50"></text></g><g><title>[[vdso]] (8 samples, 0.41%)</title><rect x="18.1443%" y="261" width="0.4124%" height="15" fill="rgb(205,117,38)" fg:x="352" fg:w="8"/><text x="18.3943%" y="271.50"></text></g><g><title>mi_option_get (1 samples, 0.05%)</title><rect x="18.5567%" y="309" width="0.0515%" height="15" fill="rgb(237,72,25)" fg:x="360" fg:w="1"/><text x="18.8067%" y="319.50"></text></g><g><title>mi_segment_perhaps_decommit (34 samples, 1.75%)</title><rect x="17.2165%" y="325" width="1.7526%" height="15" fill="rgb(244,70,9)" fg:x="334" fg:w="34"/><text x="17.4665%" y="335.50"></text></g><g><title>mi_segment_commit_mask.part.0 (7 samples, 0.36%)</title><rect x="18.6082%" y="309" width="0.3608%" height="15" fill="rgb(217,125,39)" fg:x="361" fg:w="7"/><text x="18.8582%" y="319.50"></text></g><g><title>_mi_segment_page_free (62 samples, 3.20%)</title><rect x="16.0825%" y="357" width="3.1959%" height="15" fill="rgb(235,36,10)" fg:x="312" fg:w="62"/><text x="16.3325%" y="367.50">_mi..</text></g><g><title>mi_segment_span_free_coalesce (43 samples, 2.22%)</title><rect x="17.0619%" y="341" width="2.2165%" height="15" fill="rgb(251,123,47)" fg:x="331" fg:w="43"/><text x="17.3119%" y="351.50">m..</text></g><g><title>mi_segment_span_remove_from_queue (6 samples, 0.31%)</title><rect x="18.9691%" y="325" width="0.3093%" height="15" fill="rgb(221,13,13)" fg:x="368" fg:w="6"/><text x="19.2191%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="19.5361%" y="341" width="0.0515%" height="15" fill="rgb(238,131,9)" fg:x="379" fg:w="1"/><text x="19.7861%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.10%)</title><rect x="20.3093%" y="229" width="0.1031%" height="15" fill="rgb(211,50,8)" fg:x="394" fg:w="2"/><text x="20.5593%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (9 samples, 0.46%)</title><rect x="20.0000%" y="277" width="0.4639%" height="15" fill="rgb(245,182,24)" fg:x="388" fg:w="9"/><text x="20.2500%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (8 samples, 0.41%)</title><rect x="20.0515%" y="261" width="0.4124%" height="15" fill="rgb(242,14,37)" fg:x="389" fg:w="8"/><text x="20.3015%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.15%)</title><rect x="20.3093%" y="245" width="0.1546%" height="15" fill="rgb(246,228,12)" fg:x="394" fg:w="3"/><text x="20.5593%" y="255.50"></text></g><g><title>__memmove_avx_unaligned (1 samples, 0.05%)</title><rect x="20.4124%" y="229" width="0.0515%" height="15" fill="rgb(213,55,15)" fg:x="396" fg:w="1"/><text x="20.6624%" y="239.50"></text></g><g><title>__x64_sys_write (6 samples, 0.31%)</title><rect x="20.8763%" y="181" width="0.3093%" height="15" fill="rgb(209,9,3)" fg:x="405" fg:w="6"/><text x="21.1263%" y="191.50"></text></g><g><title>__fget_light (5 samples, 0.26%)</title><rect x="21.3402%" y="133" width="0.2577%" height="15" fill="rgb(230,59,30)" fg:x="414" fg:w="5"/><text x="21.5902%" y="143.50"></text></g><g><title>__fsnotify_parent (1 samples, 0.05%)</title><rect x="21.5979%" y="133" width="0.0515%" height="15" fill="rgb(209,121,21)" fg:x="419" fg:w="1"/><text x="21.8479%" y="143.50"></text></g><g><title>rw_verify_area (1 samples, 0.05%)</title><rect x="21.6495%" y="133" width="0.0515%" height="15" fill="rgb(220,109,13)" fg:x="420" fg:w="1"/><text x="21.8995%" y="143.50"></text></g><g><title>__cond_resched (3 samples, 0.15%)</title><rect x="22.1134%" y="85" width="0.1546%" height="15" fill="rgb(232,18,1)" fg:x="429" fg:w="3"/><text x="22.3634%" y="95.50"></text></g><g><title>dput (6 samples, 0.31%)</title><rect x="22.0619%" y="101" width="0.3093%" height="15" fill="rgb(215,41,42)" fg:x="428" fg:w="6"/><text x="22.3119%" y="111.50"></text></g><g><title>rcu_all_qs (2 samples, 0.10%)</title><rect x="22.2680%" y="85" width="0.1031%" height="15" fill="rgb(224,123,36)" fg:x="432" fg:w="2"/><text x="22.5180%" y="95.50"></text></g><g><title>fsnotify (6 samples, 0.31%)</title><rect x="22.3711%" y="101" width="0.3093%" height="15" fill="rgb(240,125,3)" fg:x="434" fg:w="6"/><text x="22.6211%" y="111.50"></text></g><g><title>lockref_put_return (3 samples, 0.15%)</title><rect x="22.6804%" y="101" width="0.1546%" height="15" fill="rgb(205,98,50)" fg:x="440" fg:w="3"/><text x="22.9304%" y="111.50"></text></g><g><title>__fsnotify_parent (22 samples, 1.13%)</title><rect x="21.8557%" y="117" width="1.1340%" height="15" fill="rgb(205,185,37)" fg:x="424" fg:w="22"/><text x="22.1057%" y="127.50"></text></g><g><title>rcu_read_unlock_strict (3 samples, 0.15%)</title><rect x="22.8351%" y="101" width="0.1546%" height="15" fill="rgb(238,207,15)" fg:x="443" fg:w="3"/><text x="23.0851%" y="111.50"></text></g><g><title>__x86_indirect_thunk_rax (2 samples, 0.10%)</title><rect x="22.9897%" y="101" width="0.1031%" height="15" fill="rgb(213,199,42)" fg:x="446" fg:w="2"/><text x="23.2397%" y="111.50"></text></g><g><title>apparmor_file_permission (2 samples, 0.10%)</title><rect x="23.0928%" y="101" width="0.1031%" height="15" fill="rgb(235,201,11)" fg:x="448" fg:w="2"/><text x="23.3428%" y="111.50"></text></g><g><title>aa_file_perm (1 samples, 0.05%)</title><rect x="23.2990%" y="85" width="0.0515%" height="15" fill="rgb(207,46,11)" fg:x="452" fg:w="1"/><text x="23.5490%" y="95.50"></text></g><g><title>vfs_write (39 samples, 2.01%)</title><rect x="21.7010%" y="133" width="2.0103%" height="15" fill="rgb(241,35,35)" fg:x="421" fg:w="39"/><text x="21.9510%" y="143.50">v..</text></g><g><title>rw_verify_area (14 samples, 0.72%)</title><rect x="22.9897%" y="117" width="0.7216%" height="15" fill="rgb(243,32,47)" fg:x="446" fg:w="14"/><text x="23.2397%" y="127.50"></text></g><g><title>security_file_permission (10 samples, 0.52%)</title><rect x="23.1959%" y="101" width="0.5155%" height="15" fill="rgb(247,202,23)" fg:x="450" fg:w="10"/><text x="23.4459%" y="111.50"></text></g><g><title>apparmor_file_permission (7 samples, 0.36%)</title><rect x="23.3505%" y="85" width="0.3608%" height="15" fill="rgb(219,102,11)" fg:x="453" fg:w="7"/><text x="23.6005%" y="95.50"></text></g><g><title>aa_file_perm (3 samples, 0.15%)</title><rect x="23.5567%" y="69" width="0.1546%" height="15" fill="rgb(243,110,44)" fg:x="457" fg:w="3"/><text x="23.8067%" y="79.50"></text></g><g><title>__x64_sys_write (58 samples, 2.99%)</title><rect x="21.1856%" y="165" width="2.9897%" height="15" fill="rgb(222,74,54)" fg:x="411" fg:w="58"/><text x="21.4356%" y="175.50">__x..</text></g><g><title>ksys_write (58 samples, 2.99%)</title><rect x="21.1856%" y="149" width="2.9897%" height="15" fill="rgb(216,99,12)" fg:x="411" fg:w="58"/><text x="21.4356%" y="159.50">ksy..</text></g><g><title>write_null (9 samples, 0.46%)</title><rect x="23.7113%" y="133" width="0.4639%" height="15" fill="rgb(226,22,26)" fg:x="460" fg:w="9"/><text x="23.9613%" y="143.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.05%)</title><rect x="24.1753%" y="165" width="0.0515%" height="15" fill="rgb(217,163,10)" fg:x="469" fg:w="1"/><text x="24.4253%" y="175.50"></text></g><g><title>exit_to_user_mode_prepare (12 samples, 0.62%)</title><rect x="24.2268%" y="149" width="0.6186%" height="15" fill="rgb(213,25,53)" fg:x="470" fg:w="12"/><text x="24.4768%" y="159.50"></text></g><g><title>do_syscall_64 (72 samples, 3.71%)</title><rect x="21.1856%" y="181" width="3.7113%" height="15" fill="rgb(252,105,26)" fg:x="411" fg:w="72"/><text x="21.4356%" y="191.50">do_s..</text></g><g><title>syscall_exit_to_user_mode (13 samples, 0.67%)</title><rect x="24.2268%" y="165" width="0.6701%" height="15" fill="rgb(220,39,43)" fg:x="470" fg:w="13"/><text x="24.4768%" y="175.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.05%)</title><rect x="24.8454%" y="149" width="0.0515%" height="15" fill="rgb(229,68,48)" fg:x="482" fg:w="1"/><text x="25.0954%" y="159.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (81 samples, 4.18%)</title><rect x="20.7732%" y="197" width="4.1753%" height="15" fill="rgb(252,8,32)" fg:x="403" fg:w="81"/><text x="21.0232%" y="207.50">entry..</text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.05%)</title><rect x="24.8969%" y="181" width="0.0515%" height="15" fill="rgb(223,20,43)" fg:x="483" fg:w="1"/><text x="25.1469%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (87 samples, 4.48%)</title><rect x="20.5155%" y="261" width="4.4845%" height="15" fill="rgb(229,81,49)" fg:x="398" fg:w="87"/><text x="20.7655%" y="271.50">&lt;std:..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (87 samples, 4.48%)</title><rect x="20.5155%" y="245" width="4.4845%" height="15" fill="rgb(236,28,36)" fg:x="398" fg:w="87"/><text x="20.7655%" y="255.50">&lt;std:..</text></g><g><title>std::sys::unix::fd::FileDesc::write (87 samples, 4.48%)</title><rect x="20.5155%" y="229" width="4.4845%" height="15" fill="rgb(249,185,26)" fg:x="398" fg:w="87"/><text x="20.7655%" y="239.50">std::..</text></g><g><title>__GI___write (86 samples, 4.43%)</title><rect x="20.5670%" y="213" width="4.4330%" height="15" fill="rgb(249,174,33)" fg:x="399" fg:w="86"/><text x="20.8170%" y="223.50">__GI_..</text></g><g><title>syscall_return_via_sysret (1 samples, 0.05%)</title><rect x="24.9485%" y="197" width="0.0515%" height="15" fill="rgb(233,201,37)" fg:x="484" fg:w="1"/><text x="25.1985%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (89 samples, 4.59%)</title><rect x="20.4639%" y="277" width="4.5876%" height="15" fill="rgb(221,78,26)" fg:x="397" fg:w="89"/><text x="20.7139%" y="287.50">std::..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::remaining (1 samples, 0.05%)</title><rect x="25.0000%" y="261" width="0.0515%" height="15" fill="rgb(250,127,30)" fg:x="485" fg:w="1"/><text x="25.2500%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.05%)</title><rect x="25.0000%" y="245" width="0.0515%" height="15" fill="rgb(230,49,44)" fg:x="485" fg:w="1"/><text x="25.2500%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.05%)</title><rect x="25.0000%" y="229" width="0.0515%" height="15" fill="rgb(229,67,23)" fg:x="485" fg:w="1"/><text x="25.2500%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.05%)</title><rect x="25.0000%" y="213" width="0.0515%" height="15" fill="rgb(249,83,47)" fg:x="485" fg:w="1"/><text x="25.2500%" y="223.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (1 samples, 0.05%)</title><rect x="25.0515%" y="277" width="0.0515%" height="15" fill="rgb(215,43,3)" fg:x="486" fg:w="1"/><text x="25.3015%" y="287.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (116 samples, 5.98%)</title><rect x="20.0000%" y="309" width="5.9794%" height="15" fill="rgb(238,154,13)" fg:x="388" fg:w="116"/><text x="20.2500%" y="319.50">&lt;std::io..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (116 samples, 5.98%)</title><rect x="20.0000%" y="293" width="5.9794%" height="15" fill="rgb(219,56,2)" fg:x="388" fg:w="116"/><text x="20.2500%" y="303.50">&lt;std::io..</text></g><g><title>std::sys_common::memchr::memrchr (17 samples, 0.88%)</title><rect x="25.1031%" y="277" width="0.8763%" height="15" fill="rgb(233,0,4)" fg:x="487" fg:w="17"/><text x="25.3531%" y="287.50"></text></g><g><title>std::sys::unix::memchr::memrchr (17 samples, 0.88%)</title><rect x="25.1031%" y="261" width="0.8763%" height="15" fill="rgb(235,30,7)" fg:x="487" fg:w="17"/><text x="25.3531%" y="271.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (17 samples, 0.88%)</title><rect x="25.1031%" y="245" width="0.8763%" height="15" fill="rgb(250,79,13)" fg:x="487" fg:w="17"/><text x="25.3531%" y="255.50"></text></g><g><title>__memrchr_avx2 (16 samples, 0.82%)</title><rect x="25.1546%" y="229" width="0.8247%" height="15" fill="rgb(211,146,34)" fg:x="488" fg:w="16"/><text x="25.4046%" y="239.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (128 samples, 6.60%)</title><rect x="19.5876%" y="341" width="6.5979%" height="15" fill="rgb(228,22,38)" fg:x="380" fg:w="128"/><text x="19.8376%" y="351.50">&lt;std::io:..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (122 samples, 6.29%)</title><rect x="19.8969%" y="325" width="6.2887%" height="15" fill="rgb(235,168,5)" fg:x="386" fg:w="122"/><text x="20.1469%" y="335.50">&lt;std::io..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.21%)</title><rect x="25.9794%" y="309" width="0.2062%" height="15" fill="rgb(221,155,16)" fg:x="504" fg:w="4"/><text x="26.2294%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.21%)</title><rect x="25.9794%" y="293" width="0.2062%" height="15" fill="rgb(215,215,53)" fg:x="504" fg:w="4"/><text x="26.2294%" y="303.50"></text></g><g><title>core::cell::BorrowRefMut::new (4 samples, 0.21%)</title><rect x="25.9794%" y="277" width="0.2062%" height="15" fill="rgb(223,4,10)" fg:x="504" fg:w="4"/><text x="26.2294%" y="287.50"></text></g><g><title>core::fmt::write (137 samples, 7.06%)</title><rect x="19.2784%" y="357" width="7.0619%" height="15" fill="rgb(234,103,6)" fg:x="374" fg:w="137"/><text x="19.5284%" y="367.50">core::fmt..</text></g><g><title>core::fmt::Formatter::pad (3 samples, 0.15%)</title><rect x="26.1856%" y="341" width="0.1546%" height="15" fill="rgb(227,97,0)" fg:x="508" fg:w="3"/><text x="26.4356%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;libsfasta::data_types::seq_loc::SeqLoc&gt; (7 samples, 0.36%)</title><rect x="26.3402%" y="357" width="0.3608%" height="15" fill="rgb(234,150,53)" fg:x="511" fg:w="7"/><text x="26.5902%" y="367.50"></text></g><g><title>mi_free (4 samples, 0.21%)</title><rect x="26.4948%" y="341" width="0.2062%" height="15" fill="rgb(228,201,54)" fg:x="514" fg:w="4"/><text x="26.7448%" y="351.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.05%)</title><rect x="26.7010%" y="213" width="0.0515%" height="15" fill="rgb(222,22,37)" fg:x="518" fg:w="1"/><text x="26.9510%" y="223.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="26.7010%" y="197" width="0.0515%" height="15" fill="rgb(237,53,32)" fg:x="518" fg:w="1"/><text x="26.9510%" y="207.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="26.7010%" y="181" width="0.0515%" height="15" fill="rgb(233,25,53)" fg:x="518" fg:w="1"/><text x="26.9510%" y="191.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.05%)</title><rect x="26.7010%" y="165" width="0.0515%" height="15" fill="rgb(210,40,34)" fg:x="518" fg:w="1"/><text x="26.9510%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;libsfasta::formats::sfasta::Sfasta&gt; (4 samples, 0.21%)</title><rect x="26.7010%" y="357" width="0.2062%" height="15" fill="rgb(241,220,44)" fg:x="518" fg:w="4"/><text x="26.9510%" y="367.50"></text></g><g><title>_mi_os_free_ex (4 samples, 0.21%)</title><rect x="26.7010%" y="341" width="0.2062%" height="15" fill="rgb(235,28,35)" fg:x="518" fg:w="4"/><text x="26.9510%" y="351.50"></text></g><g><title>__GI___munmap (4 samples, 0.21%)</title><rect x="26.7010%" y="325" width="0.2062%" height="15" fill="rgb(210,56,17)" fg:x="518" fg:w="4"/><text x="26.9510%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.21%)</title><rect x="26.7010%" y="309" width="0.2062%" height="15" fill="rgb(224,130,29)" fg:x="518" fg:w="4"/><text x="26.9510%" y="319.50"></text></g><g><title>do_syscall_64 (4 samples, 0.21%)</title><rect x="26.7010%" y="293" width="0.2062%" height="15" fill="rgb(235,212,8)" fg:x="518" fg:w="4"/><text x="26.9510%" y="303.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.21%)</title><rect x="26.7010%" y="277" width="0.2062%" height="15" fill="rgb(223,33,50)" fg:x="518" fg:w="4"/><text x="26.9510%" y="287.50"></text></g><g><title>__vm_munmap (4 samples, 0.21%)</title><rect x="26.7010%" y="261" width="0.2062%" height="15" fill="rgb(219,149,13)" fg:x="518" fg:w="4"/><text x="26.9510%" y="271.50"></text></g><g><title>__do_munmap (4 samples, 0.21%)</title><rect x="26.7010%" y="245" width="0.2062%" height="15" fill="rgb(250,156,29)" fg:x="518" fg:w="4"/><text x="26.9510%" y="255.50"></text></g><g><title>unmap_region (4 samples, 0.21%)</title><rect x="26.7010%" y="229" width="0.2062%" height="15" fill="rgb(216,193,19)" fg:x="518" fg:w="4"/><text x="26.9510%" y="239.50"></text></g><g><title>unmap_vmas (3 samples, 0.15%)</title><rect x="26.7526%" y="213" width="0.1546%" height="15" fill="rgb(216,135,14)" fg:x="519" fg:w="3"/><text x="27.0026%" y="223.50"></text></g><g><title>unmap_single_vma (3 samples, 0.15%)</title><rect x="26.7526%" y="197" width="0.1546%" height="15" fill="rgb(241,47,5)" fg:x="519" fg:w="3"/><text x="27.0026%" y="207.50"></text></g><g><title>unmap_page_range (3 samples, 0.15%)</title><rect x="26.7526%" y="181" width="0.1546%" height="15" fill="rgb(233,42,35)" fg:x="519" fg:w="3"/><text x="27.0026%" y="191.50"></text></g><g><title>zap_pmd_range.isra.0 (3 samples, 0.15%)</title><rect x="26.7526%" y="165" width="0.1546%" height="15" fill="rgb(231,13,6)" fg:x="519" fg:w="3"/><text x="27.0026%" y="175.50"></text></g><g><title>zap_pte_range (3 samples, 0.15%)</title><rect x="26.7526%" y="149" width="0.1546%" height="15" fill="rgb(207,181,40)" fg:x="519" fg:w="3"/><text x="27.0026%" y="159.50"></text></g><g><title>tlb_flush_mmu (2 samples, 0.10%)</title><rect x="26.8041%" y="133" width="0.1031%" height="15" fill="rgb(254,173,49)" fg:x="520" fg:w="2"/><text x="27.0541%" y="143.50"></text></g><g><title>free_pages_and_swap_cache (2 samples, 0.10%)</title><rect x="26.8041%" y="117" width="0.1031%" height="15" fill="rgb(221,1,38)" fg:x="520" fg:w="2"/><text x="27.0541%" y="127.50"></text></g><g><title>release_pages (2 samples, 0.10%)</title><rect x="26.8041%" y="101" width="0.1031%" height="15" fill="rgb(206,124,46)" fg:x="520" fg:w="2"/><text x="27.0541%" y="111.50"></text></g><g><title>free_unref_page_list (2 samples, 0.10%)</title><rect x="26.8041%" y="85" width="0.1031%" height="15" fill="rgb(249,21,11)" fg:x="520" fg:w="2"/><text x="27.0541%" y="95.50"></text></g><g><title>free_unref_page_commit (2 samples, 0.10%)</title><rect x="26.8041%" y="69" width="0.1031%" height="15" fill="rgb(222,201,40)" fg:x="520" fg:w="2"/><text x="27.0541%" y="79.50"></text></g><g><title>free_pcppages_bulk (2 samples, 0.10%)</title><rect x="26.8041%" y="53" width="0.1031%" height="15" fill="rgb(235,61,29)" fg:x="520" fg:w="2"/><text x="27.0541%" y="63.50"></text></g><g><title>__free_one_page (2 samples, 0.10%)</title><rect x="26.8041%" y="37" width="0.1031%" height="15" fill="rgb(219,207,3)" fg:x="520" fg:w="2"/><text x="27.0541%" y="47.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (6 samples, 0.31%)</title><rect x="27.4742%" y="341" width="0.3093%" height="15" fill="rgb(222,56,46)" fg:x="533" fg:w="6"/><text x="27.7242%" y="351.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 0.31%)</title><rect x="27.4742%" y="325" width="0.3093%" height="15" fill="rgb(239,76,54)" fg:x="533" fg:w="6"/><text x="27.7242%" y="335.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 0.31%)</title><rect x="27.4742%" y="309" width="0.3093%" height="15" fill="rgb(231,124,27)" fg:x="533" fg:w="6"/><text x="27.7242%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (6 samples, 0.31%)</title><rect x="27.4742%" y="293" width="0.3093%" height="15" fill="rgb(249,195,6)" fg:x="533" fg:w="6"/><text x="27.7242%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (6 samples, 0.31%)</title><rect x="27.4742%" y="277" width="0.3093%" height="15" fill="rgb(237,174,47)" fg:x="533" fg:w="6"/><text x="27.7242%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.31%)</title><rect x="27.4742%" y="261" width="0.3093%" height="15" fill="rgb(206,201,31)" fg:x="533" fg:w="6"/><text x="27.7242%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (6 samples, 0.31%)</title><rect x="27.4742%" y="245" width="0.3093%" height="15" fill="rgb(231,57,52)" fg:x="533" fg:w="6"/><text x="27.7242%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (6 samples, 0.31%)</title><rect x="27.4742%" y="229" width="0.3093%" height="15" fill="rgb(248,177,22)" fg:x="533" fg:w="6"/><text x="27.7242%" y="239.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (6 samples, 0.31%)</title><rect x="27.4742%" y="213" width="0.3093%" height="15" fill="rgb(215,211,37)" fg:x="533" fg:w="6"/><text x="27.7242%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (6 samples, 0.31%)</title><rect x="27.4742%" y="197" width="0.3093%" height="15" fill="rgb(241,128,51)" fg:x="533" fg:w="6"/><text x="27.7242%" y="207.50"></text></g><g><title>__GI___write (6 samples, 0.31%)</title><rect x="27.4742%" y="181" width="0.3093%" height="15" fill="rgb(227,165,31)" fg:x="533" fg:w="6"/><text x="27.7242%" y="191.50"></text></g><g><title>__entry_text_start (6 samples, 0.31%)</title><rect x="27.4742%" y="165" width="0.3093%" height="15" fill="rgb(228,167,24)" fg:x="533" fg:w="6"/><text x="27.7242%" y="175.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.15%)</title><rect x="27.7835%" y="341" width="0.1546%" height="15" fill="rgb(228,143,12)" fg:x="539" fg:w="3"/><text x="28.0335%" y="351.50"></text></g><g><title>_mi_heap_delayed_free (2 samples, 0.10%)</title><rect x="27.8351%" y="325" width="0.1031%" height="15" fill="rgb(249,149,8)" fg:x="540" fg:w="2"/><text x="28.0851%" y="335.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_header (34 samples, 1.75%)</title><rect x="26.9072%" y="357" width="1.7526%" height="15" fill="rgb(243,35,44)" fg:x="522" fg:w="34"/><text x="27.1572%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (14 samples, 0.72%)</title><rect x="27.9381%" y="341" width="0.7216%" height="15" fill="rgb(246,89,9)" fg:x="542" fg:w="14"/><text x="28.1881%" y="351.50"></text></g><g><title>core::str::validations::run_utf8_validation (10 samples, 0.52%)</title><rect x="28.1443%" y="325" width="0.5155%" height="15" fill="rgb(233,213,13)" fg:x="546" fg:w="10"/><text x="28.3943%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.05%)</title><rect x="28.6082%" y="309" width="0.0515%" height="15" fill="rgb(233,141,41)" fg:x="555" fg:w="1"/><text x="28.8582%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="29.3814%" y="341" width="0.0515%" height="15" fill="rgb(239,167,4)" fg:x="570" fg:w="1"/><text x="29.6314%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.41%)</title><rect x="29.4330%" y="341" width="0.4124%" height="15" fill="rgb(209,217,16)" fg:x="571" fg:w="8"/><text x="29.6830%" y="351.50"></text></g><g><title>core::str::validations::run_utf8_validation (8 samples, 0.41%)</title><rect x="29.4330%" y="325" width="0.4124%" height="15" fill="rgb(219,88,35)" fg:x="571" fg:w="8"/><text x="29.6830%" y="335.50"></text></g><g><title>core::str::validations::contains_nonascii (1 samples, 0.05%)</title><rect x="29.7938%" y="309" width="0.0515%" height="15" fill="rgb(220,193,23)" fg:x="578" fg:w="1"/><text x="30.0438%" y="319.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_id (24 samples, 1.24%)</title><rect x="28.6598%" y="357" width="1.2371%" height="15" fill="rgb(230,90,52)" fg:x="556" fg:w="24"/><text x="28.9098%" y="367.50"></text></g><g><title>mi_malloc (1 samples, 0.05%)</title><rect x="29.8454%" y="341" width="0.0515%" height="15" fill="rgb(252,106,19)" fg:x="579" fg:w="1"/><text x="30.0954%" y="351.50"></text></g><g><title>__entry_text_start (1 samples, 0.05%)</title><rect x="42.4227%" y="293" width="0.0515%" height="15" fill="rgb(206,74,20)" fg:x="823" fg:w="1"/><text x="42.6727%" y="303.50"></text></g><g><title>copy_user_generic_string (8 samples, 0.41%)</title><rect x="42.4742%" y="149" width="0.4124%" height="15" fill="rgb(230,138,44)" fg:x="824" fg:w="8"/><text x="42.7242%" y="159.50"></text></g><g><title>__x64_sys_read (10 samples, 0.52%)</title><rect x="42.4742%" y="261" width="0.5155%" height="15" fill="rgb(235,182,43)" fg:x="824" fg:w="10"/><text x="42.7242%" y="271.50"></text></g><g><title>ksys_read (10 samples, 0.52%)</title><rect x="42.4742%" y="245" width="0.5155%" height="15" fill="rgb(242,16,51)" fg:x="824" fg:w="10"/><text x="42.7242%" y="255.50"></text></g><g><title>vfs_read (10 samples, 0.52%)</title><rect x="42.4742%" y="229" width="0.5155%" height="15" fill="rgb(248,9,4)" fg:x="824" fg:w="10"/><text x="42.7242%" y="239.50"></text></g><g><title>new_sync_read (10 samples, 0.52%)</title><rect x="42.4742%" y="213" width="0.5155%" height="15" fill="rgb(210,31,22)" fg:x="824" fg:w="10"/><text x="42.7242%" y="223.50"></text></g><g><title>ext4_file_read_iter (10 samples, 0.52%)</title><rect x="42.4742%" y="197" width="0.5155%" height="15" fill="rgb(239,54,39)" fg:x="824" fg:w="10"/><text x="42.7242%" y="207.50"></text></g><g><title>generic_file_read_iter (10 samples, 0.52%)</title><rect x="42.4742%" y="181" width="0.5155%" height="15" fill="rgb(230,99,41)" fg:x="824" fg:w="10"/><text x="42.7242%" y="191.50"></text></g><g><title>filemap_read (10 samples, 0.52%)</title><rect x="42.4742%" y="165" width="0.5155%" height="15" fill="rgb(253,106,12)" fg:x="824" fg:w="10"/><text x="42.7242%" y="175.50"></text></g><g><title>filemap_get_pages (2 samples, 0.10%)</title><rect x="42.8866%" y="149" width="0.1031%" height="15" fill="rgb(213,46,41)" fg:x="832" fg:w="2"/><text x="43.1366%" y="159.50"></text></g><g><title>filemap_get_read_batch (2 samples, 0.10%)</title><rect x="42.8866%" y="133" width="0.1031%" height="15" fill="rgb(215,133,35)" fg:x="832" fg:w="2"/><text x="43.1366%" y="143.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (12 samples, 0.62%)</title><rect x="42.4227%" y="325" width="0.6186%" height="15" fill="rgb(213,28,5)" fg:x="823" fg:w="12"/><text x="42.6727%" y="335.50"></text></g><g><title>__libc_read (12 samples, 0.62%)</title><rect x="42.4227%" y="309" width="0.6186%" height="15" fill="rgb(215,77,49)" fg:x="823" fg:w="12"/><text x="42.6727%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (11 samples, 0.57%)</title><rect x="42.4742%" y="293" width="0.5670%" height="15" fill="rgb(248,100,22)" fg:x="824" fg:w="11"/><text x="42.7242%" y="303.50"></text></g><g><title>do_syscall_64 (11 samples, 0.57%)</title><rect x="42.4742%" y="277" width="0.5670%" height="15" fill="rgb(208,67,9)" fg:x="824" fg:w="11"/><text x="42.7242%" y="287.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.05%)</title><rect x="42.9897%" y="261" width="0.0515%" height="15" fill="rgb(219,133,21)" fg:x="834" fg:w="1"/><text x="43.2397%" y="271.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.05%)</title><rect x="42.9897%" y="245" width="0.0515%" height="15" fill="rgb(246,46,29)" fg:x="834" fg:w="1"/><text x="43.2397%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (18 samples, 0.93%)</title><rect x="43.0412%" y="325" width="0.9278%" height="15" fill="rgb(246,185,52)" fg:x="835" fg:w="18"/><text x="43.2912%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (239 samples, 12.32%)</title><rect x="34.1237%" y="341" width="12.3196%" height="15" fill="rgb(252,136,11)" fg:x="662" fg:w="239"/><text x="34.3737%" y="351.50">&lt;std::io::buffered..</text></g><g><title>__memmove_avx_unaligned (48 samples, 2.47%)</title><rect x="43.9691%" y="325" width="2.4742%" height="15" fill="rgb(219,138,53)" fg:x="853" fg:w="48"/><text x="44.2191%" y="335.50">__..</text></g><g><title>__memcpy_avx_unaligned_erms (12 samples, 0.62%)</title><rect x="46.4433%" y="341" width="0.6186%" height="15" fill="rgb(211,51,23)" fg:x="901" fg:w="12"/><text x="46.6933%" y="351.50"></text></g><g><title>__memmove_avx_unaligned (1 samples, 0.05%)</title><rect x="47.0619%" y="341" width="0.0515%" height="15" fill="rgb(247,221,28)" fg:x="913" fg:w="1"/><text x="47.3119%" y="351.50"></text></g><g><title>_mi_bin (2 samples, 0.10%)</title><rect x="47.3196%" y="325" width="0.1031%" height="15" fill="rgb(251,222,45)" fg:x="918" fg:w="2"/><text x="47.5696%" y="335.50"></text></g><g><title>_mi_deferred_free (2 samples, 0.10%)</title><rect x="47.4227%" y="325" width="0.1031%" height="15" fill="rgb(217,162,53)" fg:x="920" fg:w="2"/><text x="47.6727%" y="335.50"></text></g><g><title>_mi_heap_delayed_free (3 samples, 0.15%)</title><rect x="47.5258%" y="325" width="0.1546%" height="15" fill="rgb(229,93,14)" fg:x="922" fg:w="3"/><text x="47.7758%" y="335.50"></text></g><g><title>_mi_os_good_alloc_size (7 samples, 0.36%)</title><rect x="47.6804%" y="325" width="0.3608%" height="15" fill="rgb(209,67,49)" fg:x="925" fg:w="7"/><text x="47.9304%" y="335.50"></text></g><g><title>_mi_segment_page_alloc (2 samples, 0.10%)</title><rect x="48.1959%" y="309" width="0.1031%" height="15" fill="rgb(213,87,29)" fg:x="935" fg:w="2"/><text x="48.4459%" y="319.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (3 samples, 0.15%)</title><rect x="48.2990%" y="309" width="0.1546%" height="15" fill="rgb(205,151,52)" fg:x="937" fg:w="3"/><text x="48.5490%" y="319.50"></text></g><g><title>_mi_segment_page_start (2 samples, 0.10%)</title><rect x="48.3505%" y="293" width="0.1031%" height="15" fill="rgb(253,215,39)" fg:x="938" fg:w="2"/><text x="48.6005%" y="303.50"></text></g><g><title>_mi_clock_now (22 samples, 1.13%)</title><rect x="48.4536%" y="293" width="1.1340%" height="15" fill="rgb(221,220,41)" fg:x="940" fg:w="22"/><text x="48.7036%" y="303.50"></text></g><g><title>__clock_gettime_2 (19 samples, 0.98%)</title><rect x="48.6082%" y="277" width="0.9794%" height="15" fill="rgb(218,133,21)" fg:x="943" fg:w="19"/><text x="48.8582%" y="287.50"></text></g><g><title>[[vdso]] (19 samples, 0.98%)</title><rect x="48.6082%" y="261" width="0.9794%" height="15" fill="rgb(221,193,43)" fg:x="943" fg:w="19"/><text x="48.8582%" y="271.50"></text></g><g><title>[[vdso]] (13 samples, 0.67%)</title><rect x="48.9175%" y="245" width="0.6701%" height="15" fill="rgb(240,128,52)" fg:x="949" fg:w="13"/><text x="49.1675%" y="255.50"></text></g><g><title>_mi_clock_now (17 samples, 0.88%)</title><rect x="50.9278%" y="245" width="0.8763%" height="15" fill="rgb(253,114,12)" fg:x="988" fg:w="17"/><text x="51.1778%" y="255.50"></text></g><g><title>__clock_gettime_2 (14 samples, 0.72%)</title><rect x="51.0825%" y="229" width="0.7216%" height="15" fill="rgb(215,223,47)" fg:x="991" fg:w="14"/><text x="51.3325%" y="239.50"></text></g><g><title>[[vdso]] (14 samples, 0.72%)</title><rect x="51.0825%" y="213" width="0.7216%" height="15" fill="rgb(248,225,23)" fg:x="991" fg:w="14"/><text x="51.3325%" y="223.50"></text></g><g><title>[[vdso]] (11 samples, 0.57%)</title><rect x="51.2371%" y="197" width="0.5670%" height="15" fill="rgb(250,108,0)" fg:x="994" fg:w="11"/><text x="51.4871%" y="207.50"></text></g><g><title>mi_option_get (1 samples, 0.05%)</title><rect x="51.8041%" y="245" width="0.0515%" height="15" fill="rgb(228,208,7)" fg:x="1005" fg:w="1"/><text x="52.0541%" y="255.50"></text></g><g><title>mi_segment_span_allocate.isra.0 (51 samples, 2.63%)</title><rect x="49.7938%" y="277" width="2.6289%" height="15" fill="rgb(244,45,10)" fg:x="966" fg:w="51"/><text x="50.0438%" y="287.50">mi..</text></g><g><title>mi_segment_commitx (43 samples, 2.22%)</title><rect x="50.2062%" y="261" width="2.2165%" height="15" fill="rgb(207,125,25)" fg:x="974" fg:w="43"/><text x="50.4562%" y="271.50">m..</text></g><g><title>mi_segment_commit_mask.part.0 (11 samples, 0.57%)</title><rect x="51.8557%" y="245" width="0.5670%" height="15" fill="rgb(210,195,18)" fg:x="1006" fg:w="11"/><text x="52.1057%" y="255.50"></text></g><g><title>_mi_clock_now (10 samples, 0.52%)</title><rect x="53.1959%" y="245" width="0.5155%" height="15" fill="rgb(249,80,12)" fg:x="1032" fg:w="10"/><text x="53.4459%" y="255.50"></text></g><g><title>__clock_gettime_2 (6 samples, 0.31%)</title><rect x="53.4021%" y="229" width="0.3093%" height="15" fill="rgb(221,65,9)" fg:x="1036" fg:w="6"/><text x="53.6521%" y="239.50"></text></g><g><title>[[vdso]] (6 samples, 0.31%)</title><rect x="53.4021%" y="213" width="0.3093%" height="15" fill="rgb(235,49,36)" fg:x="1036" fg:w="6"/><text x="53.6521%" y="223.50"></text></g><g><title>[[vdso]] (6 samples, 0.31%)</title><rect x="53.4021%" y="197" width="0.3093%" height="15" fill="rgb(225,32,20)" fg:x="1036" fg:w="6"/><text x="53.6521%" y="207.50"></text></g><g><title>mi_option_get (6 samples, 0.31%)</title><rect x="53.7113%" y="245" width="0.3093%" height="15" fill="rgb(215,141,46)" fg:x="1042" fg:w="6"/><text x="53.9613%" y="255.50"></text></g><g><title>_mi_malloc_generic (143 samples, 7.37%)</title><rect x="47.1134%" y="341" width="7.3711%" height="15" fill="rgb(250,160,47)" fg:x="914" fg:w="143"/><text x="47.3634%" y="351.50">_mi_malloc..</text></g><g><title>mi_page_fresh_alloc (125 samples, 6.44%)</title><rect x="48.0412%" y="325" width="6.4433%" height="15" fill="rgb(216,222,40)" fg:x="932" fg:w="125"/><text x="48.2912%" y="335.50">mi_page_..</text></g><g><title>mi_segments_page_alloc.constprop.1 (117 samples, 6.03%)</title><rect x="48.4536%" y="309" width="6.0309%" height="15" fill="rgb(234,217,39)" fg:x="940" fg:w="117"/><text x="48.7036%" y="319.50">mi_segme..</text></g><g><title>mi_segments_page_find_and_allocate (95 samples, 4.90%)</title><rect x="49.5876%" y="293" width="4.8969%" height="15" fill="rgb(207,178,40)" fg:x="962" fg:w="95"/><text x="49.8376%" y="303.50">mi_seg..</text></g><g><title>mi_segment_span_free (40 samples, 2.06%)</title><rect x="52.4227%" y="277" width="2.0619%" height="15" fill="rgb(221,136,13)" fg:x="1017" fg:w="40"/><text x="52.6727%" y="287.50">m..</text></g><g><title>mi_segment_perhaps_decommit (35 samples, 1.80%)</title><rect x="52.6804%" y="261" width="1.8041%" height="15" fill="rgb(249,199,10)" fg:x="1022" fg:w="35"/><text x="52.9304%" y="271.50">m..</text></g><g><title>mi_segment_commit_mask.part.0 (9 samples, 0.46%)</title><rect x="54.0206%" y="245" width="0.4639%" height="15" fill="rgb(249,222,13)" fg:x="1048" fg:w="9"/><text x="54.2706%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="54.4845%" y="341" width="0.0515%" height="15" fill="rgb(244,185,38)" fg:x="1057" fg:w="1"/><text x="54.7345%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="54.4845%" y="325" width="0.0515%" height="15" fill="rgb(236,202,9)" fg:x="1057" fg:w="1"/><text x="54.7345%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="54.4845%" y="309" width="0.0515%" height="15" fill="rgb(250,229,37)" fg:x="1057" fg:w="1"/><text x="54.7345%" y="319.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.05%)</title><rect x="54.4845%" y="293" width="0.0515%" height="15" fill="rgb(206,174,23)" fg:x="1057" fg:w="1"/><text x="54.7345%" y="303.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.05%)</title><rect x="54.4845%" y="277" width="0.0515%" height="15" fill="rgb(211,33,43)" fg:x="1057" fg:w="1"/><text x="54.7345%" y="287.50"></text></g><g><title>tick_sched_timer (1 samples, 0.05%)</title><rect x="54.4845%" y="261" width="0.0515%" height="15" fill="rgb(245,58,50)" fg:x="1057" fg:w="1"/><text x="54.7345%" y="271.50"></text></g><g><title>update_process_times (1 samples, 0.05%)</title><rect x="54.4845%" y="245" width="0.0515%" height="15" fill="rgb(244,68,36)" fg:x="1057" fg:w="1"/><text x="54.7345%" y="255.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_sequence (480 samples, 24.74%)</title><rect x="29.8969%" y="357" width="24.7423%" height="15" fill="rgb(232,229,15)" fg:x="580" fg:w="480"/><text x="30.1469%" y="367.50">libsfasta::formats::sfasta::Sfasta::get..</text></g><g><title>mi_malloc (2 samples, 0.10%)</title><rect x="54.5361%" y="341" width="0.1031%" height="15" fill="rgb(254,30,23)" fg:x="1058" fg:w="2"/><text x="54.7861%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.05%)</title><rect x="56.8041%" y="325" width="0.0515%" height="15" fill="rgb(235,160,14)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="335.50"></text></g><g><title>__libc_read (1 samples, 0.05%)</title><rect x="56.8041%" y="309" width="0.0515%" height="15" fill="rgb(212,155,44)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.05%)</title><rect x="56.8041%" y="293" width="0.0515%" height="15" fill="rgb(226,2,50)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.05%)</title><rect x="56.8041%" y="277" width="0.0515%" height="15" fill="rgb(234,177,6)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="287.50"></text></g><g><title>__x64_sys_read (1 samples, 0.05%)</title><rect x="56.8041%" y="261" width="0.0515%" height="15" fill="rgb(217,24,9)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="271.50"></text></g><g><title>ksys_read (1 samples, 0.05%)</title><rect x="56.8041%" y="245" width="0.0515%" height="15" fill="rgb(220,13,46)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="255.50"></text></g><g><title>vfs_read (1 samples, 0.05%)</title><rect x="56.8041%" y="229" width="0.0515%" height="15" fill="rgb(239,221,27)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="239.50"></text></g><g><title>new_sync_read (1 samples, 0.05%)</title><rect x="56.8041%" y="213" width="0.0515%" height="15" fill="rgb(222,198,25)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="223.50"></text></g><g><title>ext4_file_read_iter (1 samples, 0.05%)</title><rect x="56.8041%" y="197" width="0.0515%" height="15" fill="rgb(211,99,13)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="207.50"></text></g><g><title>generic_file_read_iter (1 samples, 0.05%)</title><rect x="56.8041%" y="181" width="0.0515%" height="15" fill="rgb(232,111,31)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="191.50"></text></g><g><title>filemap_read (1 samples, 0.05%)</title><rect x="56.8041%" y="165" width="0.0515%" height="15" fill="rgb(245,82,37)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="175.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.05%)</title><rect x="56.8041%" y="149" width="0.0515%" height="15" fill="rgb(227,149,46)" fg:x="1102" fg:w="1"/><text x="57.0541%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.31%)</title><rect x="56.8557%" y="325" width="0.3093%" height="15" fill="rgb(218,36,50)" fg:x="1103" fg:w="6"/><text x="57.1057%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (26 samples, 1.34%)</title><rect x="56.0825%" y="341" width="1.3402%" height="15" fill="rgb(226,80,48)" fg:x="1088" fg:w="26"/><text x="56.3325%" y="351.50"></text></g><g><title>__memmove_avx_unaligned (5 samples, 0.26%)</title><rect x="57.1649%" y="325" width="0.2577%" height="15" fill="rgb(238,224,15)" fg:x="1109" fg:w="5"/><text x="57.4149%" y="335.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.05%)</title><rect x="57.4227%" y="197" width="0.0515%" height="15" fill="rgb(241,136,10)" fg:x="1114" fg:w="1"/><text x="57.6727%" y="207.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="57.4227%" y="181" width="0.0515%" height="15" fill="rgb(208,32,45)" fg:x="1114" fg:w="1"/><text x="57.6727%" y="191.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="57.4227%" y="165" width="0.0515%" height="15" fill="rgb(207,135,9)" fg:x="1114" fg:w="1"/><text x="57.6727%" y="175.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="57.4227%" y="149" width="0.0515%" height="15" fill="rgb(206,86,44)" fg:x="1114" fg:w="1"/><text x="57.6727%" y="159.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="57.4227%" y="133" width="0.0515%" height="15" fill="rgb(245,177,15)" fg:x="1114" fg:w="1"/><text x="57.6727%" y="143.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="57.4227%" y="117" width="0.0515%" height="15" fill="rgb(206,64,50)" fg:x="1114" fg:w="1"/><text x="57.6727%" y="127.50"></text></g><g><title>ZSTD_freeDCtx (2 samples, 0.10%)</title><rect x="57.4227%" y="341" width="0.1031%" height="15" fill="rgb(234,36,40)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="351.50"></text></g><g><title>__free (2 samples, 0.10%)</title><rect x="57.4227%" y="325" width="0.1031%" height="15" fill="rgb(213,64,8)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="335.50"></text></g><g><title>__GI___munmap (2 samples, 0.10%)</title><rect x="57.4227%" y="309" width="0.1031%" height="15" fill="rgb(210,75,36)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.10%)</title><rect x="57.4227%" y="293" width="0.1031%" height="15" fill="rgb(229,88,21)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="303.50"></text></g><g><title>do_syscall_64 (2 samples, 0.10%)</title><rect x="57.4227%" y="277" width="0.1031%" height="15" fill="rgb(252,204,47)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="287.50"></text></g><g><title>__x64_sys_munmap (2 samples, 0.10%)</title><rect x="57.4227%" y="261" width="0.1031%" height="15" fill="rgb(208,77,27)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="271.50"></text></g><g><title>__vm_munmap (2 samples, 0.10%)</title><rect x="57.4227%" y="245" width="0.1031%" height="15" fill="rgb(221,76,26)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="255.50"></text></g><g><title>__do_munmap (2 samples, 0.10%)</title><rect x="57.4227%" y="229" width="0.1031%" height="15" fill="rgb(225,139,18)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="239.50"></text></g><g><title>unmap_region (2 samples, 0.10%)</title><rect x="57.4227%" y="213" width="0.1031%" height="15" fill="rgb(230,137,11)" fg:x="1114" fg:w="2"/><text x="57.6727%" y="223.50"></text></g><g><title>unmap_vmas (1 samples, 0.05%)</title><rect x="57.4742%" y="197" width="0.0515%" height="15" fill="rgb(212,28,1)" fg:x="1115" fg:w="1"/><text x="57.7242%" y="207.50"></text></g><g><title>unmap_single_vma (1 samples, 0.05%)</title><rect x="57.4742%" y="181" width="0.0515%" height="15" fill="rgb(248,164,17)" fg:x="1115" fg:w="1"/><text x="57.7242%" y="191.50"></text></g><g><title>unmap_page_range (1 samples, 0.05%)</title><rect x="57.4742%" y="165" width="0.0515%" height="15" fill="rgb(222,171,42)" fg:x="1115" fg:w="1"/><text x="57.7242%" y="175.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.05%)</title><rect x="57.4742%" y="149" width="0.0515%" height="15" fill="rgb(243,84,45)" fg:x="1115" fg:w="1"/><text x="57.7242%" y="159.50"></text></g><g><title>zap_pte_range (1 samples, 0.05%)</title><rect x="57.4742%" y="133" width="0.0515%" height="15" fill="rgb(252,49,23)" fg:x="1115" fg:w="1"/><text x="57.7242%" y="143.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.05%)</title><rect x="57.5258%" y="341" width="0.0515%" height="15" fill="rgb(215,19,7)" fg:x="1116" fg:w="1"/><text x="57.7758%" y="351.50"></text></g><g><title>clear_page_rep (11 samples, 0.57%)</title><rect x="58.8660%" y="165" width="0.5670%" height="15" fill="rgb(238,81,41)" fg:x="1142" fg:w="11"/><text x="59.1160%" y="175.50"></text></g><g><title>alloc_pages_vma (20 samples, 1.03%)</title><rect x="58.8660%" y="213" width="1.0309%" height="15" fill="rgb(210,199,37)" fg:x="1142" fg:w="20"/><text x="59.1160%" y="223.50"></text></g><g><title>__alloc_pages (20 samples, 1.03%)</title><rect x="58.8660%" y="197" width="1.0309%" height="15" fill="rgb(244,192,49)" fg:x="1142" fg:w="20"/><text x="59.1160%" y="207.50"></text></g><g><title>get_page_from_freelist (20 samples, 1.03%)</title><rect x="58.8660%" y="181" width="1.0309%" height="15" fill="rgb(226,211,11)" fg:x="1142" fg:w="20"/><text x="59.1160%" y="191.50"></text></g><g><title>rmqueue (9 samples, 0.46%)</title><rect x="59.4330%" y="165" width="0.4639%" height="15" fill="rgb(236,162,54)" fg:x="1153" fg:w="9"/><text x="59.6830%" y="175.50"></text></g><g><title>rmqueue_bulk.constprop.0 (7 samples, 0.36%)</title><rect x="59.5361%" y="149" width="0.3608%" height="15" fill="rgb(220,229,9)" fg:x="1155" fg:w="7"/><text x="59.7861%" y="159.50"></text></g><g><title>cgroup_throttle_swaprate (1 samples, 0.05%)</title><rect x="59.8969%" y="213" width="0.0515%" height="15" fill="rgb(250,87,22)" fg:x="1162" fg:w="1"/><text x="60.1469%" y="223.50"></text></g><g><title>handle_mm_fault (25 samples, 1.29%)</title><rect x="58.7113%" y="277" width="1.2887%" height="15" fill="rgb(239,43,17)" fg:x="1139" fg:w="25"/><text x="58.9613%" y="287.50"></text></g><g><title>__handle_mm_fault (25 samples, 1.29%)</title><rect x="58.7113%" y="261" width="1.2887%" height="15" fill="rgb(231,177,25)" fg:x="1139" fg:w="25"/><text x="58.9613%" y="271.50"></text></g><g><title>handle_pte_fault (23 samples, 1.19%)</title><rect x="58.8144%" y="245" width="1.1856%" height="15" fill="rgb(219,179,1)" fg:x="1141" fg:w="23"/><text x="59.0644%" y="255.50"></text></g><g><title>do_anonymous_page (22 samples, 1.13%)</title><rect x="58.8660%" y="229" width="1.1340%" height="15" fill="rgb(238,219,53)" fg:x="1142" fg:w="22"/><text x="59.1160%" y="239.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 0.05%)</title><rect x="59.9485%" y="213" width="0.0515%" height="15" fill="rgb(232,167,36)" fg:x="1163" fg:w="1"/><text x="60.1985%" y="223.50"></text></g><g><title>lru_cache_add (1 samples, 0.05%)</title><rect x="59.9485%" y="197" width="0.0515%" height="15" fill="rgb(244,19,51)" fg:x="1163" fg:w="1"/><text x="60.1985%" y="207.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.05%)</title><rect x="59.9485%" y="181" width="0.0515%" height="15" fill="rgb(224,6,22)" fg:x="1163" fg:w="1"/><text x="60.1985%" y="191.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.05%)</title><rect x="59.9485%" y="165" width="0.0515%" height="15" fill="rgb(224,145,5)" fg:x="1163" fg:w="1"/><text x="60.1985%" y="175.50"></text></g><g><title>do_user_addr_fault (26 samples, 1.34%)</title><rect x="58.7113%" y="293" width="1.3402%" height="15" fill="rgb(234,130,49)" fg:x="1139" fg:w="26"/><text x="58.9613%" y="303.50"></text></g><g><title>mem_cgroup_from_task (1 samples, 0.05%)</title><rect x="60.0000%" y="277" width="0.0515%" height="15" fill="rgb(254,6,2)" fg:x="1164" fg:w="1"/><text x="60.2500%" y="287.50"></text></g><g><title>asm_exc_page_fault (36 samples, 1.86%)</title><rect x="58.2474%" y="325" width="1.8557%" height="15" fill="rgb(208,96,46)" fg:x="1130" fg:w="36"/><text x="58.4974%" y="335.50">a..</text></g><g><title>exc_page_fault (27 samples, 1.39%)</title><rect x="58.7113%" y="309" width="1.3918%" height="15" fill="rgb(239,3,39)" fg:x="1139" fg:w="27"/><text x="58.9613%" y="319.50"></text></g><g><title>irqentry_exit (1 samples, 0.05%)</title><rect x="60.0515%" y="293" width="0.0515%" height="15" fill="rgb(233,210,1)" fg:x="1165" fg:w="1"/><text x="60.3015%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (50 samples, 2.58%)</title><rect x="57.5773%" y="341" width="2.5773%" height="15" fill="rgb(244,137,37)" fg:x="1117" fg:w="50"/><text x="57.8273%" y="351.50">__..</text></g><g><title>sync_regs (1 samples, 0.05%)</title><rect x="60.1031%" y="325" width="0.0515%" height="15" fill="rgb(240,136,2)" fg:x="1166" fg:w="1"/><text x="60.3531%" y="335.50"></text></g><g><title>clear_page_rep (13 samples, 0.67%)</title><rect x="60.4124%" y="181" width="0.6701%" height="15" fill="rgb(239,18,37)" fg:x="1172" fg:w="13"/><text x="60.6624%" y="191.50"></text></g><g><title>alloc_pages_vma (15 samples, 0.77%)</title><rect x="60.3608%" y="229" width="0.7732%" height="15" fill="rgb(218,185,22)" fg:x="1171" fg:w="15"/><text x="60.6108%" y="239.50"></text></g><g><title>__alloc_pages (14 samples, 0.72%)</title><rect x="60.4124%" y="213" width="0.7216%" height="15" fill="rgb(225,218,4)" fg:x="1172" fg:w="14"/><text x="60.6624%" y="223.50"></text></g><g><title>get_page_from_freelist (14 samples, 0.72%)</title><rect x="60.4124%" y="197" width="0.7216%" height="15" fill="rgb(230,182,32)" fg:x="1172" fg:w="14"/><text x="60.6624%" y="207.50"></text></g><g><title>rmqueue (1 samples, 0.05%)</title><rect x="61.0825%" y="181" width="0.0515%" height="15" fill="rgb(242,56,43)" fg:x="1185" fg:w="1"/><text x="61.3325%" y="191.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1 samples, 0.05%)</title><rect x="61.0825%" y="165" width="0.0515%" height="15" fill="rgb(233,99,24)" fg:x="1185" fg:w="1"/><text x="61.3325%" y="175.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (3 samples, 0.15%)</title><rect x="61.1340%" y="229" width="0.1546%" height="15" fill="rgb(234,209,42)" fg:x="1186" fg:w="3"/><text x="61.3840%" y="239.50"></text></g><g><title>lru_cache_add (3 samples, 0.15%)</title><rect x="61.1340%" y="213" width="0.1546%" height="15" fill="rgb(227,7,12)" fg:x="1186" fg:w="3"/><text x="61.3840%" y="223.50"></text></g><g><title>__pagevec_lru_add (3 samples, 0.15%)</title><rect x="61.1340%" y="197" width="0.1546%" height="15" fill="rgb(245,203,43)" fg:x="1186" fg:w="3"/><text x="61.3840%" y="207.50"></text></g><g><title>__pagevec_lru_add_fn (2 samples, 0.10%)</title><rect x="61.1856%" y="181" width="0.1031%" height="15" fill="rgb(238,205,33)" fg:x="1187" fg:w="2"/><text x="61.4356%" y="191.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.05%)</title><rect x="61.2371%" y="165" width="0.0515%" height="15" fill="rgb(231,56,7)" fg:x="1188" fg:w="1"/><text x="61.4871%" y="175.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.05%)</title><rect x="61.2371%" y="149" width="0.0515%" height="15" fill="rgb(244,186,29)" fg:x="1188" fg:w="1"/><text x="61.4871%" y="159.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (1 samples, 0.05%)</title><rect x="61.2887%" y="197" width="0.0515%" height="15" fill="rgb(234,111,31)" fg:x="1189" fg:w="1"/><text x="61.5387%" y="207.50"></text></g><g><title>mem_cgroup_charge (2 samples, 0.10%)</title><rect x="61.2887%" y="229" width="0.1031%" height="15" fill="rgb(241,149,10)" fg:x="1189" fg:w="2"/><text x="61.5387%" y="239.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.10%)</title><rect x="61.2887%" y="213" width="0.1031%" height="15" fill="rgb(249,206,44)" fg:x="1189" fg:w="2"/><text x="61.5387%" y="223.50"></text></g><g><title>try_charge (1 samples, 0.05%)</title><rect x="61.3402%" y="197" width="0.0515%" height="15" fill="rgb(251,153,30)" fg:x="1190" fg:w="1"/><text x="61.5902%" y="207.50"></text></g><g><title>asm_exc_page_fault (25 samples, 1.29%)</title><rect x="60.1546%" y="341" width="1.2887%" height="15" fill="rgb(239,152,38)" fg:x="1167" fg:w="25"/><text x="60.4046%" y="351.50"></text></g><g><title>exc_page_fault (22 samples, 1.13%)</title><rect x="60.3093%" y="325" width="1.1340%" height="15" fill="rgb(249,139,47)" fg:x="1170" fg:w="22"/><text x="60.5593%" y="335.50"></text></g><g><title>do_user_addr_fault (22 samples, 1.13%)</title><rect x="60.3093%" y="309" width="1.1340%" height="15" fill="rgb(244,64,35)" fg:x="1170" fg:w="22"/><text x="60.5593%" y="319.50"></text></g><g><title>handle_mm_fault (22 samples, 1.13%)</title><rect x="60.3093%" y="293" width="1.1340%" height="15" fill="rgb(216,46,15)" fg:x="1170" fg:w="22"/><text x="60.5593%" y="303.50"></text></g><g><title>__handle_mm_fault (22 samples, 1.13%)</title><rect x="60.3093%" y="277" width="1.1340%" height="15" fill="rgb(250,74,19)" fg:x="1170" fg:w="22"/><text x="60.5593%" y="287.50"></text></g><g><title>handle_pte_fault (21 samples, 1.08%)</title><rect x="60.3608%" y="261" width="1.0825%" height="15" fill="rgb(249,42,33)" fg:x="1171" fg:w="21"/><text x="60.6108%" y="271.50"></text></g><g><title>do_anonymous_page (21 samples, 1.08%)</title><rect x="60.3608%" y="245" width="1.0825%" height="15" fill="rgb(242,149,17)" fg:x="1171" fg:w="21"/><text x="60.6108%" y="255.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.05%)</title><rect x="61.3918%" y="229" width="0.0515%" height="15" fill="rgb(244,29,21)" fg:x="1191" fg:w="1"/><text x="61.6418%" y="239.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.05%)</title><rect x="61.3918%" y="213" width="0.0515%" height="15" fill="rgb(220,130,37)" fg:x="1191" fg:w="1"/><text x="61.6418%" y="223.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.05%)</title><rect x="61.3918%" y="197" width="0.0515%" height="15" fill="rgb(211,67,2)" fg:x="1191" fg:w="1"/><text x="61.6418%" y="207.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.05%)</title><rect x="61.3918%" y="181" width="0.0515%" height="15" fill="rgb(235,68,52)" fg:x="1191" fg:w="1"/><text x="61.6418%" y="191.50"></text></g><g><title>clear_page_rep (1 samples, 0.05%)</title><rect x="62.1134%" y="117" width="0.0515%" height="15" fill="rgb(246,142,3)" fg:x="1205" fg:w="1"/><text x="62.3634%" y="127.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (5 samples, 0.26%)</title><rect x="61.9588%" y="293" width="0.2577%" height="15" fill="rgb(241,25,7)" fg:x="1202" fg:w="5"/><text x="62.2088%" y="303.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.10%)</title><rect x="62.1134%" y="277" width="0.1031%" height="15" fill="rgb(242,119,39)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="287.50"></text></g><g><title>exc_page_fault (2 samples, 0.10%)</title><rect x="62.1134%" y="261" width="0.1031%" height="15" fill="rgb(241,98,45)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="271.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.10%)</title><rect x="62.1134%" y="245" width="0.1031%" height="15" fill="rgb(254,28,30)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="255.50"></text></g><g><title>handle_mm_fault (2 samples, 0.10%)</title><rect x="62.1134%" y="229" width="0.1031%" height="15" fill="rgb(241,142,54)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="239.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.10%)</title><rect x="62.1134%" y="213" width="0.1031%" height="15" fill="rgb(222,85,15)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="223.50"></text></g><g><title>handle_pte_fault (2 samples, 0.10%)</title><rect x="62.1134%" y="197" width="0.1031%" height="15" fill="rgb(210,85,47)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="207.50"></text></g><g><title>do_anonymous_page (2 samples, 0.10%)</title><rect x="62.1134%" y="181" width="0.1031%" height="15" fill="rgb(224,206,25)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="191.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.10%)</title><rect x="62.1134%" y="165" width="0.1031%" height="15" fill="rgb(243,201,19)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="175.50"></text></g><g><title>__alloc_pages (2 samples, 0.10%)</title><rect x="62.1134%" y="149" width="0.1031%" height="15" fill="rgb(236,59,4)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="159.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.10%)</title><rect x="62.1134%" y="133" width="0.1031%" height="15" fill="rgb(254,179,45)" fg:x="1205" fg:w="2"/><text x="62.3634%" y="143.50"></text></g><g><title>rmqueue (1 samples, 0.05%)</title><rect x="62.1649%" y="117" width="0.0515%" height="15" fill="rgb(226,14,10)" fg:x="1206" fg:w="1"/><text x="62.4149%" y="127.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1 samples, 0.05%)</title><rect x="62.1649%" y="101" width="0.0515%" height="15" fill="rgb(244,27,41)" fg:x="1206" fg:w="1"/><text x="62.4149%" y="111.50"></text></g><g><title>_mi_malloc_generic (6 samples, 0.31%)</title><rect x="61.9588%" y="325" width="0.3093%" height="15" fill="rgb(235,35,32)" fg:x="1202" fg:w="6"/><text x="62.2088%" y="335.50"></text></g><g><title>mi_page_queue_find_free_ex (6 samples, 0.31%)</title><rect x="61.9588%" y="309" width="0.3093%" height="15" fill="rgb(218,68,31)" fg:x="1202" fg:w="6"/><text x="62.2088%" y="319.50"></text></g><g><title>mi_page_fresh_alloc (1 samples, 0.05%)</title><rect x="62.2165%" y="293" width="0.0515%" height="15" fill="rgb(207,120,37)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="303.50"></text></g><g><title>mi_page_free_list_extend.constprop.0 (1 samples, 0.05%)</title><rect x="62.2165%" y="277" width="0.0515%" height="15" fill="rgb(227,98,0)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="287.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.05%)</title><rect x="62.2165%" y="261" width="0.0515%" height="15" fill="rgb(207,7,3)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="271.50"></text></g><g><title>exc_page_fault (1 samples, 0.05%)</title><rect x="62.2165%" y="245" width="0.0515%" height="15" fill="rgb(206,98,19)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="255.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.05%)</title><rect x="62.2165%" y="229" width="0.0515%" height="15" fill="rgb(217,5,26)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="239.50"></text></g><g><title>handle_mm_fault (1 samples, 0.05%)</title><rect x="62.2165%" y="213" width="0.0515%" height="15" fill="rgb(235,190,38)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="223.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.05%)</title><rect x="62.2165%" y="197" width="0.0515%" height="15" fill="rgb(247,86,24)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="207.50"></text></g><g><title>handle_pte_fault (1 samples, 0.05%)</title><rect x="62.2165%" y="181" width="0.0515%" height="15" fill="rgb(205,101,16)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="191.50"></text></g><g><title>do_anonymous_page (1 samples, 0.05%)</title><rect x="62.2165%" y="165" width="0.0515%" height="15" fill="rgb(246,168,33)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="175.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.05%)</title><rect x="62.2165%" y="149" width="0.0515%" height="15" fill="rgb(231,114,1)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="159.50"></text></g><g><title>__alloc_pages (1 samples, 0.05%)</title><rect x="62.2165%" y="133" width="0.0515%" height="15" fill="rgb(207,184,53)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="143.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.05%)</title><rect x="62.2165%" y="117" width="0.0515%" height="15" fill="rgb(224,95,51)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="127.50"></text></g><g><title>clear_page_rep (1 samples, 0.05%)</title><rect x="62.2165%" y="101" width="0.0515%" height="15" fill="rgb(212,188,45)" fg:x="1207" fg:w="1"/><text x="62.4665%" y="111.50"></text></g><g><title>bincode::de::impls::&lt;impl bincode::de::Decode for core::option::Option&lt;T&gt;&gt;::decode (21 samples, 1.08%)</title><rect x="61.4433%" y="341" width="1.0825%" height="15" fill="rgb(223,154,38)" fg:x="1192" fg:w="21"/><text x="61.6933%" y="351.50"></text></g><g><title>mi_malloc (5 samples, 0.26%)</title><rect x="62.2680%" y="325" width="0.2577%" height="15" fill="rgb(251,22,52)" fg:x="1208" fg:w="5"/><text x="62.5180%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.10%)</title><rect x="64.4845%" y="309" width="0.1031%" height="15" fill="rgb(229,209,22)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="319.50"></text></g><g><title>__libc_read (2 samples, 0.10%)</title><rect x="64.4845%" y="293" width="0.1031%" height="15" fill="rgb(234,138,34)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.10%)</title><rect x="64.4845%" y="277" width="0.1031%" height="15" fill="rgb(212,95,11)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="287.50"></text></g><g><title>do_syscall_64 (2 samples, 0.10%)</title><rect x="64.4845%" y="261" width="0.1031%" height="15" fill="rgb(240,179,47)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="271.50"></text></g><g><title>__x64_sys_read (2 samples, 0.10%)</title><rect x="64.4845%" y="245" width="0.1031%" height="15" fill="rgb(240,163,11)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="255.50"></text></g><g><title>ksys_read (2 samples, 0.10%)</title><rect x="64.4845%" y="229" width="0.1031%" height="15" fill="rgb(236,37,12)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="239.50"></text></g><g><title>vfs_read (2 samples, 0.10%)</title><rect x="64.4845%" y="213" width="0.1031%" height="15" fill="rgb(232,164,16)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="223.50"></text></g><g><title>new_sync_read (2 samples, 0.10%)</title><rect x="64.4845%" y="197" width="0.1031%" height="15" fill="rgb(244,205,15)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="207.50"></text></g><g><title>ext4_file_read_iter (2 samples, 0.10%)</title><rect x="64.4845%" y="181" width="0.1031%" height="15" fill="rgb(223,117,47)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="191.50"></text></g><g><title>generic_file_read_iter (2 samples, 0.10%)</title><rect x="64.4845%" y="165" width="0.1031%" height="15" fill="rgb(244,107,35)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="175.50"></text></g><g><title>filemap_read (2 samples, 0.10%)</title><rect x="64.4845%" y="149" width="0.1031%" height="15" fill="rgb(205,140,8)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="159.50"></text></g><g><title>copy_user_generic_string (2 samples, 0.10%)</title><rect x="64.4845%" y="133" width="0.1031%" height="15" fill="rgb(228,84,46)" fg:x="1251" fg:w="2"/><text x="64.7345%" y="143.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.15%)</title><rect x="64.5876%" y="309" width="0.1546%" height="15" fill="rgb(254,188,9)" fg:x="1253" fg:w="3"/><text x="64.8376%" y="319.50"></text></g><g><title>bincode::features::impl_std::decode_from_std_read (47 samples, 2.42%)</title><rect x="62.5258%" y="341" width="2.4227%" height="15" fill="rgb(206,112,54)" fg:x="1213" fg:w="47"/><text x="62.7758%" y="351.50">bi..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (34 samples, 1.75%)</title><rect x="63.1959%" y="325" width="1.7526%" height="15" fill="rgb(216,84,49)" fg:x="1226" fg:w="34"/><text x="63.4459%" y="335.50"></text></g><g><title>__memmove_avx_unaligned (4 samples, 0.21%)</title><rect x="64.7423%" y="309" width="0.2062%" height="15" fill="rgb(214,194,35)" fg:x="1256" fg:w="4"/><text x="64.9923%" y="319.50"></text></g><g><title>ZSTD_decodeLiteralsBlock (1 samples, 0.05%)</title><rect x="64.9485%" y="245" width="0.0515%" height="15" fill="rgb(249,28,3)" fg:x="1260" fg:w="1"/><text x="65.1985%" y="255.50"></text></g><g><title>HUF_decompress4X1_usingDTable_internal_bmi2_asm (1 samples, 0.05%)</title><rect x="64.9485%" y="229" width="0.0515%" height="15" fill="rgb(222,56,52)" fg:x="1260" fg:w="1"/><text x="65.1985%" y="239.50"></text></g><g><title>ZSTD_decodeSeqHeaders (1 samples, 0.05%)</title><rect x="65.0000%" y="245" width="0.0515%" height="15" fill="rgb(245,217,50)" fg:x="1261" fg:w="1"/><text x="65.2500%" y="255.50"></text></g><g><title>ZSTD_buildSeqTable.constprop.0 (1 samples, 0.05%)</title><rect x="65.0000%" y="229" width="0.0515%" height="15" fill="rgb(213,201,24)" fg:x="1261" fg:w="1"/><text x="65.2500%" y="239.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (1 samples, 0.05%)</title><rect x="65.0000%" y="213" width="0.0515%" height="15" fill="rgb(248,116,28)" fg:x="1261" fg:w="1"/><text x="65.2500%" y="223.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.05%)</title><rect x="66.2887%" y="85" width="0.0515%" height="15" fill="rgb(219,72,43)" fg:x="1286" fg:w="1"/><text x="66.5387%" y="95.50"></text></g><g><title>clear_page_rep (3 samples, 0.15%)</title><rect x="66.3402%" y="69" width="0.1546%" height="15" fill="rgb(209,138,14)" fg:x="1287" fg:w="3"/><text x="66.5902%" y="79.50"></text></g><g><title>handle_mm_fault (6 samples, 0.31%)</title><rect x="66.2371%" y="181" width="0.3093%" height="15" fill="rgb(222,18,33)" fg:x="1285" fg:w="6"/><text x="66.4871%" y="191.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.31%)</title><rect x="66.2371%" y="165" width="0.3093%" height="15" fill="rgb(213,199,7)" fg:x="1285" fg:w="6"/><text x="66.4871%" y="175.50"></text></g><g><title>handle_pte_fault (6 samples, 0.31%)</title><rect x="66.2371%" y="149" width="0.3093%" height="15" fill="rgb(250,110,10)" fg:x="1285" fg:w="6"/><text x="66.4871%" y="159.50"></text></g><g><title>do_anonymous_page (6 samples, 0.31%)</title><rect x="66.2371%" y="133" width="0.3093%" height="15" fill="rgb(248,123,6)" fg:x="1285" fg:w="6"/><text x="66.4871%" y="143.50"></text></g><g><title>alloc_pages_vma (6 samples, 0.31%)</title><rect x="66.2371%" y="117" width="0.3093%" height="15" fill="rgb(206,91,31)" fg:x="1285" fg:w="6"/><text x="66.4871%" y="127.50"></text></g><g><title>__alloc_pages (6 samples, 0.31%)</title><rect x="66.2371%" y="101" width="0.3093%" height="15" fill="rgb(211,154,13)" fg:x="1285" fg:w="6"/><text x="66.4871%" y="111.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.21%)</title><rect x="66.3402%" y="85" width="0.2062%" height="15" fill="rgb(225,148,7)" fg:x="1287" fg:w="4"/><text x="66.5902%" y="95.50"></text></g><g><title>rmqueue (1 samples, 0.05%)</title><rect x="66.4948%" y="69" width="0.0515%" height="15" fill="rgb(220,160,43)" fg:x="1290" fg:w="1"/><text x="66.7448%" y="79.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1 samples, 0.05%)</title><rect x="66.4948%" y="53" width="0.0515%" height="15" fill="rgb(213,52,39)" fg:x="1290" fg:w="1"/><text x="66.7448%" y="63.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.41%)</title><rect x="66.1856%" y="229" width="0.4124%" height="15" fill="rgb(243,137,7)" fg:x="1284" fg:w="8"/><text x="66.4356%" y="239.50"></text></g><g><title>exc_page_fault (7 samples, 0.36%)</title><rect x="66.2371%" y="213" width="0.3608%" height="15" fill="rgb(230,79,13)" fg:x="1285" fg:w="7"/><text x="66.4871%" y="223.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.36%)</title><rect x="66.2371%" y="197" width="0.3608%" height="15" fill="rgb(247,105,23)" fg:x="1285" fg:w="7"/><text x="66.4871%" y="207.50"></text></g><g><title>up_read (1 samples, 0.05%)</title><rect x="66.5464%" y="181" width="0.0515%" height="15" fill="rgb(223,179,41)" fg:x="1291" fg:w="1"/><text x="66.7964%" y="191.50"></text></g><g><title>ZSTD_decompressContinueStream (34 samples, 1.75%)</title><rect x="64.9485%" y="293" width="1.7526%" height="15" fill="rgb(218,9,34)" fg:x="1260" fg:w="34"/><text x="65.1985%" y="303.50"></text></g><g><title>ZSTD_decompressContinue (34 samples, 1.75%)</title><rect x="64.9485%" y="277" width="1.7526%" height="15" fill="rgb(222,106,8)" fg:x="1260" fg:w="34"/><text x="65.1985%" y="287.50"></text></g><g><title>ZSTD_decompressBlock_internal (34 samples, 1.75%)</title><rect x="64.9485%" y="261" width="1.7526%" height="15" fill="rgb(211,220,0)" fg:x="1260" fg:w="34"/><text x="65.1985%" y="271.50"></text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (32 samples, 1.65%)</title><rect x="65.0515%" y="245" width="1.6495%" height="15" fill="rgb(229,52,16)" fg:x="1262" fg:w="32"/><text x="65.3015%" y="255.50"></text></g><g><title>sync_regs (2 samples, 0.10%)</title><rect x="66.5979%" y="229" width="0.1031%" height="15" fill="rgb(212,155,18)" fg:x="1292" fg:w="2"/><text x="66.8479%" y="239.50"></text></g><g><title>ZSTD_decompressStream (36 samples, 1.86%)</title><rect x="64.9485%" y="309" width="1.8557%" height="15" fill="rgb(242,21,14)" fg:x="1260" fg:w="36"/><text x="65.1985%" y="319.50">Z..</text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.10%)</title><rect x="66.7010%" y="293" width="0.1031%" height="15" fill="rgb(222,19,48)" fg:x="1294" fg:w="2"/><text x="66.9510%" y="303.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (37 samples, 1.91%)</title><rect x="64.9485%" y="325" width="1.9072%" height="15" fill="rgb(232,45,27)" fg:x="1260" fg:w="37"/><text x="65.1985%" y="335.50">&lt;..</text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="66.8041%" y="309" width="0.0515%" height="15" fill="rgb(249,103,42)" fg:x="1296" fg:w="1"/><text x="67.0541%" y="319.50"></text></g><g><title>clear_page_rep (6 samples, 0.31%)</title><rect x="67.3711%" y="149" width="0.3093%" height="15" fill="rgb(246,81,33)" fg:x="1307" fg:w="6"/><text x="67.6211%" y="159.50"></text></g><g><title>alloc_pages_vma (7 samples, 0.36%)</title><rect x="67.3711%" y="197" width="0.3608%" height="15" fill="rgb(252,33,42)" fg:x="1307" fg:w="7"/><text x="67.6211%" y="207.50"></text></g><g><title>__alloc_pages (7 samples, 0.36%)</title><rect x="67.3711%" y="181" width="0.3608%" height="15" fill="rgb(209,212,41)" fg:x="1307" fg:w="7"/><text x="67.6211%" y="191.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.36%)</title><rect x="67.3711%" y="165" width="0.3608%" height="15" fill="rgb(207,154,6)" fg:x="1307" fg:w="7"/><text x="67.6211%" y="175.50"></text></g><g><title>rmqueue (1 samples, 0.05%)</title><rect x="67.6804%" y="149" width="0.0515%" height="15" fill="rgb(223,64,47)" fg:x="1313" fg:w="1"/><text x="67.9304%" y="159.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1 samples, 0.05%)</title><rect x="67.6804%" y="133" width="0.0515%" height="15" fill="rgb(211,161,38)" fg:x="1313" fg:w="1"/><text x="67.9304%" y="143.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 0.05%)</title><rect x="67.7320%" y="197" width="0.0515%" height="15" fill="rgb(219,138,40)" fg:x="1314" fg:w="1"/><text x="67.9820%" y="207.50"></text></g><g><title>lru_cache_add (1 samples, 0.05%)</title><rect x="67.7320%" y="181" width="0.0515%" height="15" fill="rgb(241,228,46)" fg:x="1314" fg:w="1"/><text x="67.9820%" y="191.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.05%)</title><rect x="67.7320%" y="165" width="0.0515%" height="15" fill="rgb(223,209,38)" fg:x="1314" fg:w="1"/><text x="67.9820%" y="175.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.05%)</title><rect x="67.7320%" y="149" width="0.0515%" height="15" fill="rgb(236,164,45)" fg:x="1314" fg:w="1"/><text x="67.9820%" y="159.50"></text></g><g><title>__memset_avx2_unaligned_erms (19 samples, 0.98%)</title><rect x="66.8557%" y="325" width="0.9794%" height="15" fill="rgb(231,15,5)" fg:x="1297" fg:w="19"/><text x="67.1057%" y="335.50"></text></g><g><title>asm_exc_page_fault (15 samples, 0.77%)</title><rect x="67.0619%" y="309" width="0.7732%" height="15" fill="rgb(252,35,15)" fg:x="1301" fg:w="15"/><text x="67.3119%" y="319.50"></text></g><g><title>exc_page_fault (12 samples, 0.62%)</title><rect x="67.2165%" y="293" width="0.6186%" height="15" fill="rgb(248,181,18)" fg:x="1304" fg:w="12"/><text x="67.4665%" y="303.50"></text></g><g><title>do_user_addr_fault (12 samples, 0.62%)</title><rect x="67.2165%" y="277" width="0.6186%" height="15" fill="rgb(233,39,42)" fg:x="1304" fg:w="12"/><text x="67.4665%" y="287.50"></text></g><g><title>handle_mm_fault (12 samples, 0.62%)</title><rect x="67.2165%" y="261" width="0.6186%" height="15" fill="rgb(238,110,33)" fg:x="1304" fg:w="12"/><text x="67.4665%" y="271.50"></text></g><g><title>__handle_mm_fault (12 samples, 0.62%)</title><rect x="67.2165%" y="245" width="0.6186%" height="15" fill="rgb(233,195,10)" fg:x="1304" fg:w="12"/><text x="67.4665%" y="255.50"></text></g><g><title>handle_pte_fault (9 samples, 0.46%)</title><rect x="67.3711%" y="229" width="0.4639%" height="15" fill="rgb(254,105,3)" fg:x="1307" fg:w="9"/><text x="67.6211%" y="239.50"></text></g><g><title>do_anonymous_page (9 samples, 0.46%)</title><rect x="67.3711%" y="213" width="0.4639%" height="15" fill="rgb(221,225,9)" fg:x="1307" fg:w="9"/><text x="67.6211%" y="223.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.05%)</title><rect x="67.7835%" y="197" width="0.0515%" height="15" fill="rgb(224,227,45)" fg:x="1315" fg:w="1"/><text x="68.0335%" y="207.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.05%)</title><rect x="67.7835%" y="181" width="0.0515%" height="15" fill="rgb(229,198,43)" fg:x="1315" fg:w="1"/><text x="68.0335%" y="191.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.05%)</title><rect x="67.7835%" y="165" width="0.0515%" height="15" fill="rgb(206,209,35)" fg:x="1315" fg:w="1"/><text x="68.0335%" y="175.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="68.5567%" y="213" width="0.0515%" height="15" fill="rgb(245,195,53)" fg:x="1330" fg:w="1"/><text x="68.8067%" y="223.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.05%)</title><rect x="68.5567%" y="197" width="0.0515%" height="15" fill="rgb(240,92,26)" fg:x="1330" fg:w="1"/><text x="68.8067%" y="207.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.05%)</title><rect x="68.5567%" y="181" width="0.0515%" height="15" fill="rgb(207,40,23)" fg:x="1330" fg:w="1"/><text x="68.8067%" y="191.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.05%)</title><rect x="68.5567%" y="165" width="0.0515%" height="15" fill="rgb(223,111,35)" fg:x="1330" fg:w="1"/><text x="68.8067%" y="175.50"></text></g><g><title>rcu_core_si (1 samples, 0.05%)</title><rect x="68.5567%" y="149" width="0.0515%" height="15" fill="rgb(229,147,28)" fg:x="1330" fg:w="1"/><text x="68.8067%" y="159.50"></text></g><g><title>rcu_core (1 samples, 0.05%)</title><rect x="68.5567%" y="133" width="0.0515%" height="15" fill="rgb(211,29,28)" fg:x="1330" fg:w="1"/><text x="68.8067%" y="143.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.15%)</title><rect x="68.5567%" y="229" width="0.1546%" height="15" fill="rgb(228,72,33)" fg:x="1330" fg:w="3"/><text x="68.8067%" y="239.50"></text></g><g><title>handle_mm_fault (2 samples, 0.10%)</title><rect x="68.6082%" y="213" width="0.1031%" height="15" fill="rgb(205,214,31)" fg:x="1331" fg:w="2"/><text x="68.8582%" y="223.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.10%)</title><rect x="68.6082%" y="197" width="0.1031%" height="15" fill="rgb(224,111,15)" fg:x="1331" fg:w="2"/><text x="68.8582%" y="207.50"></text></g><g><title>handle_pte_fault (2 samples, 0.10%)</title><rect x="68.6082%" y="181" width="0.1031%" height="15" fill="rgb(253,21,26)" fg:x="1331" fg:w="2"/><text x="68.8582%" y="191.50"></text></g><g><title>do_anonymous_page (2 samples, 0.10%)</title><rect x="68.6082%" y="165" width="0.1031%" height="15" fill="rgb(245,139,43)" fg:x="1331" fg:w="2"/><text x="68.8582%" y="175.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.10%)</title><rect x="68.6082%" y="149" width="0.1031%" height="15" fill="rgb(252,170,7)" fg:x="1331" fg:w="2"/><text x="68.8582%" y="159.50"></text></g><g><title>__alloc_pages (2 samples, 0.10%)</title><rect x="68.6082%" y="133" width="0.1031%" height="15" fill="rgb(231,118,14)" fg:x="1331" fg:w="2"/><text x="68.8582%" y="143.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.10%)</title><rect x="68.6082%" y="117" width="0.1031%" height="15" fill="rgb(238,83,0)" fg:x="1331" fg:w="2"/><text x="68.8582%" y="127.50"></text></g><g><title>clear_page_rep (2 samples, 0.10%)</title><rect x="68.6082%" y="101" width="0.1031%" height="15" fill="rgb(221,39,39)" fg:x="1331" fg:w="2"/><text x="68.8582%" y="111.50"></text></g><g><title>asm_exc_page_fault (10 samples, 0.52%)</title><rect x="68.2474%" y="261" width="0.5155%" height="15" fill="rgb(222,119,46)" fg:x="1324" fg:w="10"/><text x="68.4974%" y="271.50"></text></g><g><title>exc_page_fault (4 samples, 0.21%)</title><rect x="68.5567%" y="245" width="0.2062%" height="15" fill="rgb(222,165,49)" fg:x="1330" fg:w="4"/><text x="68.8067%" y="255.50"></text></g><g><title>irqentry_exit (1 samples, 0.05%)</title><rect x="68.7113%" y="229" width="0.0515%" height="15" fill="rgb(219,113,52)" fg:x="1333" fg:w="1"/><text x="68.9613%" y="239.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.05%)</title><rect x="68.7113%" y="213" width="0.0515%" height="15" fill="rgb(214,7,15)" fg:x="1333" fg:w="1"/><text x="68.9613%" y="223.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.05%)</title><rect x="68.7113%" y="197" width="0.0515%" height="15" fill="rgb(235,32,4)" fg:x="1333" fg:w="1"/><text x="68.9613%" y="207.50"></text></g><g><title>std::io::Read::read_to_end (75 samples, 3.87%)</title><rect x="64.9485%" y="341" width="3.8660%" height="15" fill="rgb(238,90,54)" fg:x="1260" fg:w="75"/><text x="65.1985%" y="351.50">std:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.98%)</title><rect x="67.8351%" y="325" width="0.9794%" height="15" fill="rgb(213,208,19)" fg:x="1316" fg:w="19"/><text x="68.0851%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.98%)</title><rect x="67.8351%" y="309" width="0.9794%" height="15" fill="rgb(233,156,4)" fg:x="1316" fg:w="19"/><text x="68.0851%" y="319.50"></text></g><g><title>_mi_heap_realloc_zero (19 samples, 0.98%)</title><rect x="67.8351%" y="293" width="0.9794%" height="15" fill="rgb(207,194,5)" fg:x="1316" fg:w="19"/><text x="68.0851%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.98%)</title><rect x="67.8351%" y="277" width="0.9794%" height="15" fill="rgb(206,111,30)" fg:x="1316" fg:w="19"/><text x="68.0851%" y="287.50"></text></g><g><title>error_entry (1 samples, 0.05%)</title><rect x="68.7629%" y="261" width="0.0515%" height="15" fill="rgb(243,70,54)" fg:x="1334" fg:w="1"/><text x="69.0129%" y="271.50"></text></g><g><title>ZSTD_decodeLiteralsBlock (1 samples, 0.05%)</title><rect x="68.8144%" y="277" width="0.0515%" height="15" fill="rgb(242,28,8)" fg:x="1335" fg:w="1"/><text x="69.0644%" y="287.50"></text></g><g><title>HUF_decompress4X1_usingDTable_internal_bmi2_asm (1 samples, 0.05%)</title><rect x="68.8144%" y="261" width="0.0515%" height="15" fill="rgb(219,106,18)" fg:x="1335" fg:w="1"/><text x="69.0644%" y="271.50"></text></g><g><title>ZSTD_decodeSeqHeaders (1 samples, 0.05%)</title><rect x="68.8660%" y="277" width="0.0515%" height="15" fill="rgb(244,222,10)" fg:x="1336" fg:w="1"/><text x="69.1160%" y="287.50"></text></g><g><title>ZSTD_buildSeqTable.constprop.0 (1 samples, 0.05%)</title><rect x="68.8660%" y="261" width="0.0515%" height="15" fill="rgb(236,179,52)" fg:x="1336" fg:w="1"/><text x="69.1160%" y="271.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (1 samples, 0.05%)</title><rect x="68.8660%" y="245" width="0.0515%" height="15" fill="rgb(213,23,39)" fg:x="1336" fg:w="1"/><text x="69.1160%" y="255.50"></text></g><g><title>libsfasta::formats::sfasta::SfastaParser::open_from_buffer (317 samples, 16.34%)</title><rect x="54.6392%" y="357" width="16.3402%" height="15" fill="rgb(238,48,10)" fg:x="1060" fg:w="317"/><text x="54.8892%" y="367.50">libsfasta::formats::sfast..</text></g><g><title>zstd::bulk::decompressor::Decompressor::decompress (42 samples, 2.16%)</title><rect x="68.8144%" y="341" width="2.1649%" height="15" fill="rgb(251,196,23)" fg:x="1335" fg:w="42"/><text x="69.0644%" y="351.50">z..</text></g><g><title>ZSTD_decompress_usingDDict (42 samples, 2.16%)</title><rect x="68.8144%" y="325" width="2.1649%" height="15" fill="rgb(250,152,24)" fg:x="1335" fg:w="42"/><text x="69.0644%" y="335.50">Z..</text></g><g><title>ZSTD_decompressMultiFrame (42 samples, 2.16%)</title><rect x="68.8144%" y="309" width="2.1649%" height="15" fill="rgb(209,150,17)" fg:x="1335" fg:w="42"/><text x="69.0644%" y="319.50">Z..</text></g><g><title>ZSTD_decompressBlock_internal (42 samples, 2.16%)</title><rect x="68.8144%" y="293" width="2.1649%" height="15" fill="rgb(234,202,34)" fg:x="1335" fg:w="42"/><text x="69.0644%" y="303.50">Z..</text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (40 samples, 2.06%)</title><rect x="68.9175%" y="277" width="2.0619%" height="15" fill="rgb(253,148,53)" fg:x="1337" fg:w="40"/><text x="69.1675%" y="287.50">Z..</text></g><g><title>mi_free (9 samples, 0.46%)</title><rect x="70.9794%" y="357" width="0.4639%" height="15" fill="rgb(218,129,16)" fg:x="1377" fg:w="9"/><text x="71.2294%" y="367.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (6 samples, 0.31%)</title><rect x="73.5052%" y="325" width="0.3093%" height="15" fill="rgb(216,85,19)" fg:x="1426" fg:w="6"/><text x="73.7552%" y="335.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (1 samples, 0.05%)</title><rect x="74.7938%" y="245" width="0.0515%" height="15" fill="rgb(235,228,7)" fg:x="1451" fg:w="1"/><text x="75.0438%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="75.2062%" y="229" width="0.0515%" height="15" fill="rgb(245,175,0)" fg:x="1459" fg:w="1"/><text x="75.4562%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.46%)</title><rect x="75.2577%" y="213" width="0.4639%" height="15" fill="rgb(208,168,36)" fg:x="1460" fg:w="9"/><text x="75.5077%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (22 samples, 1.13%)</title><rect x="74.7423%" y="261" width="1.1340%" height="15" fill="rgb(246,171,24)" fg:x="1450" fg:w="22"/><text x="74.9923%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (20 samples, 1.03%)</title><rect x="74.8454%" y="245" width="1.0309%" height="15" fill="rgb(215,142,24)" fg:x="1452" fg:w="20"/><text x="75.0954%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.62%)</title><rect x="75.2577%" y="229" width="0.6186%" height="15" fill="rgb(250,187,7)" fg:x="1460" fg:w="12"/><text x="75.5077%" y="239.50"></text></g><g><title>__memmove_avx_unaligned (3 samples, 0.15%)</title><rect x="75.7216%" y="213" width="0.1546%" height="15" fill="rgb(228,66,33)" fg:x="1469" fg:w="3"/><text x="75.9716%" y="223.50"></text></g><g><title>__entry_text_start (40 samples, 2.06%)</title><rect x="77.1649%" y="181" width="2.0619%" height="15" fill="rgb(234,215,21)" fg:x="1497" fg:w="40"/><text x="77.4149%" y="191.50">_..</text></g><g><title>__x64_sys_write (17 samples, 0.88%)</title><rect x="79.3299%" y="165" width="0.8763%" height="15" fill="rgb(222,191,20)" fg:x="1539" fg:w="17"/><text x="79.5799%" y="175.50"></text></g><g><title>__x86_indirect_thunk_rax (3 samples, 0.15%)</title><rect x="80.2062%" y="165" width="0.1546%" height="15" fill="rgb(245,79,54)" fg:x="1556" fg:w="3"/><text x="80.4562%" y="175.50"></text></g><g><title>__fdget_pos (1 samples, 0.05%)</title><rect x="80.9278%" y="117" width="0.0515%" height="15" fill="rgb(240,10,37)" fg:x="1570" fg:w="1"/><text x="81.1778%" y="127.50"></text></g><g><title>__fget_light (7 samples, 0.36%)</title><rect x="80.9794%" y="117" width="0.3608%" height="15" fill="rgb(214,192,32)" fg:x="1571" fg:w="7"/><text x="81.2294%" y="127.50"></text></g><g><title>__fsnotify_parent (1 samples, 0.05%)</title><rect x="81.3402%" y="117" width="0.0515%" height="15" fill="rgb(209,36,54)" fg:x="1578" fg:w="1"/><text x="81.5902%" y="127.50"></text></g><g><title>rw_verify_area (2 samples, 0.10%)</title><rect x="81.3918%" y="117" width="0.1031%" height="15" fill="rgb(220,10,11)" fg:x="1579" fg:w="2"/><text x="81.6418%" y="127.50"></text></g><g><title>dget_parent (13 samples, 0.67%)</title><rect x="83.9175%" y="85" width="0.6701%" height="15" fill="rgb(221,106,17)" fg:x="1628" fg:w="13"/><text x="84.1675%" y="95.50"></text></g><g><title>lockref_get_not_zero (9 samples, 0.46%)</title><rect x="84.1237%" y="69" width="0.4639%" height="15" fill="rgb(251,142,44)" fg:x="1632" fg:w="9"/><text x="84.3737%" y="79.50"></text></g><g><title>__cond_resched (10 samples, 0.52%)</title><rect x="84.8969%" y="69" width="0.5155%" height="15" fill="rgb(238,13,15)" fg:x="1647" fg:w="10"/><text x="85.1469%" y="79.50"></text></g><g><title>dput (21 samples, 1.08%)</title><rect x="84.5876%" y="85" width="1.0825%" height="15" fill="rgb(208,107,27)" fg:x="1641" fg:w="21"/><text x="84.8376%" y="95.50"></text></g><g><title>rcu_all_qs (5 samples, 0.26%)</title><rect x="85.4124%" y="69" width="0.2577%" height="15" fill="rgb(205,136,37)" fg:x="1657" fg:w="5"/><text x="85.6624%" y="79.50"></text></g><g><title>fsnotify (7 samples, 0.36%)</title><rect x="85.6701%" y="85" width="0.3608%" height="15" fill="rgb(250,205,27)" fg:x="1662" fg:w="7"/><text x="85.9201%" y="95.50"></text></g><g><title>lockref_get_not_zero (3 samples, 0.15%)</title><rect x="86.0309%" y="85" width="0.1546%" height="15" fill="rgb(210,80,43)" fg:x="1669" fg:w="3"/><text x="86.2809%" y="95.50"></text></g><g><title>lockref_put_return (7 samples, 0.36%)</title><rect x="86.1856%" y="85" width="0.3608%" height="15" fill="rgb(247,160,36)" fg:x="1672" fg:w="7"/><text x="86.4356%" y="95.50"></text></g><g><title>__fsnotify_parent (86 samples, 4.43%)</title><rect x="82.6804%" y="101" width="4.4330%" height="15" fill="rgb(234,13,49)" fg:x="1604" fg:w="86"/><text x="82.9304%" y="111.50">__fsn..</text></g><g><title>rcu_read_unlock_strict (11 samples, 0.57%)</title><rect x="86.5464%" y="85" width="0.5670%" height="15" fill="rgb(234,122,0)" fg:x="1679" fg:w="11"/><text x="86.7964%" y="95.50"></text></g><g><title>dget_parent (1 samples, 0.05%)</title><rect x="87.1134%" y="101" width="0.0515%" height="15" fill="rgb(207,146,38)" fg:x="1690" fg:w="1"/><text x="87.3634%" y="111.50"></text></g><g><title>fsnotify (1 samples, 0.05%)</title><rect x="87.1649%" y="101" width="0.0515%" height="15" fill="rgb(207,177,25)" fg:x="1691" fg:w="1"/><text x="87.4149%" y="111.50"></text></g><g><title>__x86_indirect_thunk_rax (3 samples, 0.15%)</title><rect x="87.2165%" y="85" width="0.1546%" height="15" fill="rgb(211,178,42)" fg:x="1692" fg:w="3"/><text x="87.4665%" y="95.50"></text></g><g><title>apparmor_file_permission (20 samples, 1.03%)</title><rect x="87.3711%" y="85" width="1.0309%" height="15" fill="rgb(230,69,54)" fg:x="1695" fg:w="20"/><text x="87.6211%" y="95.50"></text></g><g><title>aa_file_perm (2 samples, 0.10%)</title><rect x="88.5567%" y="69" width="0.1031%" height="15" fill="rgb(214,135,41)" fg:x="1718" fg:w="2"/><text x="88.8067%" y="79.50"></text></g><g><title>rw_verify_area (57 samples, 2.94%)</title><rect x="87.2165%" y="101" width="2.9381%" height="15" fill="rgb(237,67,25)" fg:x="1692" fg:w="57"/><text x="87.4665%" y="111.50">rw..</text></g><g><title>security_file_permission (34 samples, 1.75%)</title><rect x="88.4021%" y="85" width="1.7526%" height="15" fill="rgb(222,189,50)" fg:x="1715" fg:w="34"/><text x="88.6521%" y="95.50"></text></g><g><title>apparmor_file_permission (29 samples, 1.49%)</title><rect x="88.6598%" y="69" width="1.4948%" height="15" fill="rgb(245,148,34)" fg:x="1720" fg:w="29"/><text x="88.9098%" y="79.50"></text></g><g><title>aa_file_perm (5 samples, 0.26%)</title><rect x="89.8969%" y="53" width="0.2577%" height="15" fill="rgb(222,29,6)" fg:x="1744" fg:w="5"/><text x="90.1469%" y="63.50"></text></g><g><title>vfs_write (169 samples, 8.71%)</title><rect x="81.4948%" y="117" width="8.7113%" height="15" fill="rgb(221,189,43)" fg:x="1581" fg:w="169"/><text x="81.7448%" y="127.50">vfs_write</text></g><g><title>security_file_permission (1 samples, 0.05%)</title><rect x="90.1546%" y="101" width="0.0515%" height="15" fill="rgb(207,36,27)" fg:x="1749" fg:w="1"/><text x="90.4046%" y="111.50"></text></g><g><title>ksys_write (214 samples, 11.03%)</title><rect x="80.6186%" y="133" width="11.0309%" height="15" fill="rgb(217,90,24)" fg:x="1564" fg:w="214"/><text x="80.8686%" y="143.50">ksys_write</text></g><g><title>write_null (28 samples, 1.44%)</title><rect x="90.2062%" y="117" width="1.4433%" height="15" fill="rgb(224,66,35)" fg:x="1750" fg:w="28"/><text x="90.4562%" y="127.50"></text></g><g><title>__x64_sys_write (215 samples, 11.08%)</title><rect x="80.6186%" y="149" width="11.0825%" height="15" fill="rgb(221,13,50)" fg:x="1564" fg:w="215"/><text x="80.8686%" y="159.50">__x64_sys_write</text></g><g><title>vfs_write (1 samples, 0.05%)</title><rect x="91.6495%" y="133" width="0.0515%" height="15" fill="rgb(236,68,49)" fg:x="1778" fg:w="1"/><text x="91.8995%" y="143.50"></text></g><g><title>ksys_write (2 samples, 0.10%)</title><rect x="91.7010%" y="149" width="0.1031%" height="15" fill="rgb(229,146,28)" fg:x="1779" fg:w="2"/><text x="91.9510%" y="159.50"></text></g><g><title>syscall_enter_from_user_mode (8 samples, 0.41%)</title><rect x="91.8041%" y="149" width="0.4124%" height="15" fill="rgb(225,31,38)" fg:x="1781" fg:w="8"/><text x="92.0541%" y="159.50"></text></g><g><title>exit_to_user_mode_prepare (37 samples, 1.91%)</title><rect x="92.5258%" y="133" width="1.9072%" height="15" fill="rgb(250,208,3)" fg:x="1795" fg:w="37"/><text x="92.7758%" y="143.50">e..</text></g><g><title>do_syscall_64 (277 samples, 14.28%)</title><rect x="80.3608%" y="165" width="14.2784%" height="15" fill="rgb(246,54,23)" fg:x="1559" fg:w="277"/><text x="80.6108%" y="175.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (47 samples, 2.42%)</title><rect x="92.2165%" y="149" width="2.4227%" height="15" fill="rgb(243,76,11)" fg:x="1789" fg:w="47"/><text x="92.4665%" y="159.50">sy..</text></g><g><title>fpregs_assert_state_consistent (4 samples, 0.21%)</title><rect x="94.4330%" y="133" width="0.2062%" height="15" fill="rgb(245,21,50)" fg:x="1832" fg:w="4"/><text x="94.6830%" y="143.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.05%)</title><rect x="94.6392%" y="165" width="0.0515%" height="15" fill="rgb(228,9,43)" fg:x="1836" fg:w="1"/><text x="94.8892%" y="175.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (302 samples, 15.57%)</title><rect x="79.2268%" y="181" width="15.5670%" height="15" fill="rgb(208,100,47)" fg:x="1537" fg:w="302"/><text x="79.4768%" y="191.50">entry_SYSCALL_64_after_h..</text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.10%)</title><rect x="94.6907%" y="165" width="0.1031%" height="15" fill="rgb(232,26,8)" fg:x="1837" fg:w="2"/><text x="94.9407%" y="175.50"></text></g><g><title>__GI___write (365 samples, 18.81%)</title><rect x="76.0309%" y="197" width="18.8144%" height="15" fill="rgb(216,166,38)" fg:x="1475" fg:w="365"/><text x="76.2809%" y="207.50">__GI___write</text></g><g><title>syscall_return_via_sysret (1 samples, 0.05%)</title><rect x="94.7938%" y="181" width="0.0515%" height="15" fill="rgb(251,202,51)" fg:x="1839" fg:w="1"/><text x="95.0438%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (368 samples, 18.97%)</title><rect x="76.0309%" y="245" width="18.9691%" height="15" fill="rgb(254,216,34)" fg:x="1475" fg:w="368"/><text x="76.2809%" y="255.50">&lt;std::io::stdio::StdoutRaw as ..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (368 samples, 18.97%)</title><rect x="76.0309%" y="229" width="18.9691%" height="15" fill="rgb(251,32,27)" fg:x="1475" fg:w="368"/><text x="76.2809%" y="239.50">&lt;std::sys::unix::stdio::Stdout..</text></g><g><title>std::sys::unix::fd::FileDesc::write (368 samples, 18.97%)</title><rect x="76.0309%" y="213" width="18.9691%" height="15" fill="rgb(208,127,28)" fg:x="1475" fg:w="368"/><text x="76.2809%" y="223.50">std::sys::unix::fd::FileDesc::..</text></g><g><title>std::sys::unix::cvt (3 samples, 0.15%)</title><rect x="94.8454%" y="197" width="0.1546%" height="15" fill="rgb(224,137,22)" fg:x="1840" fg:w="3"/><text x="95.0954%" y="207.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (3 samples, 0.15%)</title><rect x="94.8454%" y="181" width="0.1546%" height="15" fill="rgb(254,70,32)" fg:x="1840" fg:w="3"/><text x="95.0954%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (375 samples, 19.33%)</title><rect x="75.8763%" y="261" width="19.3299%" height="15" fill="rgb(229,75,37)" fg:x="1472" fg:w="375"/><text x="76.1263%" y="271.50">std::io::buffered::bufwriter::..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::done (4 samples, 0.21%)</title><rect x="95.0000%" y="245" width="0.2062%" height="15" fill="rgb(252,64,23)" fg:x="1843" fg:w="4"/><text x="95.2500%" y="255.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (2 samples, 0.10%)</title><rect x="95.2062%" y="261" width="0.1031%" height="15" fill="rgb(232,162,48)" fg:x="1847" fg:w="2"/><text x="95.4562%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2 samples, 0.10%)</title><rect x="95.2062%" y="245" width="0.1031%" height="15" fill="rgb(246,160,12)" fg:x="1847" fg:w="2"/><text x="95.4562%" y="255.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (417 samples, 21.49%)</title><rect x="74.6907%" y="293" width="21.4948%" height="15" fill="rgb(247,166,0)" fg:x="1449" fg:w="417"/><text x="74.9407%" y="303.50">&lt;std::io::buffered::linewriter::Li..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (417 samples, 21.49%)</title><rect x="74.6907%" y="277" width="21.4948%" height="15" fill="rgb(249,219,21)" fg:x="1449" fg:w="417"/><text x="74.9407%" y="287.50">&lt;std::io::buffered::linewritershim..</text></g><g><title>std::sys_common::memchr::memrchr (17 samples, 0.88%)</title><rect x="95.3093%" y="261" width="0.8763%" height="15" fill="rgb(205,209,3)" fg:x="1849" fg:w="17"/><text x="95.5593%" y="271.50"></text></g><g><title>std::sys::unix::memchr::memrchr (17 samples, 0.88%)</title><rect x="95.3093%" y="245" width="0.8763%" height="15" fill="rgb(243,44,1)" fg:x="1849" fg:w="17"/><text x="95.5593%" y="255.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (17 samples, 0.88%)</title><rect x="95.3093%" y="229" width="0.8763%" height="15" fill="rgb(206,159,16)" fg:x="1849" fg:w="17"/><text x="95.5593%" y="239.50"></text></g><g><title>__memrchr_avx2 (15 samples, 0.77%)</title><rect x="95.4124%" y="213" width="0.7732%" height="15" fill="rgb(244,77,30)" fg:x="1851" fg:w="15"/><text x="95.6624%" y="223.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (448 samples, 23.09%)</title><rect x="73.8144%" y="325" width="23.0928%" height="15" fill="rgb(218,69,12)" fg:x="1432" fg:w="448"/><text x="74.0644%" y="335.50">&lt;std::io::Write::write_fmt::Adapter&lt;T..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (438 samples, 22.58%)</title><rect x="74.3299%" y="309" width="22.5773%" height="15" fill="rgb(212,87,7)" fg:x="1442" fg:w="438"/><text x="74.5799%" y="319.50">&lt;std::io::stdio::StdoutLock as std::..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (14 samples, 0.72%)</title><rect x="96.1856%" y="293" width="0.7216%" height="15" fill="rgb(245,114,25)" fg:x="1866" fg:w="14"/><text x="96.4356%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (14 samples, 0.72%)</title><rect x="96.1856%" y="277" width="0.7216%" height="15" fill="rgb(210,61,42)" fg:x="1866" fg:w="14"/><text x="96.4356%" y="287.50"></text></g><g><title>core::cell::BorrowRefMut::new (14 samples, 0.72%)</title><rect x="96.1856%" y="261" width="0.7216%" height="15" fill="rgb(211,52,33)" fg:x="1866" fg:w="14"/><text x="96.4356%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad (9 samples, 0.46%)</title><rect x="96.9072%" y="325" width="0.4639%" height="15" fill="rgb(234,58,33)" fg:x="1880" fg:w="9"/><text x="97.1572%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.10%)</title><rect x="97.3711%" y="325" width="0.1031%" height="15" fill="rgb(220,115,36)" fg:x="1889" fg:w="2"/><text x="97.6211%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.10%)</title><rect x="97.3711%" y="309" width="0.1031%" height="15" fill="rgb(243,153,54)" fg:x="1889" fg:w="2"/><text x="97.6211%" y="319.50"></text></g><g><title>core::fmt::write (483 samples, 24.90%)</title><rect x="72.6289%" y="341" width="24.8969%" height="15" fill="rgb(251,47,18)" fg:x="1409" fg:w="483"/><text x="72.8789%" y="351.50">core::fmt::write</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.05%)</title><rect x="97.4742%" y="325" width="0.0515%" height="15" fill="rgb(242,102,42)" fg:x="1891" fg:w="1"/><text x="97.7242%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.41%)</title><rect x="97.5258%" y="341" width="0.4124%" height="15" fill="rgb(234,31,38)" fg:x="1892" fg:w="8"/><text x="97.7758%" y="351.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.36%)</title><rect x="97.5773%" y="325" width="0.3608%" height="15" fill="rgb(221,117,51)" fg:x="1893" fg:w="7"/><text x="97.8273%" y="335.50"></text></g><g><title>_start (1,627 samples, 83.87%)</title><rect x="15.3093%" y="453" width="83.8660%" height="15" fill="rgb(212,20,18)" fg:x="297" fg:w="1627"/><text x="15.5593%" y="463.50">_start</text></g><g><title>__libc_start_main_alias_2 (1,627 samples, 83.87%)</title><rect x="15.3093%" y="437" width="83.8660%" height="15" fill="rgb(245,133,36)" fg:x="297" fg:w="1627"/><text x="15.5593%" y="447.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (1,627 samples, 83.87%)</title><rect x="15.3093%" y="421" width="83.8660%" height="15" fill="rgb(212,6,19)" fg:x="297" fg:w="1627"/><text x="15.5593%" y="431.50">__libc_start_call_main</text></g><g><title>main (1,623 samples, 83.66%)</title><rect x="15.5155%" y="405" width="83.6598%" height="15" fill="rgb(218,1,36)" fg:x="301" fg:w="1623"/><text x="15.7655%" y="415.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,623 samples, 83.66%)</title><rect x="15.5155%" y="389" width="83.6598%" height="15" fill="rgb(246,84,54)" fg:x="301" fg:w="1623"/><text x="15.7655%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sfa::main (1,623 samples, 83.66%)</title><rect x="15.5155%" y="373" width="83.6598%" height="15" fill="rgb(242,110,6)" fg:x="301" fg:w="1623"/><text x="15.7655%" y="383.50">sfa::main</text></g><g><title>sfa::print_sequence (538 samples, 27.73%)</title><rect x="71.4433%" y="357" width="27.7320%" height="15" fill="rgb(214,47,5)" fg:x="1386" fg:w="538"/><text x="71.6933%" y="367.50">sfa::print_sequence</text></g><g><title>simdutf8::implementation::x86::avx2::validate_utf8_basic (24 samples, 1.24%)</title><rect x="97.9381%" y="341" width="1.2371%" height="15" fill="rgb(218,159,25)" fg:x="1900" fg:w="24"/><text x="98.1881%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="99.1237%" y="325" width="0.0515%" height="15" fill="rgb(215,211,28)" fg:x="1923" fg:w="1"/><text x="99.3737%" y="335.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.05%)</title><rect x="99.2268%" y="421" width="0.0515%" height="15" fill="rgb(238,59,32)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="431.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.05%)</title><rect x="99.2268%" y="405" width="0.0515%" height="15" fill="rgb(226,82,3)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="415.50"></text></g><g><title>bprm_execve (1 samples, 0.05%)</title><rect x="99.2268%" y="389" width="0.0515%" height="15" fill="rgb(240,164,32)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="399.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.05%)</title><rect x="99.2268%" y="373" width="0.0515%" height="15" fill="rgb(232,46,7)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="383.50"></text></g><g><title>exec_binprm (1 samples, 0.05%)</title><rect x="99.2268%" y="357" width="0.0515%" height="15" fill="rgb(229,129,53)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="367.50"></text></g><g><title>search_binary_handler (1 samples, 0.05%)</title><rect x="99.2268%" y="341" width="0.0515%" height="15" fill="rgb(234,188,29)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="351.50"></text></g><g><title>load_elf_binary (1 samples, 0.05%)</title><rect x="99.2268%" y="325" width="0.0515%" height="15" fill="rgb(246,141,4)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="335.50"></text></g><g><title>load_elf_interp.constprop.0 (1 samples, 0.05%)</title><rect x="99.2268%" y="309" width="0.0515%" height="15" fill="rgb(229,23,39)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="319.50"></text></g><g><title>elf_map (1 samples, 0.05%)</title><rect x="99.2268%" y="293" width="0.0515%" height="15" fill="rgb(206,12,3)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="303.50"></text></g><g><title>vm_mmap (1 samples, 0.05%)</title><rect x="99.2268%" y="277" width="0.0515%" height="15" fill="rgb(252,226,20)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="287.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.05%)</title><rect x="99.2268%" y="261" width="0.0515%" height="15" fill="rgb(216,123,35)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="271.50"></text></g><g><title>do_mmap (1 samples, 0.05%)</title><rect x="99.2268%" y="245" width="0.0515%" height="15" fill="rgb(212,68,40)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="255.50"></text></g><g><title>mmap_region (1 samples, 0.05%)</title><rect x="99.2268%" y="229" width="0.0515%" height="15" fill="rgb(254,125,32)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="239.50"></text></g><g><title>perf_event_mmap (1 samples, 0.05%)</title><rect x="99.2268%" y="213" width="0.0515%" height="15" fill="rgb(253,97,22)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="223.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.05%)</title><rect x="99.2268%" y="197" width="0.0515%" height="15" fill="rgb(241,101,14)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="207.50"></text></g><g><title>__perf_addr_filters_adjust (1 samples, 0.05%)</title><rect x="99.2268%" y="181" width="0.0515%" height="15" fill="rgb(238,103,29)" fg:x="1925" fg:w="1"/><text x="99.4768%" y="191.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.05%)</title><rect x="99.2784%" y="325" width="0.0515%" height="15" fill="rgb(233,195,47)" fg:x="1926" fg:w="1"/><text x="99.5284%" y="335.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="99.2784%" y="309" width="0.0515%" height="15" fill="rgb(246,218,30)" fg:x="1926" fg:w="1"/><text x="99.5284%" y="319.50"></text></g><g><title>release_pages (1 samples, 0.05%)</title><rect x="99.2784%" y="293" width="0.0515%" height="15" fill="rgb(219,145,47)" fg:x="1926" fg:w="1"/><text x="99.5284%" y="303.50"></text></g><g><title>free_unref_page_list (1 samples, 0.05%)</title><rect x="99.2784%" y="277" width="0.0515%" height="15" fill="rgb(243,12,26)" fg:x="1926" fg:w="1"/><text x="99.5284%" y="287.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.05%)</title><rect x="99.2784%" y="261" width="0.0515%" height="15" fill="rgb(214,87,16)" fg:x="1926" fg:w="1"/><text x="99.5284%" y="271.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.05%)</title><rect x="99.2784%" y="245" width="0.0515%" height="15" fill="rgb(208,99,42)" fg:x="1926" fg:w="1"/><text x="99.5284%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.36%)</title><rect x="99.1753%" y="453" width="0.3608%" height="15" fill="rgb(253,99,2)" fg:x="1924" fg:w="7"/><text x="99.4253%" y="463.50"></text></g><g><title>do_syscall_64 (6 samples, 0.31%)</title><rect x="99.2268%" y="437" width="0.3093%" height="15" fill="rgb(220,168,23)" fg:x="1925" fg:w="6"/><text x="99.4768%" y="447.50"></text></g><g><title>__x64_sys_exit_group (5 samples, 0.26%)</title><rect x="99.2784%" y="421" width="0.2577%" height="15" fill="rgb(242,38,24)" fg:x="1926" fg:w="5"/><text x="99.5284%" y="431.50"></text></g><g><title>do_group_exit (5 samples, 0.26%)</title><rect x="99.2784%" y="405" width="0.2577%" height="15" fill="rgb(225,182,9)" fg:x="1926" fg:w="5"/><text x="99.5284%" y="415.50"></text></g><g><title>do_exit (5 samples, 0.26%)</title><rect x="99.2784%" y="389" width="0.2577%" height="15" fill="rgb(243,178,37)" fg:x="1926" fg:w="5"/><text x="99.5284%" y="399.50"></text></g><g><title>exit_mm (5 samples, 0.26%)</title><rect x="99.2784%" y="373" width="0.2577%" height="15" fill="rgb(232,139,19)" fg:x="1926" fg:w="5"/><text x="99.5284%" y="383.50"></text></g><g><title>mmput (5 samples, 0.26%)</title><rect x="99.2784%" y="357" width="0.2577%" height="15" fill="rgb(225,201,24)" fg:x="1926" fg:w="5"/><text x="99.5284%" y="367.50"></text></g><g><title>exit_mmap (5 samples, 0.26%)</title><rect x="99.2784%" y="341" width="0.2577%" height="15" fill="rgb(221,47,46)" fg:x="1926" fg:w="5"/><text x="99.5284%" y="351.50"></text></g><g><title>unmap_vmas (4 samples, 0.21%)</title><rect x="99.3299%" y="325" width="0.2062%" height="15" fill="rgb(249,23,13)" fg:x="1927" fg:w="4"/><text x="99.5799%" y="335.50"></text></g><g><title>unmap_single_vma (4 samples, 0.21%)</title><rect x="99.3299%" y="309" width="0.2062%" height="15" fill="rgb(219,9,5)" fg:x="1927" fg:w="4"/><text x="99.5799%" y="319.50"></text></g><g><title>unmap_page_range (4 samples, 0.21%)</title><rect x="99.3299%" y="293" width="0.2062%" height="15" fill="rgb(254,171,16)" fg:x="1927" fg:w="4"/><text x="99.5799%" y="303.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.21%)</title><rect x="99.3299%" y="277" width="0.2062%" height="15" fill="rgb(230,171,20)" fg:x="1927" fg:w="4"/><text x="99.5799%" y="287.50"></text></g><g><title>zap_pte_range (4 samples, 0.21%)</title><rect x="99.3299%" y="261" width="0.2062%" height="15" fill="rgb(210,71,41)" fg:x="1927" fg:w="4"/><text x="99.5799%" y="271.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.05%)</title><rect x="99.4845%" y="245" width="0.0515%" height="15" fill="rgb(206,173,20)" fg:x="1930" fg:w="1"/><text x="99.7345%" y="255.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.05%)</title><rect x="99.4845%" y="229" width="0.0515%" height="15" fill="rgb(233,88,34)" fg:x="1930" fg:w="1"/><text x="99.7345%" y="239.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.05%)</title><rect x="99.4845%" y="213" width="0.0515%" height="15" fill="rgb(223,209,46)" fg:x="1930" fg:w="1"/><text x="99.7345%" y="223.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (5 samples, 0.26%)</title><rect x="99.5361%" y="453" width="0.2577%" height="15" fill="rgb(250,43,18)" fg:x="1931" fg:w="5"/><text x="99.7861%" y="463.50"></text></g><g><title>_mi_page_free (1 samples, 0.05%)</title><rect x="99.7938%" y="437" width="0.0515%" height="15" fill="rgb(208,13,10)" fg:x="1936" fg:w="1"/><text x="100.0438%" y="447.50"></text></g><g><title>sfa::main (2 samples, 0.10%)</title><rect x="99.7938%" y="453" width="0.1031%" height="15" fill="rgb(212,200,36)" fg:x="1936" fg:w="2"/><text x="100.0438%" y="463.50"></text></g><g><title>sfa::print_sequence (1 samples, 0.05%)</title><rect x="99.8454%" y="437" width="0.0515%" height="15" fill="rgb(225,90,30)" fg:x="1937" fg:w="1"/><text x="100.0954%" y="447.50"></text></g><g><title>all (1,940 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(236,182,39)" fg:x="0" fg:w="1940"/><text x="0.2500%" y="495.50"></text></g><g><title>sfa (1,934 samples, 99.69%)</title><rect x="0.3093%" y="469" width="99.6907%" height="15" fill="rgb(212,144,35)" fg:x="6" fg:w="1934"/><text x="0.5593%" y="479.50">sfa</text></g><g><title>syscall_return_via_sysret (2 samples, 0.10%)</title><rect x="99.8969%" y="453" width="0.1031%" height="15" fill="rgb(228,63,44)" fg:x="1938" fg:w="2"/><text x="100.1469%" y="463.50"></text></g></svg></svg>