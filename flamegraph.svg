<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="14157"><g><title>perf-exec (6 samples, 0.04%)</title><rect x="0.0000%" y="485" width="0.0424%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.04%)</title><rect x="0.0000%" y="469" width="0.0424%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50"></text></g><g><title>do_syscall_64 (6 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0424%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="463.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0424%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="447.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0424%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="431.50"></text></g><g><title>bprm_execve (6 samples, 0.04%)</title><rect x="0.0000%" y="405" width="0.0424%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="415.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 0.04%)</title><rect x="0.0000%" y="389" width="0.0424%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="399.50"></text></g><g><title>exec_binprm (6 samples, 0.04%)</title><rect x="0.0000%" y="373" width="0.0424%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="383.50"></text></g><g><title>search_binary_handler (6 samples, 0.04%)</title><rect x="0.0000%" y="357" width="0.0424%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="367.50"></text></g><g><title>load_elf_binary (6 samples, 0.04%)</title><rect x="0.0000%" y="341" width="0.0424%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="351.50"></text></g><g><title>begin_new_exec (6 samples, 0.04%)</title><rect x="0.0000%" y="325" width="0.0424%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="335.50"></text></g><g><title>perf_event_exec (6 samples, 0.04%)</title><rect x="0.0000%" y="309" width="0.0424%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="319.50"></text></g><g><title>ctx_resched (6 samples, 0.04%)</title><rect x="0.0000%" y="293" width="0.0424%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="303.50"></text></g><g><title>__GI___write (2 samples, 0.01%)</title><rect x="0.0424%" y="453" width="0.0141%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="2"/><text x="0.2924%" y="463.50"></text></g><g><title>__entry_text_start (2 samples, 0.01%)</title><rect x="0.0424%" y="437" width="0.0141%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="2"/><text x="0.2924%" y="447.50"></text></g><g><title>[anon] (4 samples, 0.03%)</title><rect x="0.0424%" y="469" width="0.0283%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="4"/><text x="0.2924%" y="479.50"></text></g><g><title>__libc_lseek (2 samples, 0.01%)</title><rect x="0.0565%" y="453" width="0.0141%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="2"/><text x="0.3065%" y="463.50"></text></g><g><title>__entry_text_start (2 samples, 0.01%)</title><rect x="0.0565%" y="437" width="0.0141%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="2"/><text x="0.3065%" y="447.50"></text></g><g><title>[sfa] (21 samples, 0.15%)</title><rect x="0.0706%" y="469" width="0.1483%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="21"/><text x="0.3206%" y="479.50"></text></g><g><title>__GI___write (2 samples, 0.01%)</title><rect x="0.2190%" y="453" width="0.0141%" height="15" fill="rgb(226,26,5)" fg:x="31" fg:w="2"/><text x="0.4690%" y="463.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.01%)</title><rect x="0.2190%" y="437" width="0.0141%" height="15" fill="rgb(249,33,26)" fg:x="31" fg:w="2"/><text x="0.4690%" y="447.50"></text></g><g><title>core::fmt::write (7 samples, 0.05%)</title><rect x="0.2402%" y="453" width="0.0494%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="7"/><text x="0.4902%" y="463.50"></text></g><g><title>__GI___write (7 samples, 0.05%)</title><rect x="0.2402%" y="437" width="0.0494%" height="15" fill="rgb(221,5,38)" fg:x="34" fg:w="7"/><text x="0.4902%" y="447.50"></text></g><g><title>__entry_text_start (7 samples, 0.05%)</title><rect x="0.2402%" y="421" width="0.0494%" height="15" fill="rgb(247,18,42)" fg:x="34" fg:w="7"/><text x="0.4902%" y="431.50"></text></g><g><title>libsfasta::data_types::sequence_block::SequenceBlockCompressed::decompress (2 samples, 0.01%)</title><rect x="0.2967%" y="453" width="0.0141%" height="15" fill="rgb(241,131,45)" fg:x="42" fg:w="2"/><text x="0.5467%" y="463.50"></text></g><g><title>std::io::Read::read_to_end (2 samples, 0.01%)</title><rect x="0.2967%" y="437" width="0.0141%" height="15" fill="rgb(249,31,29)" fg:x="42" fg:w="2"/><text x="0.5467%" y="447.50"></text></g><g><title>ZSTD_freeDCtx (2 samples, 0.01%)</title><rect x="0.3108%" y="405" width="0.0141%" height="15" fill="rgb(225,111,53)" fg:x="44" fg:w="2"/><text x="0.5608%" y="415.50"></text></g><g><title>__free (2 samples, 0.01%)</title><rect x="0.3108%" y="389" width="0.0141%" height="15" fill="rgb(238,160,17)" fg:x="44" fg:w="2"/><text x="0.5608%" y="399.50"></text></g><g><title>_int_free (2 samples, 0.01%)</title><rect x="0.3108%" y="373" width="0.0141%" height="15" fill="rgb(214,148,48)" fg:x="44" fg:w="2"/><text x="0.5608%" y="383.50"></text></g><g><title>mi_free (2 samples, 0.01%)</title><rect x="0.3320%" y="405" width="0.0141%" height="15" fill="rgb(232,36,49)" fg:x="47" fg:w="2"/><text x="0.5820%" y="415.50"></text></g><g><title>HUF_decompress4X2_usingDTable_internal_bmi2_asm (15 samples, 0.11%)</title><rect x="0.3885%" y="293" width="0.1060%" height="15" fill="rgb(209,103,24)" fg:x="55" fg:w="15"/><text x="0.6385%" y="303.50"></text></g><g><title>ZSTD_decodeLiteralsBlock (17 samples, 0.12%)</title><rect x="0.3885%" y="309" width="0.1201%" height="15" fill="rgb(229,88,8)" fg:x="55" fg:w="17"/><text x="0.6385%" y="319.50"></text></g><g><title>HUF_decompress4X_hufOnly_wksp_bmi2 (2 samples, 0.01%)</title><rect x="0.4945%" y="293" width="0.0141%" height="15" fill="rgb(213,181,19)" fg:x="70" fg:w="2"/><text x="0.7445%" y="303.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (35 samples, 0.25%)</title><rect x="0.5156%" y="293" width="0.2472%" height="15" fill="rgb(254,191,54)" fg:x="73" fg:w="35"/><text x="0.7656%" y="303.50"></text></g><g><title>FSE_readNCount_body_default (8 samples, 0.06%)</title><rect x="0.7699%" y="277" width="0.0565%" height="15" fill="rgb(241,83,37)" fg:x="109" fg:w="8"/><text x="1.0199%" y="287.50"></text></g><g><title>ZSTD_decodeSeqHeaders (91 samples, 0.64%)</title><rect x="0.5086%" y="309" width="0.6428%" height="15" fill="rgb(233,36,39)" fg:x="72" fg:w="91"/><text x="0.7586%" y="319.50"></text></g><g><title>ZSTD_buildSeqTable.constprop.0 (55 samples, 0.39%)</title><rect x="0.7629%" y="293" width="0.3885%" height="15" fill="rgb(226,3,54)" fg:x="108" fg:w="55"/><text x="1.0129%" y="303.50"></text></g><g><title>ZSTD_buildFSETable_body_bmi2 (45 samples, 0.32%)</title><rect x="0.8335%" y="277" width="0.3179%" height="15" fill="rgb(245,192,40)" fg:x="118" fg:w="45"/><text x="1.0835%" y="287.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.01%)</title><rect x="15.9638%" y="293" width="0.0141%" height="15" fill="rgb(238,167,29)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="303.50"></text></g><g><title>exc_page_fault (2 samples, 0.01%)</title><rect x="15.9638%" y="277" width="0.0141%" height="15" fill="rgb(232,182,51)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="287.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.01%)</title><rect x="15.9638%" y="261" width="0.0141%" height="15" fill="rgb(231,60,39)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="271.50"></text></g><g><title>handle_mm_fault (2 samples, 0.01%)</title><rect x="15.9638%" y="245" width="0.0141%" height="15" fill="rgb(208,69,12)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="255.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.01%)</title><rect x="15.9638%" y="229" width="0.0141%" height="15" fill="rgb(235,93,37)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="239.50"></text></g><g><title>handle_pte_fault (2 samples, 0.01%)</title><rect x="15.9638%" y="213" width="0.0141%" height="15" fill="rgb(213,116,39)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="223.50"></text></g><g><title>do_anonymous_page (2 samples, 0.01%)</title><rect x="15.9638%" y="197" width="0.0141%" height="15" fill="rgb(222,207,29)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="207.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.01%)</title><rect x="15.9638%" y="181" width="0.0141%" height="15" fill="rgb(206,96,30)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="191.50"></text></g><g><title>__alloc_pages (2 samples, 0.01%)</title><rect x="15.9638%" y="165" width="0.0141%" height="15" fill="rgb(218,138,4)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="175.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="15.9638%" y="149" width="0.0141%" height="15" fill="rgb(250,191,14)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="159.50"></text></g><g><title>clear_page_rep (2 samples, 0.01%)</title><rect x="15.9638%" y="133" width="0.0141%" height="15" fill="rgb(239,60,40)" fg:x="2260" fg:w="2"/><text x="16.2138%" y="143.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="15.9780%" y="261" width="0.0141%" height="15" fill="rgb(206,27,48)" fg:x="2262" fg:w="2"/><text x="16.2280%" y="271.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.01%)</title><rect x="15.9780%" y="245" width="0.0141%" height="15" fill="rgb(225,35,8)" fg:x="2262" fg:w="2"/><text x="16.2280%" y="255.50"></text></g><g><title>__hrtimer_run_queues (2 samples, 0.01%)</title><rect x="15.9780%" y="229" width="0.0141%" height="15" fill="rgb(250,213,24)" fg:x="2262" fg:w="2"/><text x="16.2280%" y="239.50"></text></g><g><title>ZSTD_decompressContinueStream (2,216 samples, 15.65%)</title><rect x="0.3673%" y="357" width="15.6530%" height="15" fill="rgb(247,123,22)" fg:x="52" fg:w="2216"/><text x="0.6173%" y="367.50">ZSTD_decompressContinueS..</text></g><g><title>ZSTD_decompressContinue (2,216 samples, 15.65%)</title><rect x="0.3673%" y="341" width="15.6530%" height="15" fill="rgb(231,138,38)" fg:x="52" fg:w="2216"/><text x="0.6173%" y="351.50">ZSTD_decompressContinue</text></g><g><title>ZSTD_decompressBlock_internal (2,213 samples, 15.63%)</title><rect x="0.3885%" y="325" width="15.6318%" height="15" fill="rgb(231,145,46)" fg:x="55" fg:w="2213"/><text x="0.6385%" y="335.50">ZSTD_decompressBlock_int..</text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (2,105 samples, 14.87%)</title><rect x="1.1514%" y="309" width="14.8690%" height="15" fill="rgb(251,118,11)" fg:x="163" fg:w="2105"/><text x="1.4014%" y="319.50">ZSTD_decompressSequence..</text></g><g><title>asm_sysvec_apic_timer_interrupt (6 samples, 0.04%)</title><rect x="15.9780%" y="293" width="0.0424%" height="15" fill="rgb(217,147,25)" fg:x="2262" fg:w="6"/><text x="16.2280%" y="303.50"></text></g><g><title>sysvec_apic_timer_interrupt (6 samples, 0.04%)</title><rect x="15.9780%" y="277" width="0.0424%" height="15" fill="rgb(247,81,37)" fg:x="2262" fg:w="6"/><text x="16.2280%" y="287.50"></text></g><g><title>irqentry_exit (3 samples, 0.02%)</title><rect x="15.9992%" y="261" width="0.0212%" height="15" fill="rgb(209,12,38)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="271.50"></text></g><g><title>irqentry_exit_to_user_mode (3 samples, 0.02%)</title><rect x="15.9992%" y="245" width="0.0212%" height="15" fill="rgb(227,1,9)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="255.50"></text></g><g><title>exit_to_user_mode_prepare (3 samples, 0.02%)</title><rect x="15.9992%" y="229" width="0.0212%" height="15" fill="rgb(248,47,43)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="239.50"></text></g><g><title>exit_to_user_mode_loop (3 samples, 0.02%)</title><rect x="15.9992%" y="213" width="0.0212%" height="15" fill="rgb(221,10,30)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="223.50"></text></g><g><title>task_work_run (3 samples, 0.02%)</title><rect x="15.9992%" y="197" width="0.0212%" height="15" fill="rgb(210,229,1)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="207.50"></text></g><g><title>task_numa_work (3 samples, 0.02%)</title><rect x="15.9992%" y="181" width="0.0212%" height="15" fill="rgb(222,148,37)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="191.50"></text></g><g><title>change_prot_numa (3 samples, 0.02%)</title><rect x="15.9992%" y="165" width="0.0212%" height="15" fill="rgb(234,67,33)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="175.50"></text></g><g><title>change_protection (3 samples, 0.02%)</title><rect x="15.9992%" y="149" width="0.0212%" height="15" fill="rgb(247,98,35)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="159.50"></text></g><g><title>change_protection_range (3 samples, 0.02%)</title><rect x="15.9992%" y="133" width="0.0212%" height="15" fill="rgb(247,138,52)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="143.50"></text></g><g><title>change_p4d_range (3 samples, 0.02%)</title><rect x="15.9992%" y="117" width="0.0212%" height="15" fill="rgb(213,79,30)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="127.50"></text></g><g><title>change_pmd_range.isra.0 (3 samples, 0.02%)</title><rect x="15.9992%" y="101" width="0.0212%" height="15" fill="rgb(246,177,23)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="111.50"></text></g><g><title>change_pte_range (3 samples, 0.02%)</title><rect x="15.9992%" y="85" width="0.0212%" height="15" fill="rgb(230,62,27)" fg:x="2265" fg:w="3"/><text x="16.2492%" y="95.50"></text></g><g><title>ZSTD_decompressStream (2,319 samples, 16.38%)</title><rect x="0.3461%" y="373" width="16.3806%" height="15" fill="rgb(216,154,8)" fg:x="49" fg:w="2319"/><text x="0.5961%" y="383.50">ZSTD_decompressStream</text></g><g><title>__memcpy_avx_unaligned_erms (100 samples, 0.71%)</title><rect x="16.0203%" y="357" width="0.7064%" height="15" fill="rgb(244,35,45)" fg:x="2268" fg:w="100"/><text x="16.2703%" y="367.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (2,349 samples, 16.59%)</title><rect x="0.3461%" y="389" width="16.5925%" height="15" fill="rgb(251,115,12)" fg:x="49" fg:w="2349"/><text x="0.5961%" y="399.50">&lt;zstd::stream::read::Decod..</text></g><g><title>__memcpy_avx_unaligned_erms (30 samples, 0.21%)</title><rect x="16.7267%" y="373" width="0.2119%" height="15" fill="rgb(240,54,50)" fg:x="2368" fg:w="30"/><text x="16.9767%" y="383.50"></text></g><g><title>__memset_avx2_unaligned_erms (412 samples, 2.91%)</title><rect x="16.9386%" y="389" width="2.9102%" height="15" fill="rgb(233,84,52)" fg:x="2398" fg:w="412"/><text x="17.1886%" y="399.50">__..</text></g><g><title>asm_exc_page_fault (5 samples, 0.04%)</title><rect x="19.8135%" y="373" width="0.0353%" height="15" fill="rgb(207,117,47)" fg:x="2805" fg:w="5"/><text x="20.0635%" y="383.50"></text></g><g><title>exc_page_fault (3 samples, 0.02%)</title><rect x="19.8276%" y="357" width="0.0212%" height="15" fill="rgb(249,43,39)" fg:x="2807" fg:w="3"/><text x="20.0776%" y="367.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.02%)</title><rect x="19.8276%" y="341" width="0.0212%" height="15" fill="rgb(209,38,44)" fg:x="2807" fg:w="3"/><text x="20.0776%" y="351.50"></text></g><g><title>handle_mm_fault (2 samples, 0.01%)</title><rect x="19.8347%" y="325" width="0.0141%" height="15" fill="rgb(236,212,23)" fg:x="2808" fg:w="2"/><text x="20.0847%" y="335.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.01%)</title><rect x="19.8347%" y="309" width="0.0141%" height="15" fill="rgb(242,79,21)" fg:x="2808" fg:w="2"/><text x="20.0847%" y="319.50"></text></g><g><title>handle_pte_fault (2 samples, 0.01%)</title><rect x="19.8347%" y="293" width="0.0141%" height="15" fill="rgb(211,96,35)" fg:x="2808" fg:w="2"/><text x="20.0847%" y="303.50"></text></g><g><title>do_numa_page (2 samples, 0.01%)</title><rect x="19.8347%" y="277" width="0.0141%" height="15" fill="rgb(253,215,40)" fg:x="2808" fg:w="2"/><text x="20.0847%" y="287.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.03%)</title><rect x="22.6178%" y="325" width="0.0283%" height="15" fill="rgb(211,81,21)" fg:x="3202" fg:w="4"/><text x="22.8678%" y="335.50"></text></g><g><title>exc_page_fault (2 samples, 0.01%)</title><rect x="22.6319%" y="309" width="0.0141%" height="15" fill="rgb(208,190,38)" fg:x="3204" fg:w="2"/><text x="22.8819%" y="319.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.01%)</title><rect x="22.6319%" y="293" width="0.0141%" height="15" fill="rgb(235,213,38)" fg:x="3204" fg:w="2"/><text x="22.8819%" y="303.50"></text></g><g><title>handle_mm_fault (2 samples, 0.01%)</title><rect x="22.6319%" y="277" width="0.0141%" height="15" fill="rgb(237,122,38)" fg:x="3204" fg:w="2"/><text x="22.8819%" y="287.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.01%)</title><rect x="22.6319%" y="261" width="0.0141%" height="15" fill="rgb(244,218,35)" fg:x="3204" fg:w="2"/><text x="22.8819%" y="271.50"></text></g><g><title>handle_pte_fault (2 samples, 0.01%)</title><rect x="22.6319%" y="245" width="0.0141%" height="15" fill="rgb(240,68,47)" fg:x="3204" fg:w="2"/><text x="22.8819%" y="255.50"></text></g><g><title>do_numa_page (2 samples, 0.01%)</title><rect x="22.6319%" y="229" width="0.0141%" height="15" fill="rgb(210,16,53)" fg:x="3204" fg:w="2"/><text x="22.8819%" y="239.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="22.6460%" y="325" width="0.0141%" height="15" fill="rgb(235,124,12)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="22.6460%" y="309" width="0.0141%" height="15" fill="rgb(224,169,11)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="22.6460%" y="293" width="0.0141%" height="15" fill="rgb(250,166,2)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="303.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.01%)</title><rect x="22.6460%" y="277" width="0.0141%" height="15" fill="rgb(242,216,29)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="287.50"></text></g><g><title>__hrtimer_run_queues (2 samples, 0.01%)</title><rect x="22.6460%" y="261" width="0.0141%" height="15" fill="rgb(230,116,27)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="271.50"></text></g><g><title>tick_sched_timer (2 samples, 0.01%)</title><rect x="22.6460%" y="245" width="0.0141%" height="15" fill="rgb(228,99,48)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="255.50"></text></g><g><title>tick_sched_handle (2 samples, 0.01%)</title><rect x="22.6460%" y="229" width="0.0141%" height="15" fill="rgb(253,11,6)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="239.50"></text></g><g><title>update_process_times (2 samples, 0.01%)</title><rect x="22.6460%" y="213" width="0.0141%" height="15" fill="rgb(247,143,39)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="223.50"></text></g><g><title>scheduler_tick (2 samples, 0.01%)</title><rect x="22.6460%" y="197" width="0.0141%" height="15" fill="rgb(236,97,10)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="207.50"></text></g><g><title>perf_event_task_tick (2 samples, 0.01%)</title><rect x="22.6460%" y="181" width="0.0141%" height="15" fill="rgb(233,208,19)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="191.50"></text></g><g><title>x86_pmu_disable (2 samples, 0.01%)</title><rect x="22.6460%" y="165" width="0.0141%" height="15" fill="rgb(216,164,2)" fg:x="3206" fg:w="2"/><text x="22.8960%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (404 samples, 2.85%)</title><rect x="19.8488%" y="341" width="2.8537%" height="15" fill="rgb(220,129,5)" fg:x="2810" fg:w="404"/><text x="20.0988%" y="351.50">__..</text></g><g><title>asm_sysvec_call_function_single (6 samples, 0.04%)</title><rect x="22.6602%" y="325" width="0.0424%" height="15" fill="rgb(242,17,10)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="335.50"></text></g><g><title>sysvec_call_function_single (6 samples, 0.04%)</title><rect x="22.6602%" y="309" width="0.0424%" height="15" fill="rgb(242,107,0)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="319.50"></text></g><g><title>irqentry_exit (6 samples, 0.04%)</title><rect x="22.6602%" y="293" width="0.0424%" height="15" fill="rgb(251,28,31)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="303.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.04%)</title><rect x="22.6602%" y="277" width="0.0424%" height="15" fill="rgb(233,223,10)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="287.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.04%)</title><rect x="22.6602%" y="261" width="0.0424%" height="15" fill="rgb(215,21,27)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="271.50"></text></g><g><title>exit_to_user_mode_loop (6 samples, 0.04%)</title><rect x="22.6602%" y="245" width="0.0424%" height="15" fill="rgb(232,23,21)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="255.50"></text></g><g><title>schedule (6 samples, 0.04%)</title><rect x="22.6602%" y="229" width="0.0424%" height="15" fill="rgb(244,5,23)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="239.50"></text></g><g><title>__schedule (6 samples, 0.04%)</title><rect x="22.6602%" y="213" width="0.0424%" height="15" fill="rgb(226,81,46)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="223.50"></text></g><g><title>finish_task_switch.isra.0 (6 samples, 0.04%)</title><rect x="22.6602%" y="197" width="0.0424%" height="15" fill="rgb(247,70,30)" fg:x="3208" fg:w="6"/><text x="22.9102%" y="207.50"></text></g><g><title>mi_segment_init.constprop.0 (2 samples, 0.01%)</title><rect x="22.7025%" y="293" width="0.0141%" height="15" fill="rgb(212,68,19)" fg:x="3214" fg:w="2"/><text x="22.9525%" y="303.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.02%)</title><rect x="22.7025%" y="341" width="0.0212%" height="15" fill="rgb(240,187,13)" fg:x="3214" fg:w="3"/><text x="22.9525%" y="351.50"></text></g><g><title>mi_page_fresh_alloc (3 samples, 0.02%)</title><rect x="22.7025%" y="325" width="0.0212%" height="15" fill="rgb(223,113,26)" fg:x="3214" fg:w="3"/><text x="22.9525%" y="335.50"></text></g><g><title>mi_segments_page_alloc.constprop.1 (3 samples, 0.02%)</title><rect x="22.7025%" y="309" width="0.0212%" height="15" fill="rgb(206,192,2)" fg:x="3214" fg:w="3"/><text x="22.9525%" y="319.50"></text></g><g><title>std::io::Read::read_to_end (3,169 samples, 22.38%)</title><rect x="0.3461%" y="405" width="22.3847%" height="15" fill="rgb(241,108,4)" fg:x="49" fg:w="3169"/><text x="0.5961%" y="415.50">std::io::Read::read_to_end</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (408 samples, 2.88%)</title><rect x="19.8488%" y="389" width="2.8820%" height="15" fill="rgb(247,173,49)" fg:x="2810" fg:w="408"/><text x="20.0988%" y="399.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (408 samples, 2.88%)</title><rect x="19.8488%" y="373" width="2.8820%" height="15" fill="rgb(224,114,35)" fg:x="2810" fg:w="408"/><text x="20.0988%" y="383.50">al..</text></g><g><title>_mi_heap_realloc_zero (408 samples, 2.88%)</title><rect x="19.8488%" y="357" width="2.8820%" height="15" fill="rgb(245,159,27)" fg:x="2810" fg:w="408"/><text x="20.0988%" y="367.50">_m..</text></g><g><title>[unknown] (3,188 samples, 22.52%)</title><rect x="0.2190%" y="469" width="22.5189%" height="15" fill="rgb(245,172,44)" fg:x="31" fg:w="3188"/><text x="0.4690%" y="479.50">[unknown]</text></g><g><title>sfa::main (3,175 samples, 22.43%)</title><rect x="0.3108%" y="453" width="22.4271%" height="15" fill="rgb(236,23,11)" fg:x="44" fg:w="3175"/><text x="0.5608%" y="463.50">sfa::main</text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_sequence (3,175 samples, 22.43%)</title><rect x="0.3108%" y="437" width="22.4271%" height="15" fill="rgb(205,117,38)" fg:x="44" fg:w="3175"/><text x="0.5608%" y="447.50">libsfasta::formats::sfasta::Sfasta::..</text></g><g><title>libsfasta::data_types::sequence_block::SequenceBlockCompressed::decompress (3,175 samples, 22.43%)</title><rect x="0.3108%" y="421" width="22.4271%" height="15" fill="rgb(237,72,25)" fg:x="44" fg:w="3175"/><text x="0.5608%" y="431.50">libsfasta::data_types::sequence_bloc..</text></g><g><title>__GI_exit (2 samples, 0.01%)</title><rect x="22.7379%" y="421" width="0.0141%" height="15" fill="rgb(244,70,9)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="431.50"></text></g><g><title>__run_exit_handlers (2 samples, 0.01%)</title><rect x="22.7379%" y="405" width="0.0141%" height="15" fill="rgb(217,125,39)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="415.50"></text></g><g><title>mi_process_done (2 samples, 0.01%)</title><rect x="22.7379%" y="389" width="0.0141%" height="15" fill="rgb(235,36,10)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="399.50"></text></g><g><title>mi_heap_collect_ex (2 samples, 0.01%)</title><rect x="22.7379%" y="373" width="0.0141%" height="15" fill="rgb(251,123,47)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="383.50"></text></g><g><title>mi_segment_cache_purge (2 samples, 0.01%)</title><rect x="22.7379%" y="357" width="0.0141%" height="15" fill="rgb(221,13,13)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="367.50"></text></g><g><title>mi_commit_mask_decommit.constprop.0 (2 samples, 0.01%)</title><rect x="22.7379%" y="341" width="0.0141%" height="15" fill="rgb(238,131,9)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="351.50"></text></g><g><title>_mi_os_decommit (2 samples, 0.01%)</title><rect x="22.7379%" y="325" width="0.0141%" height="15" fill="rgb(211,50,8)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="335.50"></text></g><g><title>__GI_madvise (2 samples, 0.01%)</title><rect x="22.7379%" y="309" width="0.0141%" height="15" fill="rgb(245,182,24)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="22.7379%" y="293" width="0.0141%" height="15" fill="rgb(242,14,37)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="303.50"></text></g><g><title>do_syscall_64 (2 samples, 0.01%)</title><rect x="22.7379%" y="277" width="0.0141%" height="15" fill="rgb(246,228,12)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="287.50"></text></g><g><title>__x64_sys_madvise (2 samples, 0.01%)</title><rect x="22.7379%" y="261" width="0.0141%" height="15" fill="rgb(213,55,15)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="271.50"></text></g><g><title>do_madvise.part.0 (2 samples, 0.01%)</title><rect x="22.7379%" y="245" width="0.0141%" height="15" fill="rgb(209,9,3)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="255.50"></text></g><g><title>zap_page_range (2 samples, 0.01%)</title><rect x="22.7379%" y="229" width="0.0141%" height="15" fill="rgb(230,59,30)" fg:x="3219" fg:w="2"/><text x="22.9879%" y="239.50"></text></g><g><title>__x64_sys_write (2 samples, 0.01%)</title><rect x="22.8226%" y="229" width="0.0141%" height="15" fill="rgb(209,121,21)" fg:x="3231" fg:w="2"/><text x="23.0726%" y="239.50"></text></g><g><title>__fget_light (4 samples, 0.03%)</title><rect x="22.8509%" y="181" width="0.0283%" height="15" fill="rgb(220,109,13)" fg:x="3235" fg:w="4"/><text x="23.1009%" y="191.50"></text></g><g><title>__fsnotify_parent (2 samples, 0.01%)</title><rect x="22.8791%" y="181" width="0.0141%" height="15" fill="rgb(232,18,1)" fg:x="3239" fg:w="2"/><text x="23.1291%" y="191.50"></text></g><g><title>dget_parent (5 samples, 0.04%)</title><rect x="22.9357%" y="149" width="0.0353%" height="15" fill="rgb(215,41,42)" fg:x="3247" fg:w="5"/><text x="23.1857%" y="159.50"></text></g><g><title>lockref_get_not_zero (4 samples, 0.03%)</title><rect x="22.9427%" y="133" width="0.0283%" height="15" fill="rgb(224,123,36)" fg:x="3248" fg:w="4"/><text x="23.1927%" y="143.50"></text></g><g><title>__fsnotify_parent (11 samples, 0.08%)</title><rect x="22.9215%" y="165" width="0.0777%" height="15" fill="rgb(240,125,3)" fg:x="3245" fg:w="11"/><text x="23.1715%" y="175.50"></text></g><g><title>rcu_read_unlock_strict (2 samples, 0.01%)</title><rect x="22.9851%" y="149" width="0.0141%" height="15" fill="rgb(205,98,50)" fg:x="3254" fg:w="2"/><text x="23.2351%" y="159.50"></text></g><g><title>apparmor_file_permission (3 samples, 0.02%)</title><rect x="23.0063%" y="149" width="0.0212%" height="15" fill="rgb(205,185,37)" fg:x="3257" fg:w="3"/><text x="23.2563%" y="159.50"></text></g><g><title>vfs_write (20 samples, 0.14%)</title><rect x="22.9003%" y="181" width="0.1413%" height="15" fill="rgb(238,207,15)" fg:x="3242" fg:w="20"/><text x="23.1503%" y="191.50"></text></g><g><title>rw_verify_area (5 samples, 0.04%)</title><rect x="23.0063%" y="165" width="0.0353%" height="15" fill="rgb(213,199,42)" fg:x="3257" fg:w="5"/><text x="23.2563%" y="175.50"></text></g><g><title>security_file_permission (2 samples, 0.01%)</title><rect x="23.0275%" y="149" width="0.0141%" height="15" fill="rgb(235,201,11)" fg:x="3260" fg:w="2"/><text x="23.2775%" y="159.50"></text></g><g><title>apparmor_file_permission (2 samples, 0.01%)</title><rect x="23.0275%" y="133" width="0.0141%" height="15" fill="rgb(207,46,11)" fg:x="3260" fg:w="2"/><text x="23.2775%" y="143.50"></text></g><g><title>__x64_sys_write (30 samples, 0.21%)</title><rect x="22.8368%" y="213" width="0.2119%" height="15" fill="rgb(241,35,35)" fg:x="3233" fg:w="30"/><text x="23.0868%" y="223.50"></text></g><g><title>ksys_write (30 samples, 0.21%)</title><rect x="22.8368%" y="197" width="0.2119%" height="15" fill="rgb(243,32,47)" fg:x="3233" fg:w="30"/><text x="23.0868%" y="207.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.01%)</title><rect x="23.0487%" y="213" width="0.0141%" height="15" fill="rgb(247,202,23)" fg:x="3263" fg:w="2"/><text x="23.2987%" y="223.50"></text></g><g><title>do_syscall_64 (34 samples, 0.24%)</title><rect x="22.8368%" y="229" width="0.2402%" height="15" fill="rgb(219,102,11)" fg:x="3233" fg:w="34"/><text x="23.0868%" y="239.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.01%)</title><rect x="23.0628%" y="213" width="0.0141%" height="15" fill="rgb(243,110,44)" fg:x="3265" fg:w="2"/><text x="23.3128%" y="223.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.01%)</title><rect x="23.0628%" y="197" width="0.0141%" height="15" fill="rgb(222,74,54)" fg:x="3265" fg:w="2"/><text x="23.3128%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (37 samples, 0.26%)</title><rect x="22.8226%" y="245" width="0.2614%" height="15" fill="rgb(216,99,12)" fg:x="3231" fg:w="37"/><text x="23.0726%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (47 samples, 0.33%)</title><rect x="22.7873%" y="325" width="0.3320%" height="15" fill="rgb(226,22,26)" fg:x="3226" fg:w="47"/><text x="23.0373%" y="335.50"></text></g><g><title>std::io::Write::write_all (47 samples, 0.33%)</title><rect x="22.7873%" y="309" width="0.3320%" height="15" fill="rgb(217,163,10)" fg:x="3226" fg:w="47"/><text x="23.0373%" y="319.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (46 samples, 0.32%)</title><rect x="22.7944%" y="293" width="0.3249%" height="15" fill="rgb(213,25,53)" fg:x="3227" fg:w="46"/><text x="23.0444%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (46 samples, 0.32%)</title><rect x="22.7944%" y="277" width="0.3249%" height="15" fill="rgb(252,105,26)" fg:x="3227" fg:w="46"/><text x="23.0444%" y="287.50"></text></g><g><title>__GI___write (46 samples, 0.32%)</title><rect x="22.7944%" y="261" width="0.3249%" height="15" fill="rgb(220,39,43)" fg:x="3227" fg:w="46"/><text x="23.0444%" y="271.50"></text></g><g><title>syscall_return_via_sysret (5 samples, 0.04%)</title><rect x="23.0840%" y="245" width="0.0353%" height="15" fill="rgb(229,68,48)" fg:x="3268" fg:w="5"/><text x="23.3340%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (49 samples, 0.35%)</title><rect x="22.7873%" y="373" width="0.3461%" height="15" fill="rgb(252,8,32)" fg:x="3226" fg:w="49"/><text x="23.0373%" y="383.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (49 samples, 0.35%)</title><rect x="22.7873%" y="357" width="0.3461%" height="15" fill="rgb(223,20,43)" fg:x="3226" fg:w="49"/><text x="23.0373%" y="367.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (49 samples, 0.35%)</title><rect x="22.7873%" y="341" width="0.3461%" height="15" fill="rgb(229,81,49)" fg:x="3226" fg:w="49"/><text x="23.0373%" y="351.50"></text></g><g><title>std::sys_common::memchr::memrchr (2 samples, 0.01%)</title><rect x="23.1193%" y="325" width="0.0141%" height="15" fill="rgb(236,28,36)" fg:x="3273" fg:w="2"/><text x="23.3693%" y="335.50"></text></g><g><title>std::sys::unix::memchr::memrchr (2 samples, 0.01%)</title><rect x="23.1193%" y="309" width="0.0141%" height="15" fill="rgb(249,185,26)" fg:x="3273" fg:w="2"/><text x="23.3693%" y="319.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.01%)</title><rect x="23.1193%" y="293" width="0.0141%" height="15" fill="rgb(249,174,33)" fg:x="3273" fg:w="2"/><text x="23.3693%" y="303.50"></text></g><g><title>__memrchr_avx2 (2 samples, 0.01%)</title><rect x="23.1193%" y="277" width="0.0141%" height="15" fill="rgb(233,201,37)" fg:x="3273" fg:w="2"/><text x="23.3693%" y="287.50"></text></g><g><title>_mi_page_free (2 samples, 0.01%)</title><rect x="23.1405%" y="373" width="0.0141%" height="15" fill="rgb(221,78,26)" fg:x="3276" fg:w="2"/><text x="23.3905%" y="383.50"></text></g><g><title>_mi_page_retire (2 samples, 0.01%)</title><rect x="23.1546%" y="373" width="0.0141%" height="15" fill="rgb(250,127,30)" fg:x="3278" fg:w="2"/><text x="23.4046%" y="383.50"></text></g><g><title>mi_option_is_enabled (2 samples, 0.01%)</title><rect x="23.1829%" y="357" width="0.0141%" height="15" fill="rgb(230,49,44)" fg:x="3282" fg:w="2"/><text x="23.4329%" y="367.50"></text></g><g><title>mi_option_get (2 samples, 0.01%)</title><rect x="23.1829%" y="341" width="0.0141%" height="15" fill="rgb(229,67,23)" fg:x="3282" fg:w="2"/><text x="23.4329%" y="351.50"></text></g><g><title>_mi_clock_now (10 samples, 0.07%)</title><rect x="23.2323%" y="325" width="0.0706%" height="15" fill="rgb(249,83,47)" fg:x="3289" fg:w="10"/><text x="23.4823%" y="335.50"></text></g><g><title>__clock_gettime_2 (9 samples, 0.06%)</title><rect x="23.2394%" y="309" width="0.0636%" height="15" fill="rgb(215,43,3)" fg:x="3290" fg:w="9"/><text x="23.4894%" y="319.50"></text></g><g><title>[[vdso]] (8 samples, 0.06%)</title><rect x="23.2465%" y="293" width="0.0565%" height="15" fill="rgb(238,154,13)" fg:x="3291" fg:w="8"/><text x="23.4965%" y="303.50"></text></g><g><title>[[vdso]] (5 samples, 0.04%)</title><rect x="23.2676%" y="277" width="0.0353%" height="15" fill="rgb(219,56,2)" fg:x="3294" fg:w="5"/><text x="23.5176%" y="287.50"></text></g><g><title>_mi_segment_page_free (21 samples, 0.15%)</title><rect x="23.1688%" y="373" width="0.1483%" height="15" fill="rgb(233,0,4)" fg:x="3280" fg:w="21"/><text x="23.4188%" y="383.50"></text></g><g><title>mi_segment_span_free_coalesce (17 samples, 0.12%)</title><rect x="23.1970%" y="357" width="0.1201%" height="15" fill="rgb(235,30,7)" fg:x="3284" fg:w="17"/><text x="23.4470%" y="367.50"></text></g><g><title>mi_segment_perhaps_decommit (15 samples, 0.11%)</title><rect x="23.2111%" y="341" width="0.1060%" height="15" fill="rgb(250,79,13)" fg:x="3286" fg:w="15"/><text x="23.4611%" y="351.50"></text></g><g><title>mi_segment_commit_mask.part.0 (2 samples, 0.01%)</title><rect x="23.3030%" y="325" width="0.0141%" height="15" fill="rgb(211,146,34)" fg:x="3299" fg:w="2"/><text x="23.5530%" y="335.50"></text></g><g><title>alloc::string::String::with_capacity (4 samples, 0.03%)</title><rect x="23.3171%" y="357" width="0.0283%" height="15" fill="rgb(228,22,38)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.03%)</title><rect x="23.3171%" y="341" width="0.0283%" height="15" fill="rgb(235,168,5)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.03%)</title><rect x="23.3171%" y="325" width="0.0283%" height="15" fill="rgb(221,155,16)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.03%)</title><rect x="23.3171%" y="309" width="0.0283%" height="15" fill="rgb(215,215,53)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.03%)</title><rect x="23.3171%" y="293" width="0.0283%" height="15" fill="rgb(223,4,10)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.03%)</title><rect x="23.3171%" y="277" width="0.0283%" height="15" fill="rgb(234,103,6)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.03%)</title><rect x="23.3171%" y="261" width="0.0283%" height="15" fill="rgb(227,97,0)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="271.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.03%)</title><rect x="23.3171%" y="245" width="0.0283%" height="15" fill="rgb(234,150,53)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="255.50"></text></g><g><title>mi_malloc (4 samples, 0.03%)</title><rect x="23.3171%" y="229" width="0.0283%" height="15" fill="rgb(228,201,54)" fg:x="3301" fg:w="4"/><text x="23.5671%" y="239.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.02%)</title><rect x="23.6138%" y="149" width="0.0212%" height="15" fill="rgb(222,22,37)" fg:x="3343" fg:w="3"/><text x="23.8638%" y="159.50"></text></g><g><title>_mi_bin (2 samples, 0.01%)</title><rect x="23.6208%" y="133" width="0.0141%" height="15" fill="rgb(237,53,32)" fg:x="3344" fg:w="2"/><text x="23.8708%" y="143.50"></text></g><g><title>_mi_page_retire (3 samples, 0.02%)</title><rect x="23.6350%" y="149" width="0.0212%" height="15" fill="rgb(233,25,53)" fg:x="3346" fg:w="3"/><text x="23.8850%" y="159.50"></text></g><g><title>_mi_heap_realloc_zero (23 samples, 0.16%)</title><rect x="23.5078%" y="165" width="0.1625%" height="15" fill="rgb(210,40,34)" fg:x="3328" fg:w="23"/><text x="23.7578%" y="175.50"></text></g><g><title>mi_free (2 samples, 0.01%)</title><rect x="23.6561%" y="149" width="0.0141%" height="15" fill="rgb(241,220,44)" fg:x="3349" fg:w="2"/><text x="23.9061%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (41 samples, 0.29%)</title><rect x="23.3948%" y="229" width="0.2896%" height="15" fill="rgb(235,28,35)" fg:x="3312" fg:w="41"/><text x="23.6448%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (40 samples, 0.28%)</title><rect x="23.4019%" y="213" width="0.2825%" height="15" fill="rgb(210,56,17)" fg:x="3313" fg:w="40"/><text x="23.6519%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (37 samples, 0.26%)</title><rect x="23.4230%" y="197" width="0.2614%" height="15" fill="rgb(224,130,29)" fg:x="3316" fg:w="37"/><text x="23.6730%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (30 samples, 0.21%)</title><rect x="23.4725%" y="181" width="0.2119%" height="15" fill="rgb(235,212,8)" fg:x="3323" fg:w="30"/><text x="23.7225%" y="191.50"></text></g><g><title>mi_realloc (2 samples, 0.01%)</title><rect x="23.6703%" y="165" width="0.0141%" height="15" fill="rgb(223,33,50)" fg:x="3351" fg:w="2"/><text x="23.9203%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="23.6844%" y="229" width="0.0283%" height="15" fill="rgb(219,149,13)" fg:x="3353" fg:w="4"/><text x="23.9344%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.03%)</title><rect x="23.6844%" y="213" width="0.0283%" height="15" fill="rgb(250,156,29)" fg:x="3353" fg:w="4"/><text x="23.9344%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (48 samples, 0.34%)</title><rect x="23.3807%" y="325" width="0.3391%" height="15" fill="rgb(216,193,19)" fg:x="3310" fg:w="48"/><text x="23.6307%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (47 samples, 0.33%)</title><rect x="23.3877%" y="309" width="0.3320%" height="15" fill="rgb(216,135,14)" fg:x="3311" fg:w="47"/><text x="23.6377%" y="319.50"></text></g><g><title>alloc::string::String::push_str (47 samples, 0.33%)</title><rect x="23.3877%" y="293" width="0.3320%" height="15" fill="rgb(241,47,5)" fg:x="3311" fg:w="47"/><text x="23.6377%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (47 samples, 0.33%)</title><rect x="23.3877%" y="277" width="0.3320%" height="15" fill="rgb(233,42,35)" fg:x="3311" fg:w="47"/><text x="23.6377%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (47 samples, 0.33%)</title><rect x="23.3877%" y="261" width="0.3320%" height="15" fill="rgb(231,13,6)" fg:x="3311" fg:w="47"/><text x="23.6377%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (47 samples, 0.33%)</title><rect x="23.3877%" y="245" width="0.3320%" height="15" fill="rgb(207,181,40)" fg:x="3311" fg:w="47"/><text x="23.6377%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.01%)</title><rect x="23.7197%" y="325" width="0.0141%" height="15" fill="rgb(254,173,49)" fg:x="3358" fg:w="2"/><text x="23.9697%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (61 samples, 0.43%)</title><rect x="23.3171%" y="373" width="0.4309%" height="15" fill="rgb(221,1,38)" fg:x="3301" fg:w="61"/><text x="23.5671%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (56 samples, 0.40%)</title><rect x="23.3524%" y="357" width="0.3956%" height="15" fill="rgb(206,124,46)" fg:x="3306" fg:w="56"/><text x="23.6024%" y="367.50"></text></g><g><title>core::fmt::write (56 samples, 0.40%)</title><rect x="23.3524%" y="341" width="0.3956%" height="15" fill="rgb(249,21,11)" fg:x="3306" fg:w="56"/><text x="23.6024%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.01%)</title><rect x="23.7338%" y="325" width="0.0141%" height="15" fill="rgb(222,201,40)" fg:x="3360" fg:w="2"/><text x="23.9838%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.01%)</title><rect x="23.7338%" y="309" width="0.0141%" height="15" fill="rgb(235,61,29)" fg:x="3360" fg:w="2"/><text x="23.9838%" y="319.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.01%)</title><rect x="23.7480%" y="373" width="0.0141%" height="15" fill="rgb(219,207,3)" fg:x="3362" fg:w="2"/><text x="23.9980%" y="383.50"></text></g><g><title>exc_page_fault (2 samples, 0.01%)</title><rect x="23.7480%" y="357" width="0.0141%" height="15" fill="rgb(222,56,46)" fg:x="3362" fg:w="2"/><text x="23.9980%" y="367.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.01%)</title><rect x="23.7480%" y="341" width="0.0141%" height="15" fill="rgb(239,76,54)" fg:x="3362" fg:w="2"/><text x="23.9980%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;libsfasta::data_types::seq_loc::SeqLoc&gt; (3 samples, 0.02%)</title><rect x="23.7621%" y="373" width="0.0212%" height="15" fill="rgb(231,124,27)" fg:x="3364" fg:w="3"/><text x="24.0121%" y="383.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.01%)</title><rect x="23.8751%" y="325" width="0.0141%" height="15" fill="rgb(249,195,6)" fg:x="3380" fg:w="2"/><text x="24.1251%" y="335.50"></text></g><g><title>exc_page_fault (2 samples, 0.01%)</title><rect x="23.8751%" y="309" width="0.0141%" height="15" fill="rgb(237,174,47)" fg:x="3380" fg:w="2"/><text x="24.1251%" y="319.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.01%)</title><rect x="23.8751%" y="293" width="0.0141%" height="15" fill="rgb(206,201,31)" fg:x="3380" fg:w="2"/><text x="24.1251%" y="303.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_header (20 samples, 0.14%)</title><rect x="23.7833%" y="373" width="0.1413%" height="15" fill="rgb(231,57,52)" fg:x="3367" fg:w="20"/><text x="24.0333%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (13 samples, 0.09%)</title><rect x="23.8327%" y="357" width="0.0918%" height="15" fill="rgb(248,177,22)" fg:x="3374" fg:w="13"/><text x="24.0827%" y="367.50"></text></g><g><title>core::str::validations::run_utf8_validation (13 samples, 0.09%)</title><rect x="23.8327%" y="341" width="0.0918%" height="15" fill="rgb(215,211,37)" fg:x="3374" fg:w="13"/><text x="24.0827%" y="351.50"></text></g><g><title>core::str::validations::contains_nonascii (5 samples, 0.04%)</title><rect x="23.8892%" y="325" width="0.0353%" height="15" fill="rgb(241,128,51)" fg:x="3382" fg:w="5"/><text x="24.1392%" y="335.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.02%)</title><rect x="23.9034%" y="309" width="0.0212%" height="15" fill="rgb(227,165,31)" fg:x="3384" fg:w="3"/><text x="24.1534%" y="319.50"></text></g><g><title>exc_page_fault (3 samples, 0.02%)</title><rect x="23.9034%" y="293" width="0.0212%" height="15" fill="rgb(228,167,24)" fg:x="3384" fg:w="3"/><text x="24.1534%" y="303.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.02%)</title><rect x="23.9034%" y="277" width="0.0212%" height="15" fill="rgb(228,143,12)" fg:x="3384" fg:w="3"/><text x="24.1534%" y="287.50"></text></g><g><title>handle_mm_fault (3 samples, 0.02%)</title><rect x="23.9034%" y="261" width="0.0212%" height="15" fill="rgb(249,149,8)" fg:x="3384" fg:w="3"/><text x="24.1534%" y="271.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.02%)</title><rect x="23.9034%" y="245" width="0.0212%" height="15" fill="rgb(243,35,44)" fg:x="3384" fg:w="3"/><text x="24.1534%" y="255.50"></text></g><g><title>handle_pte_fault (3 samples, 0.02%)</title><rect x="23.9034%" y="229" width="0.0212%" height="15" fill="rgb(246,89,9)" fg:x="3384" fg:w="3"/><text x="24.1534%" y="239.50"></text></g><g><title>do_numa_page (3 samples, 0.02%)</title><rect x="23.9034%" y="213" width="0.0212%" height="15" fill="rgb(233,213,13)" fg:x="3384" fg:w="3"/><text x="24.1534%" y="223.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.03%)</title><rect x="23.9952%" y="357" width="0.0283%" height="15" fill="rgb(233,141,41)" fg:x="3397" fg:w="4"/><text x="24.2452%" y="367.50"></text></g><g><title>exc_page_fault (4 samples, 0.03%)</title><rect x="23.9952%" y="341" width="0.0283%" height="15" fill="rgb(239,167,4)" fg:x="3397" fg:w="4"/><text x="24.2452%" y="351.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.03%)</title><rect x="23.9952%" y="325" width="0.0283%" height="15" fill="rgb(209,217,16)" fg:x="3397" fg:w="4"/><text x="24.2452%" y="335.50"></text></g><g><title>handle_mm_fault (3 samples, 0.02%)</title><rect x="24.0023%" y="309" width="0.0212%" height="15" fill="rgb(219,88,35)" fg:x="3398" fg:w="3"/><text x="24.2523%" y="319.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.02%)</title><rect x="24.0023%" y="293" width="0.0212%" height="15" fill="rgb(220,193,23)" fg:x="3398" fg:w="3"/><text x="24.2523%" y="303.50"></text></g><g><title>handle_pte_fault (2 samples, 0.01%)</title><rect x="24.0093%" y="277" width="0.0141%" height="15" fill="rgb(230,90,52)" fg:x="3399" fg:w="2"/><text x="24.2593%" y="287.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_id (18 samples, 0.13%)</title><rect x="23.9246%" y="373" width="0.1271%" height="15" fill="rgb(252,106,19)" fg:x="3387" fg:w="18"/><text x="24.1746%" y="383.50"></text></g><g><title>mi_malloc (3 samples, 0.02%)</title><rect x="24.0305%" y="357" width="0.0212%" height="15" fill="rgb(206,74,20)" fg:x="3402" fg:w="3"/><text x="24.2805%" y="367.50"></text></g><g><title>ext4_file_read_iter (2 samples, 0.01%)</title><rect x="47.7997%" y="229" width="0.0141%" height="15" fill="rgb(230,138,44)" fg:x="6767" fg:w="2"/><text x="48.0497%" y="239.50"></text></g><g><title>copy_page_to_iter (9 samples, 0.06%)</title><rect x="47.8774%" y="165" width="0.0636%" height="15" fill="rgb(235,182,43)" fg:x="6778" fg:w="9"/><text x="48.1274%" y="175.50"></text></g><g><title>__cond_resched (6 samples, 0.04%)</title><rect x="47.8986%" y="149" width="0.0424%" height="15" fill="rgb(242,16,51)" fg:x="6781" fg:w="6"/><text x="48.1486%" y="159.50"></text></g><g><title>__schedule (6 samples, 0.04%)</title><rect x="47.8986%" y="133" width="0.0424%" height="15" fill="rgb(248,9,4)" fg:x="6781" fg:w="6"/><text x="48.1486%" y="143.50"></text></g><g><title>finish_task_switch.isra.0 (6 samples, 0.04%)</title><rect x="47.8986%" y="117" width="0.0424%" height="15" fill="rgb(210,31,22)" fg:x="6781" fg:w="6"/><text x="48.1486%" y="127.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.04%)</title><rect x="47.8986%" y="101" width="0.0424%" height="15" fill="rgb(239,54,39)" fg:x="6781" fg:w="6"/><text x="48.1486%" y="111.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.04%)</title><rect x="47.8986%" y="85" width="0.0424%" height="15" fill="rgb(230,99,41)" fg:x="6781" fg:w="6"/><text x="48.1486%" y="95.50"></text></g><g><title>native_write_msr (6 samples, 0.04%)</title><rect x="47.8986%" y="69" width="0.0424%" height="15" fill="rgb(253,106,12)" fg:x="6781" fg:w="6"/><text x="48.1486%" y="79.50"></text></g><g><title>copy_user_generic_string (91 samples, 0.64%)</title><rect x="47.9409%" y="165" width="0.6428%" height="15" fill="rgb(213,46,41)" fg:x="6787" fg:w="91"/><text x="48.1909%" y="175.50"></text></g><g><title>filemap_get_pages (19 samples, 0.13%)</title><rect x="48.5837%" y="165" width="0.1342%" height="15" fill="rgb(215,133,35)" fg:x="6878" fg:w="19"/><text x="48.8337%" y="175.50"></text></g><g><title>filemap_get_read_batch (19 samples, 0.13%)</title><rect x="48.5837%" y="149" width="0.1342%" height="15" fill="rgb(213,28,5)" fg:x="6878" fg:w="19"/><text x="48.8337%" y="159.50"></text></g><g><title>xas_load (4 samples, 0.03%)</title><rect x="48.6897%" y="133" width="0.0283%" height="15" fill="rgb(215,77,49)" fg:x="6893" fg:w="4"/><text x="48.9397%" y="143.50"></text></g><g><title>current_time (2 samples, 0.01%)</title><rect x="48.7250%" y="133" width="0.0141%" height="15" fill="rgb(248,100,22)" fg:x="6898" fg:w="2"/><text x="48.9750%" y="143.50"></text></g><g><title>ktime_get_coarse_real_ts64 (2 samples, 0.01%)</title><rect x="48.7250%" y="117" width="0.0141%" height="15" fill="rgb(208,67,9)" fg:x="6898" fg:w="2"/><text x="48.9750%" y="127.50"></text></g><g><title>new_sync_read (132 samples, 0.93%)</title><rect x="47.8138%" y="229" width="0.9324%" height="15" fill="rgb(219,133,21)" fg:x="6769" fg:w="132"/><text x="48.0638%" y="239.50"></text></g><g><title>ext4_file_read_iter (131 samples, 0.93%)</title><rect x="47.8209%" y="213" width="0.9253%" height="15" fill="rgb(246,46,29)" fg:x="6770" fg:w="131"/><text x="48.0709%" y="223.50"></text></g><g><title>generic_file_read_iter (131 samples, 0.93%)</title><rect x="47.8209%" y="197" width="0.9253%" height="15" fill="rgb(246,185,52)" fg:x="6770" fg:w="131"/><text x="48.0709%" y="207.50"></text></g><g><title>filemap_read (130 samples, 0.92%)</title><rect x="47.8279%" y="181" width="0.9183%" height="15" fill="rgb(252,136,11)" fg:x="6771" fg:w="130"/><text x="48.0779%" y="191.50"></text></g><g><title>touch_atime (3 samples, 0.02%)</title><rect x="48.7250%" y="165" width="0.0212%" height="15" fill="rgb(219,138,53)" fg:x="6898" fg:w="3"/><text x="48.9750%" y="175.50"></text></g><g><title>atime_needs_update (3 samples, 0.02%)</title><rect x="48.7250%" y="149" width="0.0212%" height="15" fill="rgb(211,51,23)" fg:x="6898" fg:w="3"/><text x="48.9750%" y="159.50"></text></g><g><title>__x64_sys_read (138 samples, 0.97%)</title><rect x="47.7785%" y="277" width="0.9748%" height="15" fill="rgb(247,221,28)" fg:x="6764" fg:w="138"/><text x="48.0285%" y="287.50"></text></g><g><title>ksys_read (138 samples, 0.97%)</title><rect x="47.7785%" y="261" width="0.9748%" height="15" fill="rgb(251,222,45)" fg:x="6764" fg:w="138"/><text x="48.0285%" y="271.50"></text></g><g><title>vfs_read (137 samples, 0.97%)</title><rect x="47.7855%" y="245" width="0.9677%" height="15" fill="rgb(217,162,53)" fg:x="6765" fg:w="137"/><text x="48.0355%" y="255.50"></text></g><g><title>__libc_read (144 samples, 1.02%)</title><rect x="47.7502%" y="325" width="1.0172%" height="15" fill="rgb(229,93,14)" fg:x="6760" fg:w="144"/><text x="48.0002%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (141 samples, 1.00%)</title><rect x="47.7714%" y="309" width="0.9960%" height="15" fill="rgb(209,67,49)" fg:x="6763" fg:w="141"/><text x="48.0214%" y="319.50"></text></g><g><title>do_syscall_64 (140 samples, 0.99%)</title><rect x="47.7785%" y="293" width="0.9889%" height="15" fill="rgb(213,87,29)" fg:x="6764" fg:w="140"/><text x="48.0285%" y="303.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.01%)</title><rect x="48.7533%" y="277" width="0.0141%" height="15" fill="rgb(205,151,52)" fg:x="6902" fg:w="2"/><text x="49.0033%" y="287.50"></text></g><g><title>exit_to_user_mode_prepare (2 samples, 0.01%)</title><rect x="48.7533%" y="261" width="0.0141%" height="15" fill="rgb(253,215,39)" fg:x="6902" fg:w="2"/><text x="49.0033%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (145 samples, 1.02%)</title><rect x="47.7502%" y="341" width="1.0242%" height="15" fill="rgb(221,220,41)" fg:x="6760" fg:w="145"/><text x="48.0002%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (164 samples, 1.16%)</title><rect x="48.7745%" y="341" width="1.1584%" height="15" fill="rgb(218,133,21)" fg:x="6905" fg:w="164"/><text x="49.0245%" y="351.50"></text></g><g><title>__memmove_avx_unaligned (414 samples, 2.92%)</title><rect x="49.9329%" y="341" width="2.9243%" height="15" fill="rgb(221,193,43)" fg:x="7069" fg:w="414"/><text x="50.1829%" y="351.50">__..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (2,446 samples, 17.28%)</title><rect x="35.6149%" y="357" width="17.2777%" height="15" fill="rgb(240,128,52)" fg:x="5042" fg:w="2446"/><text x="35.8649%" y="367.50">&lt;std::io::buffered::bufread..</text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.04%)</title><rect x="52.8572%" y="341" width="0.0353%" height="15" fill="rgb(253,114,12)" fg:x="7483" fg:w="5"/><text x="53.1072%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.04%)</title><rect x="52.8572%" y="325" width="0.0353%" height="15" fill="rgb(215,223,47)" fg:x="7483" fg:w="5"/><text x="53.1072%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (4 samples, 0.03%)</title><rect x="52.8643%" y="309" width="0.0283%" height="15" fill="rgb(248,225,23)" fg:x="7484" fg:w="4"/><text x="53.1143%" y="319.50"></text></g><g><title>hrtimer_interrupt (4 samples, 0.03%)</title><rect x="52.8643%" y="293" width="0.0283%" height="15" fill="rgb(250,108,0)" fg:x="7484" fg:w="4"/><text x="53.1143%" y="303.50"></text></g><g><title>__hrtimer_run_queues (4 samples, 0.03%)</title><rect x="52.8643%" y="277" width="0.0283%" height="15" fill="rgb(228,208,7)" fg:x="7484" fg:w="4"/><text x="53.1143%" y="287.50"></text></g><g><title>tick_sched_timer (4 samples, 0.03%)</title><rect x="52.8643%" y="261" width="0.0283%" height="15" fill="rgb(244,45,10)" fg:x="7484" fg:w="4"/><text x="53.1143%" y="271.50"></text></g><g><title>tick_sched_handle (4 samples, 0.03%)</title><rect x="52.8643%" y="245" width="0.0283%" height="15" fill="rgb(207,125,25)" fg:x="7484" fg:w="4"/><text x="53.1143%" y="255.50"></text></g><g><title>update_process_times (4 samples, 0.03%)</title><rect x="52.8643%" y="229" width="0.0283%" height="15" fill="rgb(210,195,18)" fg:x="7484" fg:w="4"/><text x="53.1143%" y="239.50"></text></g><g><title>scheduler_tick (3 samples, 0.02%)</title><rect x="52.8714%" y="213" width="0.0212%" height="15" fill="rgb(249,80,12)" fg:x="7485" fg:w="3"/><text x="53.1214%" y="223.50"></text></g><g><title>task_tick_fair (2 samples, 0.01%)</title><rect x="52.8784%" y="197" width="0.0141%" height="15" fill="rgb(221,65,9)" fg:x="7486" fg:w="2"/><text x="53.1284%" y="207.50"></text></g><g><title>ext4_llseek (2 samples, 0.01%)</title><rect x="52.9067%" y="277" width="0.0141%" height="15" fill="rgb(235,49,36)" fg:x="7490" fg:w="2"/><text x="53.1567%" y="287.50"></text></g><g><title>__fget_light (2 samples, 0.01%)</title><rect x="52.9208%" y="261" width="0.0141%" height="15" fill="rgb(225,32,20)" fg:x="7492" fg:w="2"/><text x="53.1708%" y="271.50"></text></g><g><title>__x64_sys_lseek (6 samples, 0.04%)</title><rect x="52.9067%" y="293" width="0.0424%" height="15" fill="rgb(215,141,46)" fg:x="7490" fg:w="6"/><text x="53.1567%" y="303.50"></text></g><g><title>ksys_lseek (4 samples, 0.03%)</title><rect x="52.9208%" y="277" width="0.0283%" height="15" fill="rgb(250,160,47)" fg:x="7492" fg:w="4"/><text x="53.1708%" y="287.50"></text></g><g><title>ext4_llseek (2 samples, 0.01%)</title><rect x="52.9349%" y="261" width="0.0141%" height="15" fill="rgb(216,222,40)" fg:x="7494" fg:w="2"/><text x="53.1849%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Seek&gt;::seek (9 samples, 0.06%)</title><rect x="52.8926%" y="357" width="0.0636%" height="15" fill="rgb(234,217,39)" fg:x="7488" fg:w="9"/><text x="53.1426%" y="367.50"></text></g><g><title>__libc_lseek (8 samples, 0.06%)</title><rect x="52.8996%" y="341" width="0.0565%" height="15" fill="rgb(207,178,40)" fg:x="7489" fg:w="8"/><text x="53.1496%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.06%)</title><rect x="52.8996%" y="325" width="0.0565%" height="15" fill="rgb(221,136,13)" fg:x="7489" fg:w="8"/><text x="53.1496%" y="335.50"></text></g><g><title>do_syscall_64 (7 samples, 0.05%)</title><rect x="52.9067%" y="309" width="0.0494%" height="15" fill="rgb(249,199,10)" fg:x="7490" fg:w="7"/><text x="53.1567%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (187 samples, 1.32%)</title><rect x="52.9561%" y="357" width="1.3209%" height="15" fill="rgb(249,222,13)" fg:x="7497" fg:w="187"/><text x="53.2061%" y="367.50"></text></g><g><title>_mi_deferred_free (2 samples, 0.01%)</title><rect x="54.2841%" y="341" width="0.0141%" height="15" fill="rgb(244,185,38)" fg:x="7685" fg:w="2"/><text x="54.5341%" y="351.50"></text></g><g><title>_mi_os_good_alloc_size (2 samples, 0.01%)</title><rect x="54.2982%" y="341" width="0.0141%" height="15" fill="rgb(236,202,9)" fg:x="7687" fg:w="2"/><text x="54.5482%" y="351.50"></text></g><g><title>_mi_segment_page_start (2 samples, 0.01%)</title><rect x="54.3477%" y="325" width="0.0141%" height="15" fill="rgb(250,229,37)" fg:x="7694" fg:w="2"/><text x="54.5977%" y="335.50"></text></g><g><title>_mi_clock_now (7 samples, 0.05%)</title><rect x="54.3618%" y="309" width="0.0494%" height="15" fill="rgb(206,174,23)" fg:x="7696" fg:w="7"/><text x="54.6118%" y="319.50"></text></g><g><title>__clock_gettime_2 (6 samples, 0.04%)</title><rect x="54.3689%" y="293" width="0.0424%" height="15" fill="rgb(211,33,43)" fg:x="7697" fg:w="6"/><text x="54.6189%" y="303.50"></text></g><g><title>[[vdso]] (5 samples, 0.04%)</title><rect x="54.3759%" y="277" width="0.0353%" height="15" fill="rgb(245,58,50)" fg:x="7698" fg:w="5"/><text x="54.6259%" y="287.50"></text></g><g><title>[[vdso]] (4 samples, 0.03%)</title><rect x="54.3830%" y="261" width="0.0283%" height="15" fill="rgb(244,68,36)" fg:x="7699" fg:w="4"/><text x="54.6330%" y="271.50"></text></g><g><title>_mi_clock_now (4 samples, 0.03%)</title><rect x="54.5455%" y="261" width="0.0283%" height="15" fill="rgb(232,229,15)" fg:x="7722" fg:w="4"/><text x="54.7955%" y="271.50"></text></g><g><title>__clock_gettime_2 (3 samples, 0.02%)</title><rect x="54.5525%" y="245" width="0.0212%" height="15" fill="rgb(254,30,23)" fg:x="7723" fg:w="3"/><text x="54.8025%" y="255.50"></text></g><g><title>[[vdso]] (3 samples, 0.02%)</title><rect x="54.5525%" y="229" width="0.0212%" height="15" fill="rgb(235,160,14)" fg:x="7723" fg:w="3"/><text x="54.8025%" y="239.50"></text></g><g><title>[[vdso]] (2 samples, 0.01%)</title><rect x="54.5596%" y="213" width="0.0141%" height="15" fill="rgb(212,155,44)" fg:x="7724" fg:w="2"/><text x="54.8096%" y="223.50"></text></g><g><title>mi_segment_span_allocate.isra.0 (26 samples, 0.18%)</title><rect x="54.4395%" y="293" width="0.1837%" height="15" fill="rgb(226,2,50)" fg:x="7707" fg:w="26"/><text x="54.6895%" y="303.50"></text></g><g><title>mi_segment_commitx (19 samples, 0.13%)</title><rect x="54.4889%" y="277" width="0.1342%" height="15" fill="rgb(234,177,6)" fg:x="7714" fg:w="19"/><text x="54.7389%" y="287.50"></text></g><g><title>mi_segment_commit_mask.part.0 (7 samples, 0.05%)</title><rect x="54.5737%" y="261" width="0.0494%" height="15" fill="rgb(217,24,9)" fg:x="7726" fg:w="7"/><text x="54.8237%" y="271.50"></text></g><g><title>_mi_malloc_generic (49 samples, 0.35%)</title><rect x="54.2841%" y="357" width="0.3461%" height="15" fill="rgb(220,13,46)" fg:x="7685" fg:w="49"/><text x="54.5341%" y="367.50"></text></g><g><title>mi_page_fresh_alloc (45 samples, 0.32%)</title><rect x="54.3124%" y="341" width="0.3179%" height="15" fill="rgb(239,221,27)" fg:x="7689" fg:w="45"/><text x="54.5624%" y="351.50"></text></g><g><title>mi_segments_page_alloc.constprop.1 (38 samples, 0.27%)</title><rect x="54.3618%" y="325" width="0.2684%" height="15" fill="rgb(222,198,25)" fg:x="7696" fg:w="38"/><text x="54.6118%" y="335.50"></text></g><g><title>mi_segments_page_find_and_allocate (31 samples, 0.22%)</title><rect x="54.4112%" y="309" width="0.2190%" height="15" fill="rgb(211,99,13)" fg:x="7703" fg:w="31"/><text x="54.6612%" y="319.50"></text></g><g><title>_mi_heap_realloc_zero (4 samples, 0.03%)</title><rect x="54.6514%" y="325" width="0.0283%" height="15" fill="rgb(232,111,31)" fg:x="7737" fg:w="4"/><text x="54.9014%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.10%)</title><rect x="54.6443%" y="357" width="0.0989%" height="15" fill="rgb(245,82,37)" fg:x="7736" fg:w="14"/><text x="54.8943%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.09%)</title><rect x="54.6514%" y="341" width="0.0918%" height="15" fill="rgb(227,149,46)" fg:x="7737" fg:w="13"/><text x="54.9014%" y="351.50"></text></g><g><title>mi_malloc (9 samples, 0.06%)</title><rect x="54.6797%" y="325" width="0.0636%" height="15" fill="rgb(218,36,50)" fg:x="7741" fg:w="9"/><text x="54.9297%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.04%)</title><rect x="54.9763%" y="309" width="0.0424%" height="15" fill="rgb(226,80,48)" fg:x="7783" fg:w="6"/><text x="55.2263%" y="319.50"></text></g><g><title>_mi_bin (2 samples, 0.01%)</title><rect x="55.0470%" y="293" width="0.0141%" height="15" fill="rgb(238,224,15)" fg:x="7793" fg:w="2"/><text x="55.2970%" y="303.50"></text></g><g><title>_mi_malloc_generic (8 samples, 0.06%)</title><rect x="55.0258%" y="309" width="0.0565%" height="15" fill="rgb(241,136,10)" fg:x="7790" fg:w="8"/><text x="55.2758%" y="319.50"></text></g><g><title>_mi_page_free_collect (2 samples, 0.01%)</title><rect x="55.0682%" y="293" width="0.0141%" height="15" fill="rgb(208,32,45)" fg:x="7796" fg:w="2"/><text x="55.3182%" y="303.50"></text></g><g><title>_mi_page_retire (5 samples, 0.04%)</title><rect x="55.0823%" y="309" width="0.0353%" height="15" fill="rgb(207,135,9)" fg:x="7798" fg:w="5"/><text x="55.3323%" y="319.50"></text></g><g><title>_mi_heap_realloc_zero (40 samples, 0.28%)</title><rect x="54.8774%" y="325" width="0.2825%" height="15" fill="rgb(206,86,44)" fg:x="7769" fg:w="40"/><text x="55.1274%" y="335.50"></text></g><g><title>mi_free (6 samples, 0.04%)</title><rect x="55.1176%" y="309" width="0.0424%" height="15" fill="rgb(245,177,15)" fg:x="7803" fg:w="6"/><text x="55.3676%" y="319.50"></text></g><g><title>mi_malloc (3 samples, 0.02%)</title><rect x="55.1600%" y="325" width="0.0212%" height="15" fill="rgb(206,64,50)" fg:x="7809" fg:w="3"/><text x="55.4100%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (68 samples, 0.48%)</title><rect x="54.7432%" y="357" width="0.4803%" height="15" fill="rgb(234,36,40)" fg:x="7750" fg:w="68"/><text x="54.9932%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (62 samples, 0.44%)</title><rect x="54.7856%" y="341" width="0.4379%" height="15" fill="rgb(213,64,8)" fg:x="7756" fg:w="62"/><text x="55.0356%" y="351.50"></text></g><g><title>mi_realloc (6 samples, 0.04%)</title><rect x="55.1812%" y="325" width="0.0424%" height="15" fill="rgb(210,75,36)" fg:x="7812" fg:w="6"/><text x="55.4312%" y="335.50"></text></g><g><title>__memcpy_avx_unaligned_erms (15 samples, 0.11%)</title><rect x="57.3638%" y="325" width="0.1060%" height="15" fill="rgb(229,88,21)" fg:x="8121" fg:w="15"/><text x="57.6138%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (229 samples, 1.62%)</title><rect x="56.0853%" y="341" width="1.6176%" height="15" fill="rgb(252,204,47)" fg:x="7940" fg:w="229"/><text x="56.3353%" y="351.50"></text></g><g><title>__memmove_avx_unaligned (33 samples, 0.23%)</title><rect x="57.4698%" y="325" width="0.2331%" height="15" fill="rgb(208,77,27)" fg:x="8136" fg:w="33"/><text x="57.7198%" y="335.50"></text></g><g><title>bincode::features::impl_alloc::&lt;impl bincode::de::Decode for alloc::vec::Vec&lt;T&gt;&gt;::decode (351 samples, 2.48%)</title><rect x="55.2377%" y="357" width="2.4793%" height="15" fill="rgb(221,76,26)" fg:x="7820" fg:w="351"/><text x="55.4877%" y="367.50">bi..</text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::minor (55 samples, 0.39%)</title><rect x="57.7170%" y="357" width="0.3885%" height="15" fill="rgb(225,139,18)" fg:x="8171" fg:w="55"/><text x="57.9670%" y="367.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::partial_head (7 samples, 0.05%)</title><rect x="58.1055%" y="357" width="0.0494%" height="15" fill="rgb(230,137,11)" fg:x="8226" fg:w="7"/><text x="58.3555%" y="367.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::partial_tail (17 samples, 0.12%)</title><rect x="58.1550%" y="357" width="0.1201%" height="15" fill="rgb(212,28,1)" fg:x="8233" fg:w="17"/><text x="58.4050%" y="367.50"></text></g><g><title>__memset_avx2_unaligned_erms (3 samples, 0.02%)</title><rect x="58.2821%" y="325" width="0.0212%" height="15" fill="rgb(248,164,17)" fg:x="8251" fg:w="3"/><text x="58.5321%" y="335.50"></text></g><g><title>libsfasta::utils::Packed::unpack (5 samples, 0.04%)</title><rect x="58.2751%" y="357" width="0.0353%" height="15" fill="rgb(222,171,42)" fg:x="8250" fg:w="5"/><text x="58.5251%" y="367.50"></text></g><g><title>_mi_heap_malloc_zero (4 samples, 0.03%)</title><rect x="58.2821%" y="341" width="0.0283%" height="15" fill="rgb(243,84,45)" fg:x="8251" fg:w="4"/><text x="58.5321%" y="351.50"></text></g><g><title>mi_free (6 samples, 0.04%)</title><rect x="58.3104%" y="357" width="0.0424%" height="15" fill="rgb(252,49,23)" fg:x="8255" fg:w="6"/><text x="58.5604%" y="367.50"></text></g><g><title>libsfasta::formats::sfasta::Sfasta::get_sequence (4,857 samples, 34.31%)</title><rect x="24.0517%" y="373" width="34.3081%" height="15" fill="rgb(215,19,7)" fg:x="3405" fg:w="4857"/><text x="24.3017%" y="383.50">libsfasta::formats::sfasta::Sfasta::get_sequence</text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.05%)</title><rect x="58.5859%" y="341" width="0.0494%" height="15" fill="rgb(238,81,41)" fg:x="8294" fg:w="7"/><text x="58.8359%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (28 samples, 0.20%)</title><rect x="58.4799%" y="357" width="0.1978%" height="15" fill="rgb(210,199,37)" fg:x="8279" fg:w="28"/><text x="58.7299%" y="367.50"></text></g><g><title>__memmove_avx_unaligned (6 samples, 0.04%)</title><rect x="58.6353%" y="341" width="0.0424%" height="15" fill="rgb(244,192,49)" fg:x="8301" fg:w="6"/><text x="58.8853%" y="351.50"></text></g><g><title>do_anonymous_page (4 samples, 0.03%)</title><rect x="58.7201%" y="245" width="0.0283%" height="15" fill="rgb(226,211,11)" fg:x="8313" fg:w="4"/><text x="58.9701%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.07%)</title><rect x="58.6847%" y="357" width="0.0706%" height="15" fill="rgb(236,162,54)" fg:x="8308" fg:w="10"/><text x="58.9347%" y="367.50"></text></g><g><title>asm_exc_page_fault (6 samples, 0.04%)</title><rect x="58.7130%" y="341" width="0.0424%" height="15" fill="rgb(220,229,9)" fg:x="8312" fg:w="6"/><text x="58.9630%" y="351.50"></text></g><g><title>exc_page_fault (5 samples, 0.04%)</title><rect x="58.7201%" y="325" width="0.0353%" height="15" fill="rgb(250,87,22)" fg:x="8313" fg:w="5"/><text x="58.9701%" y="335.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.04%)</title><rect x="58.7201%" y="309" width="0.0353%" height="15" fill="rgb(239,43,17)" fg:x="8313" fg:w="5"/><text x="58.9701%" y="319.50"></text></g><g><title>handle_mm_fault (5 samples, 0.04%)</title><rect x="58.7201%" y="293" width="0.0353%" height="15" fill="rgb(231,177,25)" fg:x="8313" fg:w="5"/><text x="58.9701%" y="303.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.04%)</title><rect x="58.7201%" y="277" width="0.0353%" height="15" fill="rgb(219,179,1)" fg:x="8313" fg:w="5"/><text x="58.9701%" y="287.50"></text></g><g><title>handle_pte_fault (5 samples, 0.04%)</title><rect x="58.7201%" y="261" width="0.0353%" height="15" fill="rgb(238,219,53)" fg:x="8313" fg:w="5"/><text x="58.9701%" y="271.50"></text></g><g><title>clear_page_rep (3 samples, 0.02%)</title><rect x="58.7695%" y="197" width="0.0212%" height="15" fill="rgb(232,167,36)" fg:x="8320" fg:w="3"/><text x="59.0195%" y="207.50"></text></g><g><title>alloc_pages_vma (6 samples, 0.04%)</title><rect x="58.7624%" y="245" width="0.0424%" height="15" fill="rgb(244,19,51)" fg:x="8319" fg:w="6"/><text x="59.0124%" y="255.50"></text></g><g><title>__alloc_pages (6 samples, 0.04%)</title><rect x="58.7624%" y="229" width="0.0424%" height="15" fill="rgb(224,6,22)" fg:x="8319" fg:w="6"/><text x="59.0124%" y="239.50"></text></g><g><title>get_page_from_freelist (5 samples, 0.04%)</title><rect x="58.7695%" y="213" width="0.0353%" height="15" fill="rgb(224,145,5)" fg:x="8320" fg:w="5"/><text x="59.0195%" y="223.50"></text></g><g><title>handle_pte_fault (8 samples, 0.06%)</title><rect x="58.7624%" y="277" width="0.0565%" height="15" fill="rgb(234,130,49)" fg:x="8319" fg:w="8"/><text x="59.0124%" y="287.50"></text></g><g><title>do_anonymous_page (8 samples, 0.06%)</title><rect x="58.7624%" y="261" width="0.0565%" height="15" fill="rgb(254,6,2)" fg:x="8319" fg:w="8"/><text x="59.0124%" y="271.50"></text></g><g><title>asm_exc_page_fault (10 samples, 0.07%)</title><rect x="58.7554%" y="357" width="0.0706%" height="15" fill="rgb(208,96,46)" fg:x="8318" fg:w="10"/><text x="59.0054%" y="367.50"></text></g><g><title>exc_page_fault (9 samples, 0.06%)</title><rect x="58.7624%" y="341" width="0.0636%" height="15" fill="rgb(239,3,39)" fg:x="8319" fg:w="9"/><text x="59.0124%" y="351.50"></text></g><g><title>do_user_addr_fault (9 samples, 0.06%)</title><rect x="58.7624%" y="325" width="0.0636%" height="15" fill="rgb(233,210,1)" fg:x="8319" fg:w="9"/><text x="59.0124%" y="335.50"></text></g><g><title>handle_mm_fault (9 samples, 0.06%)</title><rect x="58.7624%" y="309" width="0.0636%" height="15" fill="rgb(244,137,37)" fg:x="8319" fg:w="9"/><text x="59.0124%" y="319.50"></text></g><g><title>__handle_mm_fault (9 samples, 0.06%)</title><rect x="58.7624%" y="293" width="0.0636%" height="15" fill="rgb(240,136,2)" fg:x="8319" fg:w="9"/><text x="59.0124%" y="303.50"></text></g><g><title>asm_sysvec_reschedule_ipi (6 samples, 0.04%)</title><rect x="58.8260%" y="357" width="0.0424%" height="15" fill="rgb(239,18,37)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="367.50"></text></g><g><title>sysvec_reschedule_ipi (6 samples, 0.04%)</title><rect x="58.8260%" y="341" width="0.0424%" height="15" fill="rgb(218,185,22)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="351.50"></text></g><g><title>irqentry_exit (6 samples, 0.04%)</title><rect x="58.8260%" y="325" width="0.0424%" height="15" fill="rgb(225,218,4)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="335.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.04%)</title><rect x="58.8260%" y="309" width="0.0424%" height="15" fill="rgb(230,182,32)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="319.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.04%)</title><rect x="58.8260%" y="293" width="0.0424%" height="15" fill="rgb(242,56,43)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="303.50"></text></g><g><title>exit_to_user_mode_loop (6 samples, 0.04%)</title><rect x="58.8260%" y="277" width="0.0424%" height="15" fill="rgb(233,99,24)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="287.50"></text></g><g><title>schedule (6 samples, 0.04%)</title><rect x="58.8260%" y="261" width="0.0424%" height="15" fill="rgb(234,209,42)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="271.50"></text></g><g><title>__schedule (6 samples, 0.04%)</title><rect x="58.8260%" y="245" width="0.0424%" height="15" fill="rgb(227,7,12)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="255.50"></text></g><g><title>finish_task_switch.isra.0 (6 samples, 0.04%)</title><rect x="58.8260%" y="229" width="0.0424%" height="15" fill="rgb(245,203,43)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="239.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.04%)</title><rect x="58.8260%" y="213" width="0.0424%" height="15" fill="rgb(238,205,33)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="223.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.04%)</title><rect x="58.8260%" y="197" width="0.0424%" height="15" fill="rgb(231,56,7)" fg:x="8328" fg:w="6"/><text x="59.0760%" y="207.50"></text></g><g><title>bincode::de::impls::&lt;impl bincode::de::Decode for core::option::Option&lt;T&gt;&gt;::decode (11 samples, 0.08%)</title><rect x="58.8684%" y="357" width="0.0777%" height="15" fill="rgb(244,186,29)" fg:x="8334" fg:w="11"/><text x="59.1184%" y="367.50"></text></g><g><title>mi_malloc (3 samples, 0.02%)</title><rect x="58.9249%" y="341" width="0.0212%" height="15" fill="rgb(234,111,31)" fg:x="8342" fg:w="3"/><text x="59.1749%" y="351.50"></text></g><g><title>bincode::features::impl_std::decode_from_std_read (4 samples, 0.03%)</title><rect x="58.9461%" y="357" width="0.0283%" height="15" fill="rgb(241,149,10)" fg:x="8345" fg:w="4"/><text x="59.1961%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (2 samples, 0.01%)</title><rect x="58.9602%" y="341" width="0.0141%" height="15" fill="rgb(249,206,44)" fg:x="8347" fg:w="2"/><text x="59.2102%" y="351.50"></text></g><g><title>clear_page_rep (2 samples, 0.01%)</title><rect x="59.0874%" y="85" width="0.0141%" height="15" fill="rgb(251,153,30)" fg:x="8365" fg:w="2"/><text x="59.3374%" y="95.50"></text></g><g><title>__alloc_pages (3 samples, 0.02%)</title><rect x="59.0874%" y="117" width="0.0212%" height="15" fill="rgb(239,152,38)" fg:x="8365" fg:w="3"/><text x="59.3374%" y="127.50"></text></g><g><title>get_page_from_freelist (3 samples, 0.02%)</title><rect x="59.0874%" y="101" width="0.0212%" height="15" fill="rgb(249,139,47)" fg:x="8365" fg:w="3"/><text x="59.3374%" y="111.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.03%)</title><rect x="59.0874%" y="213" width="0.0283%" height="15" fill="rgb(244,64,35)" fg:x="8365" fg:w="4"/><text x="59.3374%" y="223.50"></text></g><g><title>handle_mm_fault (4 samples, 0.03%)</title><rect x="59.0874%" y="197" width="0.0283%" height="15" fill="rgb(216,46,15)" fg:x="8365" fg:w="4"/><text x="59.3374%" y="207.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.03%)</title><rect x="59.0874%" y="181" width="0.0283%" height="15" fill="rgb(250,74,19)" fg:x="8365" fg:w="4"/><text x="59.3374%" y="191.50"></text></g><g><title>handle_pte_fault (4 samples, 0.03%)</title><rect x="59.0874%" y="165" width="0.0283%" height="15" fill="rgb(249,42,33)" fg:x="8365" fg:w="4"/><text x="59.3374%" y="175.50"></text></g><g><title>do_anonymous_page (4 samples, 0.03%)</title><rect x="59.0874%" y="149" width="0.0283%" height="15" fill="rgb(242,149,17)" fg:x="8365" fg:w="4"/><text x="59.3374%" y="159.50"></text></g><g><title>alloc_pages_vma (4 samples, 0.03%)</title><rect x="59.0874%" y="133" width="0.0283%" height="15" fill="rgb(244,29,21)" fg:x="8365" fg:w="4"/><text x="59.3374%" y="143.50"></text></g><g><title>ZSTD_decompressContinueStream (21 samples, 0.15%)</title><rect x="58.9744%" y="309" width="0.1483%" height="15" fill="rgb(220,130,37)" fg:x="8349" fg:w="21"/><text x="59.2244%" y="319.50"></text></g><g><title>ZSTD_decompressContinue (21 samples, 0.15%)</title><rect x="58.9744%" y="293" width="0.1483%" height="15" fill="rgb(211,67,2)" fg:x="8349" fg:w="21"/><text x="59.2244%" y="303.50"></text></g><g><title>ZSTD_decompressBlock_internal (21 samples, 0.15%)</title><rect x="58.9744%" y="277" width="0.1483%" height="15" fill="rgb(235,68,52)" fg:x="8349" fg:w="21"/><text x="59.2244%" y="287.50"></text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (20 samples, 0.14%)</title><rect x="58.9814%" y="261" width="0.1413%" height="15" fill="rgb(246,142,3)" fg:x="8350" fg:w="20"/><text x="59.2314%" y="271.50"></text></g><g><title>asm_exc_page_fault (7 samples, 0.05%)</title><rect x="59.0732%" y="245" width="0.0494%" height="15" fill="rgb(241,25,7)" fg:x="8363" fg:w="7"/><text x="59.3232%" y="255.50"></text></g><g><title>exc_page_fault (5 samples, 0.04%)</title><rect x="59.0874%" y="229" width="0.0353%" height="15" fill="rgb(242,119,39)" fg:x="8365" fg:w="5"/><text x="59.3374%" y="239.50"></text></g><g><title>&lt;zstd::stream::read::Decoder&lt;R&gt; as std::io::Read&gt;::read (22 samples, 0.16%)</title><rect x="58.9744%" y="341" width="0.1554%" height="15" fill="rgb(241,98,45)" fg:x="8349" fg:w="22"/><text x="59.2244%" y="351.50"></text></g><g><title>ZSTD_decompressStream (22 samples, 0.16%)</title><rect x="58.9744%" y="325" width="0.1554%" height="15" fill="rgb(254,28,30)" fg:x="8349" fg:w="22"/><text x="59.2244%" y="335.50"></text></g><g><title>clear_page_rep (2 samples, 0.01%)</title><rect x="59.1721%" y="165" width="0.0141%" height="15" fill="rgb(241,142,54)" fg:x="8377" fg:w="2"/><text x="59.4221%" y="175.50"></text></g><g><title>alloc_pages_vma (5 samples, 0.04%)</title><rect x="59.1651%" y="213" width="0.0353%" height="15" fill="rgb(222,85,15)" fg:x="8376" fg:w="5"/><text x="59.4151%" y="223.50"></text></g><g><title>__alloc_pages (5 samples, 0.04%)</title><rect x="59.1651%" y="197" width="0.0353%" height="15" fill="rgb(210,85,47)" fg:x="8376" fg:w="5"/><text x="59.4151%" y="207.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.03%)</title><rect x="59.1721%" y="181" width="0.0283%" height="15" fill="rgb(224,206,25)" fg:x="8377" fg:w="4"/><text x="59.4221%" y="191.50"></text></g><g><title>rmqueue (2 samples, 0.01%)</title><rect x="59.1863%" y="165" width="0.0141%" height="15" fill="rgb(243,201,19)" fg:x="8379" fg:w="2"/><text x="59.4363%" y="175.50"></text></g><g><title>rmqueue_bulk.constprop.0 (2 samples, 0.01%)</title><rect x="59.1863%" y="149" width="0.0141%" height="15" fill="rgb(236,59,4)" fg:x="8379" fg:w="2"/><text x="59.4363%" y="159.50"></text></g><g><title>__memset_avx2_unaligned_erms (11 samples, 0.08%)</title><rect x="59.1298%" y="341" width="0.0777%" height="15" fill="rgb(254,179,45)" fg:x="8371" fg:w="11"/><text x="59.3798%" y="351.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.06%)</title><rect x="59.1510%" y="325" width="0.0565%" height="15" fill="rgb(226,14,10)" fg:x="8374" fg:w="8"/><text x="59.4010%" y="335.50"></text></g><g><title>exc_page_fault (7 samples, 0.05%)</title><rect x="59.1580%" y="309" width="0.0494%" height="15" fill="rgb(244,27,41)" fg:x="8375" fg:w="7"/><text x="59.4080%" y="319.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.05%)</title><rect x="59.1580%" y="293" width="0.0494%" height="15" fill="rgb(235,35,32)" fg:x="8375" fg:w="7"/><text x="59.4080%" y="303.50"></text></g><g><title>handle_mm_fault (7 samples, 0.05%)</title><rect x="59.1580%" y="277" width="0.0494%" height="15" fill="rgb(218,68,31)" fg:x="8375" fg:w="7"/><text x="59.4080%" y="287.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.04%)</title><rect x="59.1651%" y="261" width="0.0424%" height="15" fill="rgb(207,120,37)" fg:x="8376" fg:w="6"/><text x="59.4151%" y="271.50"></text></g><g><title>handle_pte_fault (6 samples, 0.04%)</title><rect x="59.1651%" y="245" width="0.0424%" height="15" fill="rgb(227,98,0)" fg:x="8376" fg:w="6"/><text x="59.4151%" y="255.50"></text></g><g><title>do_anonymous_page (6 samples, 0.04%)</title><rect x="59.1651%" y="229" width="0.0424%" height="15" fill="rgb(207,7,3)" fg:x="8376" fg:w="6"/><text x="59.4151%" y="239.50"></text></g><g><title>clear_page_rep (2 samples, 0.01%)</title><rect x="59.2216%" y="117" width="0.0141%" height="15" fill="rgb(206,98,19)" fg:x="8384" fg:w="2"/><text x="59.4716%" y="127.50"></text></g><g><title>alloc_pages_vma (3 samples, 0.02%)</title><rect x="59.2216%" y="165" width="0.0212%" height="15" fill="rgb(217,5,26)" fg:x="8384" fg:w="3"/><text x="59.4716%" y="175.50"></text></g><g><title>__alloc_pages (3 samples, 0.02%)</title><rect x="59.2216%" y="149" width="0.0212%" height="15" fill="rgb(235,190,38)" fg:x="8384" fg:w="3"/><text x="59.4716%" y="159.50"></text></g><g><title>get_page_from_freelist (3 samples, 0.02%)</title><rect x="59.2216%" y="133" width="0.0212%" height="15" fill="rgb(247,86,24)" fg:x="8384" fg:w="3"/><text x="59.4716%" y="143.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.04%)</title><rect x="59.2216%" y="213" width="0.0353%" height="15" fill="rgb(205,101,16)" fg:x="8384" fg:w="5"/><text x="59.4716%" y="223.50"></text></g><g><title>handle_pte_fault (5 samples, 0.04%)</title><rect x="59.2216%" y="197" width="0.0353%" height="15" fill="rgb(246,168,33)" fg:x="8384" fg:w="5"/><text x="59.4716%" y="207.50"></text></g><g><title>do_anonymous_page (5 samples, 0.04%)</title><rect x="59.2216%" y="181" width="0.0353%" height="15" fill="rgb(231,114,1)" fg:x="8384" fg:w="5"/><text x="59.4716%" y="191.50"></text></g><g><title>std::io::Read::read_to_end (41 samples, 0.29%)</title><rect x="58.9744%" y="357" width="0.2896%" height="15" fill="rgb(207,184,53)" fg:x="8349" fg:w="41"/><text x="59.2244%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.06%)</title><rect x="59.2075%" y="341" width="0.0565%" height="15" fill="rgb(224,95,51)" fg:x="8382" fg:w="8"/><text x="59.4575%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="59.2075%" y="325" width="0.0565%" height="15" fill="rgb(212,188,45)" fg:x="8382" fg:w="8"/><text x="59.4575%" y="335.50"></text></g><g><title>_mi_heap_realloc_zero (8 samples, 0.06%)</title><rect x="59.2075%" y="309" width="0.0565%" height="15" fill="rgb(223,154,38)" fg:x="8382" fg:w="8"/><text x="59.4575%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.06%)</title><rect x="59.2075%" y="293" width="0.0565%" height="15" fill="rgb(251,22,52)" fg:x="8382" fg:w="8"/><text x="59.4575%" y="303.50"></text></g><g><title>asm_exc_page_fault (6 samples, 0.04%)</title><rect x="59.2216%" y="277" width="0.0424%" height="15" fill="rgb(229,209,22)" fg:x="8384" fg:w="6"/><text x="59.4716%" y="287.50"></text></g><g><title>exc_page_fault (6 samples, 0.04%)</title><rect x="59.2216%" y="261" width="0.0424%" height="15" fill="rgb(234,138,34)" fg:x="8384" fg:w="6"/><text x="59.4716%" y="271.50"></text></g><g><title>do_user_addr_fault (6 samples, 0.04%)</title><rect x="59.2216%" y="245" width="0.0424%" height="15" fill="rgb(212,95,11)" fg:x="8384" fg:w="6"/><text x="59.4716%" y="255.50"></text></g><g><title>handle_mm_fault (6 samples, 0.04%)</title><rect x="59.2216%" y="229" width="0.0424%" height="15" fill="rgb(240,179,47)" fg:x="8384" fg:w="6"/><text x="59.4716%" y="239.50"></text></g><g><title>libsfasta::formats::sfasta::SfastaParser::open_from_buffer (137 samples, 0.97%)</title><rect x="58.3598%" y="373" width="0.9677%" height="15" fill="rgb(240,163,11)" fg:x="8262" fg:w="137"/><text x="58.6098%" y="383.50"></text></g><g><title>zstd::bulk::decompressor::Decompressor::decompress (9 samples, 0.06%)</title><rect x="59.2640%" y="357" width="0.0636%" height="15" fill="rgb(236,37,12)" fg:x="8390" fg:w="9"/><text x="59.5140%" y="367.50"></text></g><g><title>ZSTD_decompress_usingDDict (9 samples, 0.06%)</title><rect x="59.2640%" y="341" width="0.0636%" height="15" fill="rgb(232,164,16)" fg:x="8390" fg:w="9"/><text x="59.5140%" y="351.50"></text></g><g><title>ZSTD_decompressMultiFrame (9 samples, 0.06%)</title><rect x="59.2640%" y="325" width="0.0636%" height="15" fill="rgb(244,205,15)" fg:x="8390" fg:w="9"/><text x="59.5140%" y="335.50"></text></g><g><title>ZSTD_decompressBlock_internal (9 samples, 0.06%)</title><rect x="59.2640%" y="309" width="0.0636%" height="15" fill="rgb(223,117,47)" fg:x="8390" fg:w="9"/><text x="59.5140%" y="319.50"></text></g><g><title>ZSTD_decompressSequences_bmi2.constprop.0 (8 samples, 0.06%)</title><rect x="59.2710%" y="293" width="0.0565%" height="15" fill="rgb(244,107,35)" fg:x="8391" fg:w="8"/><text x="59.5210%" y="303.50"></text></g><g><title>mi_free (10 samples, 0.07%)</title><rect x="59.3275%" y="373" width="0.0706%" height="15" fill="rgb(205,140,8)" fg:x="8399" fg:w="10"/><text x="59.5775%" y="383.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (21 samples, 0.15%)</title><rect x="60.3165%" y="293" width="0.1483%" height="15" fill="rgb(228,84,46)" fg:x="8539" fg:w="21"/><text x="60.5665%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3 samples, 0.02%)</title><rect x="61.1429%" y="277" width="0.0212%" height="15" fill="rgb(254,188,9)" fg:x="8656" fg:w="3"/><text x="61.3929%" y="287.50"></text></g><g><title>__memcpy_avx_unaligned_erms (100 samples, 0.71%)</title><rect x="61.2418%" y="261" width="0.7064%" height="15" fill="rgb(206,112,54)" fg:x="8670" fg:w="100"/><text x="61.4918%" y="271.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (308 samples, 2.18%)</title><rect x="60.2458%" y="309" width="2.1756%" height="15" fill="rgb(216,84,49)" fg:x="8529" fg:w="308"/><text x="60.4958%" y="319.50">&lt;..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (277 samples, 1.96%)</title><rect x="60.4648%" y="293" width="1.9566%" height="15" fill="rgb(214,194,35)" fg:x="8560" fg:w="277"/><text x="60.7148%" y="303.50">s..</text></g><g><title>core::intrinsics::copy_nonoverlapping (178 samples, 1.26%)</title><rect x="61.1641%" y="277" width="1.2573%" height="15" fill="rgb(249,28,3)" fg:x="8659" fg:w="178"/><text x="61.4141%" y="287.50"></text></g><g><title>__memmove_avx_unaligned (67 samples, 0.47%)</title><rect x="61.9482%" y="261" width="0.4733%" height="15" fill="rgb(222,56,52)" fg:x="8770" fg:w="67"/><text x="62.1982%" y="271.50"></text></g><g><title>__GI___write (6 samples, 0.04%)</title><rect x="62.4214%" y="309" width="0.0424%" height="15" fill="rgb(245,217,50)" fg:x="8837" fg:w="6"/><text x="62.6714%" y="319.50"></text></g><g><title>__entry_text_start (6 samples, 0.04%)</title><rect x="62.4214%" y="293" width="0.0424%" height="15" fill="rgb(213,201,24)" fg:x="8837" fg:w="6"/><text x="62.6714%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (11 samples, 0.08%)</title><rect x="62.4638%" y="309" width="0.0777%" height="15" fill="rgb(248,116,28)" fg:x="8843" fg:w="11"/><text x="62.7138%" y="319.50"></text></g><g><title>__entry_text_start (622 samples, 4.39%)</title><rect x="64.9361%" y="229" width="4.3936%" height="15" fill="rgb(219,72,43)" fg:x="9193" fg:w="622"/><text x="65.1861%" y="239.50">__ent..</text></g><g><title>do_syscall_64 (14 samples, 0.10%)</title><rect x="69.3367%" y="229" width="0.0989%" height="15" fill="rgb(209,138,14)" fg:x="9816" fg:w="14"/><text x="69.5867%" y="239.50"></text></g><g><title>__x64_sys_write (225 samples, 1.59%)</title><rect x="69.8594%" y="213" width="1.5893%" height="15" fill="rgb(222,18,33)" fg:x="9890" fg:w="225"/><text x="70.1094%" y="223.50"></text></g><g><title>__x86_indirect_thunk_rax (47 samples, 0.33%)</title><rect x="71.4488%" y="213" width="0.3320%" height="15" fill="rgb(213,199,7)" fg:x="10115" fg:w="47"/><text x="71.6988%" y="223.50"></text></g><g><title>__fdget_pos (18 samples, 0.13%)</title><rect x="71.9785%" y="181" width="0.1271%" height="15" fill="rgb(250,110,10)" fg:x="10190" fg:w="18"/><text x="72.2285%" y="191.50"></text></g><g><title>__fdget_pos (8 samples, 0.06%)</title><rect x="72.8332%" y="165" width="0.0565%" height="15" fill="rgb(248,123,6)" fg:x="10311" fg:w="8"/><text x="73.0832%" y="175.50"></text></g><g><title>__fget_light (288 samples, 2.03%)</title><rect x="72.8897%" y="165" width="2.0343%" height="15" fill="rgb(206,91,31)" fg:x="10319" fg:w="288"/><text x="73.1397%" y="175.50">_..</text></g><g><title>__fsnotify_parent (37 samples, 0.26%)</title><rect x="74.9241%" y="165" width="0.2614%" height="15" fill="rgb(211,154,13)" fg:x="10607" fg:w="37"/><text x="75.1741%" y="175.50"></text></g><g><title>__x86_indirect_thunk_rax (7 samples, 0.05%)</title><rect x="75.1854%" y="165" width="0.0494%" height="15" fill="rgb(225,148,7)" fg:x="10644" fg:w="7"/><text x="75.4354%" y="175.50"></text></g><g><title>rw_verify_area (46 samples, 0.32%)</title><rect x="75.2349%" y="165" width="0.3249%" height="15" fill="rgb(220,160,43)" fg:x="10651" fg:w="46"/><text x="75.4849%" y="175.50"></text></g><g><title>__cond_resched (3 samples, 0.02%)</title><rect x="79.3388%" y="133" width="0.0212%" height="15" fill="rgb(213,52,39)" fg:x="11232" fg:w="3"/><text x="79.5888%" y="143.50"></text></g><g><title>lockref_get_not_zero (106 samples, 0.75%)</title><rect x="79.6285%" y="117" width="0.7487%" height="15" fill="rgb(243,137,7)" fg:x="11273" fg:w="106"/><text x="79.8785%" y="127.50"></text></g><g><title>dget_parent (150 samples, 1.06%)</title><rect x="79.3600%" y="133" width="1.0595%" height="15" fill="rgb(230,79,13)" fg:x="11235" fg:w="150"/><text x="79.6100%" y="143.50"></text></g><g><title>rcu_read_unlock_strict (6 samples, 0.04%)</title><rect x="80.3772%" y="117" width="0.0424%" height="15" fill="rgb(247,105,23)" fg:x="11379" fg:w="6"/><text x="80.6272%" y="127.50"></text></g><g><title>__cond_resched (58 samples, 0.41%)</title><rect x="80.5467%" y="117" width="0.4097%" height="15" fill="rgb(223,179,41)" fg:x="11403" fg:w="58"/><text x="80.7967%" y="127.50"></text></g><g><title>rcu_all_qs (16 samples, 0.11%)</title><rect x="80.9564%" y="117" width="0.1130%" height="15" fill="rgb(218,9,34)" fg:x="11461" fg:w="16"/><text x="81.2064%" y="127.50"></text></g><g><title>dput (103 samples, 0.73%)</title><rect x="80.4196%" y="133" width="0.7276%" height="15" fill="rgb(222,106,8)" fg:x="11385" fg:w="103"/><text x="80.6696%" y="143.50"></text></g><g><title>rcu_read_unlock_strict (11 samples, 0.08%)</title><rect x="81.0694%" y="117" width="0.0777%" height="15" fill="rgb(211,220,0)" fg:x="11477" fg:w="11"/><text x="81.3194%" y="127.50"></text></g><g><title>fsnotify (99 samples, 0.70%)</title><rect x="81.1471%" y="133" width="0.6993%" height="15" fill="rgb(229,52,16)" fg:x="11488" fg:w="99"/><text x="81.3971%" y="143.50"></text></g><g><title>lockref_get_not_zero (26 samples, 0.18%)</title><rect x="81.8464%" y="133" width="0.1837%" height="15" fill="rgb(212,155,18)" fg:x="11587" fg:w="26"/><text x="82.0964%" y="143.50"></text></g><g><title>lockref_put_return (79 samples, 0.56%)</title><rect x="82.0301%" y="133" width="0.5580%" height="15" fill="rgb(242,21,14)" fg:x="11613" fg:w="79"/><text x="82.2801%" y="143.50"></text></g><g><title>__fsnotify_parent (826 samples, 5.83%)</title><rect x="77.3328%" y="149" width="5.8346%" height="15" fill="rgb(222,19,48)" fg:x="10948" fg:w="826"/><text x="77.5828%" y="159.50">__fsnot..</text></g><g><title>rcu_read_unlock_strict (82 samples, 0.58%)</title><rect x="82.5881%" y="133" width="0.5792%" height="15" fill="rgb(232,45,27)" fg:x="11692" fg:w="82"/><text x="82.8381%" y="143.50"></text></g><g><title>dget_parent (9 samples, 0.06%)</title><rect x="83.1673%" y="149" width="0.0636%" height="15" fill="rgb(249,103,42)" fg:x="11774" fg:w="9"/><text x="83.4173%" y="159.50"></text></g><g><title>dput (3 samples, 0.02%)</title><rect x="83.2309%" y="149" width="0.0212%" height="15" fill="rgb(246,81,33)" fg:x="11783" fg:w="3"/><text x="83.4809%" y="159.50"></text></g><g><title>fsnotify (19 samples, 0.13%)</title><rect x="83.2521%" y="149" width="0.1342%" height="15" fill="rgb(252,33,42)" fg:x="11786" fg:w="19"/><text x="83.5021%" y="159.50"></text></g><g><title>__x86_indirect_thunk_rax (64 samples, 0.45%)</title><rect x="83.3934%" y="133" width="0.4521%" height="15" fill="rgb(209,212,41)" fg:x="11806" fg:w="64"/><text x="83.6434%" y="143.50"></text></g><g><title>apparmor_file_permission (213 samples, 1.50%)</title><rect x="83.8454%" y="133" width="1.5046%" height="15" fill="rgb(207,154,6)" fg:x="11870" fg:w="213"/><text x="84.0954%" y="143.50"></text></g><g><title>aa_file_perm (8 samples, 0.06%)</title><rect x="85.5407%" y="117" width="0.0565%" height="15" fill="rgb(223,64,47)" fg:x="12110" fg:w="8"/><text x="85.7907%" y="127.50"></text></g><g><title>rw_verify_area (589 samples, 4.16%)</title><rect x="83.3863%" y="149" width="4.1605%" height="15" fill="rgb(211,161,38)" fg:x="11805" fg:w="589"/><text x="83.6363%" y="159.50">rw_ve..</text></g><g><title>security_file_permission (311 samples, 2.20%)</title><rect x="85.3500%" y="133" width="2.1968%" height="15" fill="rgb(219,138,40)" fg:x="12083" fg:w="311"/><text x="85.6000%" y="143.50">s..</text></g><g><title>apparmor_file_permission (276 samples, 1.95%)</title><rect x="85.5972%" y="117" width="1.9496%" height="15" fill="rgb(241,228,46)" fg:x="12118" fg:w="276"/><text x="85.8472%" y="127.50">a..</text></g><g><title>aa_file_perm (67 samples, 0.47%)</title><rect x="87.0735%" y="101" width="0.4733%" height="15" fill="rgb(223,209,38)" fg:x="12327" fg:w="67"/><text x="87.3235%" y="111.50"></text></g><g><title>rcu_read_unlock_strict (7 samples, 0.05%)</title><rect x="87.4974%" y="85" width="0.0494%" height="15" fill="rgb(236,164,45)" fg:x="12387" fg:w="7"/><text x="87.7474%" y="95.50"></text></g><g><title>vfs_write (1,707 samples, 12.06%)</title><rect x="75.5598%" y="165" width="12.0576%" height="15" fill="rgb(231,15,5)" fg:x="10697" fg:w="1707"/><text x="75.8098%" y="175.50">vfs_write</text></g><g><title>security_file_permission (10 samples, 0.07%)</title><rect x="87.5468%" y="149" width="0.0706%" height="15" fill="rgb(252,35,15)" fg:x="12394" fg:w="10"/><text x="87.7968%" y="159.50"></text></g><g><title>ksys_write (2,537 samples, 17.92%)</title><rect x="72.1057%" y="181" width="17.9205%" height="15" fill="rgb(248,181,18)" fg:x="10208" fg:w="2537"/><text x="72.3557%" y="191.50">ksys_write</text></g><g><title>write_null (341 samples, 2.41%)</title><rect x="87.6174%" y="165" width="2.4087%" height="15" fill="rgb(233,39,42)" fg:x="12404" fg:w="341"/><text x="87.8674%" y="175.50">wr..</text></g><g><title>__x64_sys_write (2,558 samples, 18.07%)</title><rect x="71.9785%" y="197" width="18.0688%" height="15" fill="rgb(238,110,33)" fg:x="10190" fg:w="2558"/><text x="72.2285%" y="207.50">__x64_sys_write</text></g><g><title>vfs_write (3 samples, 0.02%)</title><rect x="90.0261%" y="181" width="0.0212%" height="15" fill="rgb(233,195,10)" fg:x="12745" fg:w="3"/><text x="90.2761%" y="191.50"></text></g><g><title>exit_to_user_mode_prepare (4 samples, 0.03%)</title><rect x="90.0473%" y="197" width="0.0283%" height="15" fill="rgb(254,105,3)" fg:x="12748" fg:w="4"/><text x="90.2973%" y="207.50"></text></g><g><title>ksys_write (16 samples, 0.11%)</title><rect x="90.0756%" y="197" width="0.1130%" height="15" fill="rgb(221,225,9)" fg:x="12752" fg:w="16"/><text x="90.3256%" y="207.50"></text></g><g><title>syscall_enter_from_user_mode (47 samples, 0.33%)</title><rect x="90.1886%" y="197" width="0.3320%" height="15" fill="rgb(224,227,45)" fg:x="12768" fg:w="47"/><text x="90.4386%" y="207.50"></text></g><g><title>change_pte_range (2 samples, 0.01%)</title><rect x="93.9606%" y="37" width="0.0141%" height="15" fill="rgb(229,198,43)" fg:x="13302" fg:w="2"/><text x="94.2106%" y="47.50"></text></g><g><title>exit_to_user_mode_loop (3 samples, 0.02%)</title><rect x="93.9606%" y="165" width="0.0212%" height="15" fill="rgb(206,209,35)" fg:x="13302" fg:w="3"/><text x="94.2106%" y="175.50"></text></g><g><title>task_work_run (3 samples, 0.02%)</title><rect x="93.9606%" y="149" width="0.0212%" height="15" fill="rgb(245,195,53)" fg:x="13302" fg:w="3"/><text x="94.2106%" y="159.50"></text></g><g><title>task_numa_work (3 samples, 0.02%)</title><rect x="93.9606%" y="133" width="0.0212%" height="15" fill="rgb(240,92,26)" fg:x="13302" fg:w="3"/><text x="94.2106%" y="143.50"></text></g><g><title>change_prot_numa (3 samples, 0.02%)</title><rect x="93.9606%" y="117" width="0.0212%" height="15" fill="rgb(207,40,23)" fg:x="13302" fg:w="3"/><text x="94.2106%" y="127.50"></text></g><g><title>change_protection (3 samples, 0.02%)</title><rect x="93.9606%" y="101" width="0.0212%" height="15" fill="rgb(223,111,35)" fg:x="13302" fg:w="3"/><text x="94.2106%" y="111.50"></text></g><g><title>change_protection_range (3 samples, 0.02%)</title><rect x="93.9606%" y="85" width="0.0212%" height="15" fill="rgb(229,147,28)" fg:x="13302" fg:w="3"/><text x="94.2106%" y="95.50"></text></g><g><title>change_p4d_range (3 samples, 0.02%)</title><rect x="93.9606%" y="69" width="0.0212%" height="15" fill="rgb(211,29,28)" fg:x="13302" fg:w="3"/><text x="94.2106%" y="79.50"></text></g><g><title>change_pmd_range.isra.0 (3 samples, 0.02%)</title><rect x="93.9606%" y="53" width="0.0212%" height="15" fill="rgb(228,72,33)" fg:x="13302" fg:w="3"/><text x="94.2106%" y="63.50"></text></g><g><title>exit_to_user_mode_prepare (439 samples, 3.10%)</title><rect x="90.9444%" y="181" width="3.1009%" height="15" fill="rgb(205,214,31)" fg:x="12875" fg:w="439"/><text x="91.1944%" y="191.50">exi..</text></g><g><title>fpregs_assert_state_consistent (9 samples, 0.06%)</title><rect x="93.9818%" y="165" width="0.0636%" height="15" fill="rgb(224,111,15)" fg:x="13305" fg:w="9"/><text x="94.2318%" y="175.50"></text></g><g><title>do_syscall_64 (3,193 samples, 22.55%)</title><rect x="71.7807%" y="213" width="22.5542%" height="15" fill="rgb(253,21,26)" fg:x="10162" fg:w="3193"/><text x="72.0307%" y="223.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (540 samples, 3.81%)</title><rect x="90.5206%" y="197" width="3.8144%" height="15" fill="rgb(245,139,43)" fg:x="12815" fg:w="540"/><text x="90.7706%" y="207.50">sysc..</text></g><g><title>fpregs_assert_state_consistent (41 samples, 0.29%)</title><rect x="94.0453%" y="181" width="0.2896%" height="15" fill="rgb(252,170,7)" fg:x="13314" fg:w="41"/><text x="94.2953%" y="191.50"></text></g><g><title>syscall_enter_from_user_mode (43 samples, 0.30%)</title><rect x="94.3350%" y="213" width="0.3037%" height="15" fill="rgb(231,118,14)" fg:x="13355" fg:w="43"/><text x="94.5850%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,581 samples, 25.29%)</title><rect x="69.4356%" y="229" width="25.2949%" height="15" fill="rgb(238,83,0)" fg:x="9830" fg:w="3581"/><text x="69.6856%" y="239.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>syscall_exit_to_user_mode (13 samples, 0.09%)</title><rect x="94.6387%" y="213" width="0.0918%" height="15" fill="rgb(221,39,39)" fg:x="13398" fg:w="13"/><text x="94.8887%" y="223.50"></text></g><g><title>__GI___write (4,503 samples, 31.81%)</title><rect x="63.1490%" y="245" width="31.8076%" height="15" fill="rgb(222,119,46)" fg:x="8940" fg:w="4503"/><text x="63.3990%" y="255.50">__GI___write</text></g><g><title>syscall_return_via_sysret (32 samples, 0.23%)</title><rect x="94.7305%" y="229" width="0.2260%" height="15" fill="rgb(222,165,49)" fg:x="13411" fg:w="32"/><text x="94.9805%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (4,539 samples, 32.06%)</title><rect x="63.0854%" y="293" width="32.0619%" height="15" fill="rgb(219,113,52)" fg:x="8931" fg:w="4539"/><text x="63.3354%" y="303.50">&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (4,539 samples, 32.06%)</title><rect x="63.0854%" y="277" width="32.0619%" height="15" fill="rgb(214,7,15)" fg:x="8931" fg:w="4539"/><text x="63.3354%" y="287.50">&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::w..</text></g><g><title>std::sys::unix::fd::FileDesc::write (4,539 samples, 32.06%)</title><rect x="63.0854%" y="261" width="32.0619%" height="15" fill="rgb(235,32,4)" fg:x="8931" fg:w="4539"/><text x="63.3354%" y="271.50">std::sys::unix::fd::FileDesc::write</text></g><g><title>std::sys::unix::cvt (27 samples, 0.19%)</title><rect x="94.9566%" y="245" width="0.1907%" height="15" fill="rgb(238,90,54)" fg:x="13443" fg:w="27"/><text x="95.2066%" y="255.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (27 samples, 0.19%)</title><rect x="94.9566%" y="229" width="0.1907%" height="15" fill="rgb(213,208,19)" fg:x="13443" fg:w="27"/><text x="95.2066%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard&gt; (7 samples, 0.05%)</title><rect x="95.1473%" y="293" width="0.0494%" height="15" fill="rgb(233,156,4)" fg:x="13470" fg:w="7"/><text x="95.3973%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard as core::ops::drop::Drop&gt;::drop (7 samples, 0.05%)</title><rect x="95.1473%" y="277" width="0.0494%" height="15" fill="rgb(207,194,5)" fg:x="13470" fg:w="7"/><text x="95.3973%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (7 samples, 0.05%)</title><rect x="95.1473%" y="261" width="0.0494%" height="15" fill="rgb(206,111,30)" fg:x="13470" fg:w="7"/><text x="95.3973%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (7 samples, 0.05%)</title><rect x="95.1473%" y="245" width="0.0494%" height="15" fill="rgb(243,70,54)" fg:x="13470" fg:w="7"/><text x="95.3973%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::done (26 samples, 0.18%)</title><rect x="95.1967%" y="293" width="0.1837%" height="15" fill="rgb(242,28,8)" fg:x="13477" fg:w="26"/><text x="95.4467%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (4,660 samples, 32.92%)</title><rect x="62.5415%" y="309" width="32.9166%" height="15" fill="rgb(219,106,18)" fg:x="8854" fg:w="4660"/><text x="62.7915%" y="319.50">std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf::BufGuard::remaining (11 samples, 0.08%)</title><rect x="95.3804%" y="293" width="0.0777%" height="15" fill="rgb(244,222,10)" fg:x="13503" fg:w="11"/><text x="95.6304%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.08%)</title><rect x="95.3804%" y="277" width="0.0777%" height="15" fill="rgb(236,179,52)" fg:x="13503" fg:w="11"/><text x="95.6304%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.08%)</title><rect x="95.3804%" y="261" width="0.0777%" height="15" fill="rgb(213,23,39)" fg:x="13503" fg:w="11"/><text x="95.6304%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.08%)</title><rect x="95.3804%" y="245" width="0.0777%" height="15" fill="rgb(238,48,10)" fg:x="13503" fg:w="11"/><text x="95.6304%" y="255.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (11 samples, 0.08%)</title><rect x="95.4651%" y="309" width="0.0777%" height="15" fill="rgb(251,196,23)" fg:x="13515" fg:w="11"/><text x="95.7151%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (11 samples, 0.08%)</title><rect x="95.4651%" y="293" width="0.0777%" height="15" fill="rgb(250,152,24)" fg:x="13515" fg:w="11"/><text x="95.7151%" y="303.50"></text></g><g><title>__memrchr_avx2 (399 samples, 2.82%)</title><rect x="95.6205%" y="261" width="2.8184%" height="15" fill="rgb(209,150,17)" fg:x="13537" fg:w="399"/><text x="95.8705%" y="271.50">__..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (13 samples, 0.09%)</title><rect x="98.4389%" y="261" width="0.0918%" height="15" fill="rgb(234,202,34)" fg:x="13936" fg:w="13"/><text x="98.6889%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (13 samples, 0.09%)</title><rect x="98.4389%" y="245" width="0.0918%" height="15" fill="rgb(253,148,53)" fg:x="13936" fg:w="13"/><text x="98.6889%" y="255.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (5,442 samples, 38.44%)</title><rect x="60.1681%" y="341" width="38.4403%" height="15" fill="rgb(218,129,16)" fg:x="8518" fg:w="5442"/><text x="60.4181%" y="351.50">&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5,442 samples, 38.44%)</title><rect x="60.1681%" y="325" width="38.4403%" height="15" fill="rgb(216,85,19)" fg:x="8518" fg:w="5442"/><text x="60.4181%" y="335.50">&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::i..</text></g><g><title>std::sys_common::memchr::memrchr (434 samples, 3.07%)</title><rect x="95.5428%" y="309" width="3.0656%" height="15" fill="rgb(235,228,7)" fg:x="13526" fg:w="434"/><text x="95.7928%" y="319.50">std..</text></g><g><title>std::sys::unix::memchr::memrchr (434 samples, 3.07%)</title><rect x="95.5428%" y="293" width="3.0656%" height="15" fill="rgb(245,175,0)" fg:x="13526" fg:w="434"/><text x="95.7928%" y="303.50">std..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (434 samples, 3.07%)</title><rect x="95.5428%" y="277" width="3.0656%" height="15" fill="rgb(208,168,36)" fg:x="13526" fg:w="434"/><text x="95.7928%" y="287.50">std..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (11 samples, 0.08%)</title><rect x="98.5308%" y="261" width="0.0777%" height="15" fill="rgb(246,171,24)" fg:x="13949" fg:w="11"/><text x="98.7808%" y="271.50"></text></g><g><title>_start (10,814 samples, 76.39%)</title><rect x="22.7379%" y="469" width="76.3862%" height="15" fill="rgb(215,142,24)" fg:x="3219" fg:w="10814"/><text x="22.9879%" y="479.50">_start</text></g><g><title>__libc_start_main_alias_2 (10,814 samples, 76.39%)</title><rect x="22.7379%" y="453" width="76.3862%" height="15" fill="rgb(250,187,7)" fg:x="3219" fg:w="10814"/><text x="22.9879%" y="463.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (10,814 samples, 76.39%)</title><rect x="22.7379%" y="437" width="76.3862%" height="15" fill="rgb(228,66,33)" fg:x="3219" fg:w="10814"/><text x="22.9879%" y="447.50">__libc_start_call_main</text></g><g><title>main (10,812 samples, 76.37%)</title><rect x="22.7520%" y="421" width="76.3721%" height="15" fill="rgb(234,215,21)" fg:x="3221" fg:w="10812"/><text x="23.0020%" y="431.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10,812 samples, 76.37%)</title><rect x="22.7520%" y="405" width="76.3721%" height="15" fill="rgb(222,191,20)" fg:x="3221" fg:w="10812"/><text x="23.0020%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sfa::main (10,812 samples, 76.37%)</title><rect x="22.7520%" y="389" width="76.3721%" height="15" fill="rgb(245,79,54)" fg:x="3221" fg:w="10812"/><text x="23.0020%" y="399.50">sfa::main</text></g><g><title>sfa::print_sequence (5,624 samples, 39.73%)</title><rect x="59.3982%" y="373" width="39.7259%" height="15" fill="rgb(240,10,37)" fg:x="8409" fg:w="5624"/><text x="59.6482%" y="383.50">sfa::print_sequence</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5,588 samples, 39.47%)</title><rect x="59.6525%" y="357" width="39.4716%" height="15" fill="rgb(214,192,32)" fg:x="8445" fg:w="5588"/><text x="59.9025%" y="367.50">&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (73 samples, 0.52%)</title><rect x="98.6085%" y="341" width="0.5156%" height="15" fill="rgb(209,36,54)" fg:x="13960" fg:w="73"/><text x="98.8585%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (73 samples, 0.52%)</title><rect x="98.6085%" y="325" width="0.5156%" height="15" fill="rgb(220,10,11)" fg:x="13960" fg:w="73"/><text x="98.8585%" y="335.50"></text></g><g><title>core::cell::BorrowRefMut::new (73 samples, 0.52%)</title><rect x="98.6085%" y="309" width="0.5156%" height="15" fill="rgb(221,106,17)" fg:x="13960" fg:w="73"/><text x="98.8585%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (9 samples, 0.06%)</title><rect x="99.0605%" y="293" width="0.0636%" height="15" fill="rgb(251,142,44)" fg:x="14024" fg:w="9"/><text x="99.3105%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (9 samples, 0.06%)</title><rect x="99.0605%" y="277" width="0.0636%" height="15" fill="rgb(238,13,15)" fg:x="14024" fg:w="9"/><text x="99.3105%" y="287.50"></text></g><g><title>core::mem::replace (9 samples, 0.06%)</title><rect x="99.0605%" y="261" width="0.0636%" height="15" fill="rgb(208,107,27)" fg:x="14024" fg:w="9"/><text x="99.3105%" y="271.50"></text></g><g><title>core::ptr::write (9 samples, 0.06%)</title><rect x="99.0605%" y="245" width="0.0636%" height="15" fill="rgb(205,136,37)" fg:x="14024" fg:w="9"/><text x="99.3105%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (32 samples, 0.23%)</title><rect x="99.1241%" y="469" width="0.2260%" height="15" fill="rgb(250,205,27)" fg:x="14033" fg:w="32"/><text x="99.3741%" y="479.50"></text></g><g><title>do_syscall_64 (4 samples, 0.03%)</title><rect x="99.3219%" y="453" width="0.0283%" height="15" fill="rgb(210,80,43)" fg:x="14061" fg:w="4"/><text x="99.5719%" y="463.50"></text></g><g><title>__x64_sys_exit_group (3 samples, 0.02%)</title><rect x="99.3290%" y="437" width="0.0212%" height="15" fill="rgb(247,160,36)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="447.50"></text></g><g><title>do_group_exit (3 samples, 0.02%)</title><rect x="99.3290%" y="421" width="0.0212%" height="15" fill="rgb(234,13,49)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="431.50"></text></g><g><title>do_exit (3 samples, 0.02%)</title><rect x="99.3290%" y="405" width="0.0212%" height="15" fill="rgb(234,122,0)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="415.50"></text></g><g><title>exit_mm (3 samples, 0.02%)</title><rect x="99.3290%" y="389" width="0.0212%" height="15" fill="rgb(207,146,38)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="399.50"></text></g><g><title>mmput (3 samples, 0.02%)</title><rect x="99.3290%" y="373" width="0.0212%" height="15" fill="rgb(207,177,25)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="383.50"></text></g><g><title>exit_mmap (3 samples, 0.02%)</title><rect x="99.3290%" y="357" width="0.0212%" height="15" fill="rgb(211,178,42)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="367.50"></text></g><g><title>unmap_vmas (3 samples, 0.02%)</title><rect x="99.3290%" y="341" width="0.0212%" height="15" fill="rgb(230,69,54)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="351.50"></text></g><g><title>unmap_single_vma (3 samples, 0.02%)</title><rect x="99.3290%" y="325" width="0.0212%" height="15" fill="rgb(214,135,41)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="335.50"></text></g><g><title>unmap_page_range (3 samples, 0.02%)</title><rect x="99.3290%" y="309" width="0.0212%" height="15" fill="rgb(237,67,25)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="319.50"></text></g><g><title>zap_pmd_range.isra.0 (3 samples, 0.02%)</title><rect x="99.3290%" y="293" width="0.0212%" height="15" fill="rgb(222,189,50)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="303.50"></text></g><g><title>zap_pte_range (3 samples, 0.02%)</title><rect x="99.3290%" y="277" width="0.0212%" height="15" fill="rgb(245,148,34)" fg:x="14062" fg:w="3"/><text x="99.5790%" y="287.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (81 samples, 0.57%)</title><rect x="99.3501%" y="469" width="0.5722%" height="15" fill="rgb(222,29,6)" fg:x="14065" fg:w="81"/><text x="99.6001%" y="479.50"></text></g><g><title>all (14,157 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(221,189,43)" fg:x="0" fg:w="14157"/><text x="0.2500%" y="511.50"></text></g><g><title>sfa (14,151 samples, 99.96%)</title><rect x="0.0424%" y="485" width="99.9576%" height="15" fill="rgb(207,36,27)" fg:x="6" fg:w="14151"/><text x="0.2924%" y="495.50">sfa</text></g><g><title>syscall_return_via_sysret (11 samples, 0.08%)</title><rect x="99.9223%" y="469" width="0.0777%" height="15" fill="rgb(217,90,24)" fg:x="14146" fg:w="11"/><text x="100.1723%" y="479.50"></text></g></svg></svg>